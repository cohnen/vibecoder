├── .eslintrc.js
├── .github
    ├── ISSUE_TEMPLATE.md
    └── pull_request_template.md
├── CONTRIBUTING.md
├── README.md
├── SECURITY.md
├── adminSDK
    ├── directory
    │   └── quickstart.gs
    ├── reports
    │   └── quickstart.gs
    └── reseller
    │   └── quickstart.gs
├── advanced
    ├── README.md
    ├── adminSDK.gs
    ├── adsense.gs
    ├── analytics.gs
    ├── analyticsAdmin.gs
    ├── analyticsData.gs
    ├── bigquery.gs
    ├── calendar.gs
    ├── chat.gs
    ├── classroom.gs
    ├── docs.gs
    ├── doubleclick.gs
    ├── drive.gs
    ├── driveActivity.gs
    ├── driveLabels.gs
    ├── events.gs
    ├── gmail.gs
    ├── iot.gs
    ├── people.gs
    ├── sheets.gs
    ├── shoppingContent.gs
    ├── slides.gs
    ├── tagManager.gs
    ├── tasks.gs
    ├── test_adminSDK.gs
    ├── test_adsense.gs
    ├── test_analytics.gs
    ├── test_bigquery.gs
    ├── test_calendar.gs
    ├── test_classroom.gs
    ├── test_docs.gs
    ├── test_doubleclick.gs
    ├── test_drive.gs
    ├── test_gmail.gs
    ├── test_people.gs
    ├── test_sheets.gs
    ├── test_shoppingContent.gs
    ├── test_slides.gs
    ├── test_tagManager.gs
    ├── test_tasks.gs
    ├── test_youtube.gs
    ├── test_youtubeAnalytics.gs
    ├── test_youtubeContentId.gs
    ├── youtube.gs
    ├── youtubeAnalytics.gs
    └── youtubeContentId.gs
├── ai
    ├── autosummarize
    │   ├── README.md
    │   ├── gemini.js
    │   ├── main.js
    │   └── summarize.js
    ├── custom-func-ai-studio
    │   ├── Code.js
    │   ├── README.md
    │   └── gemini.js
    ├── custom_func_vertex
    │   ├── Code.js
    │   ├── README.md
    │   └── aiVertex.js
    ├── devdocs-link-preview
    │   ├── Cards.js
    │   ├── Helpers.js
    │   ├── Main.js
    │   ├── README.md
    │   └── Vertex.js
    ├── drive-rename
    │   ├── README.md
    │   ├── ai.js
    │   ├── drive.js
    │   ├── main.js
    │   └── ui.js
    ├── gmail-sentiment-analysis
    │   ├── Cards.gs
    │   ├── Code.gs
    │   ├── Gmail.gs
    │   ├── README.md
    │   └── Vertex.gs
    └── standup-chat-app
    │   ├── README.md
    │   ├── db.js
    │   ├── gemini.js
    │   ├── main.js
    │   └── memoize.js
├── apps-script
    └── execute
    │   └── target.js
├── calendar
    └── quickstart
    │   └── quickstart.gs
├── chat
    ├── advanced-service
    │   ├── AppAuthenticationUtils.gs
    │   ├── Main.gs
    │   └── README.md
    └── quickstart
    │   ├── Code.gs
    │   └── README.md
├── classroom
    ├── quickstart
    │   └── quickstart.gs
    └── snippets
    │   ├── addAlias.gs
    │   ├── courseUpdate.gs
    │   ├── createAlias.gs
    │   ├── createCourse.gs
    │   ├── getCourse.gs
    │   ├── listCourses.gs
    │   ├── patchCourse.gs
    │   └── test_classroom_snippets.gs
├── data-studio
    ├── auth.gs
    ├── build.gs
    ├── caas.gs
    ├── data-source.gs
    ├── errors.gs
    ├── links.gs
    ├── manifest.gs
    └── semantics.gs
├── docs
    ├── README.md
    ├── cursorInspector
    │   ├── README.md
    │   └── cursorInspector.gs
    ├── dialog2sidebar
    │   ├── Code.gs
    │   └── README.md
    ├── quickstart
    │   └── quickstart.gs
    └── translate
    │   ├── README.md
    │   └── translate.gs
├── drive
    ├── activity-v2
    │   └── quickstart.gs
    ├── activity
    │   └── quickstart.gs
    └── quickstart
    │   └── quickstart.gs
├── forms-api
    ├── demos
    │   └── AppsScriptFormsAPIWebApp
    │   │   ├── Code.gs
    │   │   ├── FormsAPI.gs
    │   │   └── README.md
    └── snippets
    │   ├── README.md
    │   └── retrieve_all_responses.gs
├── forms
    ├── README.md
    └── notifications
    │   ├── README.md
    │   └── notification.gs
├── gmail-sentiment-analysis
    ├── Cards.gs
    ├── Code.gs
    ├── Gmail.gs
    ├── README.md
    └── Vertex.gs
├── gmail
    ├── README.md
    ├── add-ons
    │   └── quickstart.gs
    ├── inlineimage
    │   └── inlineimage.gs
    ├── markup
    │   └── Code.gs
    ├── quickstart
    │   └── quickstart.gs
    └── sendingEmails
    │   └── sendingEmails.gs
├── mashups
    ├── sheets2calendar.gs
    ├── sheets2chat.gs
    ├── sheets2contacts.gs
    ├── sheets2docs.gs
    ├── sheets2drive.gs
    ├── sheets2forms.gs
    ├── sheets2gmail.gs
    ├── sheets2maps.gs
    ├── sheets2slides.gs
    └── sheets2translate.gs
├── people
    └── quickstart
    │   └── quickstart.gs
├── picker
    ├── README.md
    └── code.gs
├── service
    ├── jdbc.gs
    ├── propertyService.gs
    ├── test_jdbc.gs
    └── test_propertyServices.gs
├── sheets
    ├── README.md
    ├── api
    │   ├── helpers.gs
    │   ├── spreadsheet_snippets.gs
    │   └── test_spreadsheet_snippets.gs
    ├── customFunctions
    │   ├── btc.gs
    │   └── customFunctions.gs
    ├── dateAddAndSubtract
    │   ├── README.md
    │   ├── dateAddAndSubtract.gs
    │   └── moment.gs
    ├── forms
    │   └── forms.gs
    ├── maps
    │   └── maps.gs
    ├── next18
    │   ├── Constants.gs
    │   ├── Invoice.gs
    │   ├── README.md
    │   └── Salesforce.gs
    ├── quickstart
    │   └── quickstart.gs
    └── removingDuplicates
    │   └── removingDuplicates.gs
├── slides
    ├── README.md
    ├── SpeakerNotesScript
    │   ├── README.md
    │   └── scriptGen.gs
    ├── api
    │   ├── Helpers.gs
    │   ├── Snippets.gs
    │   └── Tests.gs
    ├── imageSlides
    │   └── imageSlides.gs
    ├── progress
    │   └── progress.gs
    ├── quickstart
    │   └── quickstart.gs
    ├── selection
    │   └── selection.gs
    ├── style
    │   ├── style.gs
    │   └── test_style.gs
    └── translate
    │   └── translate.gs
├── solutions
    ├── add-on
    │   ├── book-smartchip
    │   │   ├── Code.js
    │   │   └── README.md
    │   └── share-macro
    │   │   ├── Code.js
    │   │   ├── README.md
    │   │   └── UI.js
    ├── attendance-chat-app
    │   ├── README.md
    │   ├── final
    │   │   └── Code.gs
    │   ├── step-3
    │   │   └── Code.gs
    │   ├── step-4
    │   │   └── Code.gs
    │   ├── step-5
    │   │   └── Code.gs
    │   └── step-6
    │   │   └── Code.gs
    ├── automations
    │   ├── agenda-maker
    │   │   ├── Code.js
    │   │   └── README.md
    │   ├── aggregate-document-content
    │   │   ├── Code.js
    │   │   ├── Menu.js
    │   │   ├── README.md
    │   │   ├── Setup.js
    │   │   └── Utilities.js
    │   ├── bracket-maker
    │   │   ├── Code.js
    │   │   └── README.md
    │   ├── calendar-timesheet
    │   │   ├── Code.js
    │   │   └── README.md
    │   ├── content-signup
    │   │   ├── Code.js
    │   │   └── README.md
    │   ├── course-feedback-response
    │   │   ├── Code.js
    │   │   └── README.md
    │   ├── employee-certificate
    │   │   ├── Code.js
    │   │   └── README.md
    │   ├── equipment-requests
    │   │   ├── Code.js
    │   │   └── README.md
    │   ├── event-session-signup
    │   │   ├── Code.js
    │   │   └── README.md
    │   ├── feedback-sentiment-analysis
    │   │   ├── README.md
    │   │   └── code.js
    │   ├── folder-creation
    │   │   ├── Code.js
    │   │   └── README.md
    │   ├── generate-pdfs
    │   │   ├── Code.js
    │   │   ├── Menu.js
    │   │   ├── README.md
    │   │   └── Utilities.js
    │   ├── import-csv-sheets
    │   │   ├── Code.js
    │   │   ├── README.md
    │   │   ├── SampleData.js
    │   │   ├── SetupSample.js
    │   │   └── Utilities.js
    │   ├── mail-merge
    │   │   ├── Code.js
    │   │   └── README.md
    │   ├── news-sentiment
    │   │   ├── Code.js
    │   │   └── README.md
    │   ├── offsite-activity-signup
    │   │   ├── Code.js
    │   │   └── README.md
    │   ├── tax-loss-harvest-alerts
    │   │   ├── Code.js
    │   │   └── README.md
    │   ├── timesheets
    │   │   ├── Code.js
    │   │   └── README.md
    │   ├── upload-files
    │   │   ├── Code.js
    │   │   ├── README.md
    │   │   └── Setup.js
    │   ├── vacation-calendar
    │   │   ├── Code.js
    │   │   └── README.md
    │   └── youtube-tracker
    │   │   ├── Code.js
    │   │   └── README.md
    ├── custom-functions
    │   ├── calculate-driving-distance
    │   │   ├── Code.js
    │   │   └── README.md
    │   ├── summarize-sheets-data
    │   │   ├── Code.js
    │   │   └── README.md
    │   └── tier-pricing
    │   │   ├── Code.js
    │   │   └── README.md
    ├── editor-add-on
    │   └── clean-sheet
    │   │   ├── Code.js
    │   │   ├── Menu.js
    │   │   └── README.md
    ├── ooo-chat-app
    │   ├── Code.js
    │   └── README.md
    └── schedule-meetings
    │   ├── Code.js
    │   ├── Dialog.js
    │   ├── README.md
    │   └── Utilities.js
├── tasks
    ├── quickstart
    │   └── quickstart.gs
    └── simpleTasks
    │   ├── README.md
    │   └── simpleTasks.gs
├── templates
    ├── README.md
    ├── custom-functions
    │   ├── Code.gs
    │   └── README.md
    ├── docs-addon
    │   ├── Code.gs
    │   └── README.md
    ├── forms-addon
    │   ├── Code.gs
    │   └── README.md
    ├── sheets-addon
    │   ├── Code.gs
    │   └── README.md
    ├── sheets-import
    │   ├── APICode.gs
    │   ├── Auth.gs
    │   ├── Configurations.gs
    │   ├── README.md
    │   ├── Server.gs
    │   └── Utilities.gs
    ├── standalone
    │   └── helloWorld.gs
    └── web-app
    │   ├── Code.gs
    │   └── README.md
├── triggers
    ├── form
    │   └── Code.gs
    ├── test_triggers.gs
    └── triggers.gs
├── ui
    ├── communication
    │   ├── basic
    │   │   └── code.gs
    │   ├── failure
    │   │   └── code.gs
    │   ├── private
    │   │   └── code.gs
    │   ├── runner.gs
    │   └── success
    │   │   └── code.gs
    ├── dialogs
    │   ├── dialogs.gs
    │   └── menus.gs
    ├── forms
    │   └── code.gs
    ├── sidebar
    │   └── code.gs
    ├── user
    │   └── code.gs
    └── webapp
    │   └── code.gs
├── utils
    ├── logging.gs
    └── test_logging.gs
└── wasm
    ├── README.md
    ├── hello-world
        ├── README.md
        ├── build.js
        ├── polyfill.js
        └── src
        │   ├── main.js
        │   ├── test.js
        │   └── wasm.js
    ├── image-add-on
        ├── README.md
        ├── build.js
        ├── polyfill.js
        └── src
        │   ├── add-on.js
        │   ├── main.js
        │   ├── test.js
        │   └── wasm.js
    └── python
        ├── README.md
        ├── build.js
        ├── polyfill.js
        └── src
            ├── main.js
            ├── test.js
            └── wasm.js


/.eslintrc.js:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright 2022 Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *      http://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | module.exports = {
18 |   extends: 'google',
19 |   parserOptions: {
20 |     ecmaVersion: 2020
21 |   },
22 |   env: {
23 |     node: true,
24 |     'googleappsscript/googleappsscript': true
25 |   },
26 |   rules: {
27 |     'comma-dangle': ['error', 'never'],
28 |     'max-len': ['error', { code: 100 }],
29 |     'camelcase': ['error', {
30 |       'ignoreDestructuring': true,
31 |       'ignoreImports': true,
32 |       'allow': ['access_type', 'redirect_uris'],
33 |     }],
34 |     'guard-for-in': 'off',
35 |     'no-var': 'off', // ES3
36 |     'no-unused-vars': 'off' // functions aren't used.
37 |   },
38 |   plugins: [
39 |      'googleappsscript'
40 |   ]
41 | }
42 | 


--------------------------------------------------------------------------------
/.github/ISSUE_TEMPLATE.md:
--------------------------------------------------------------------------------
 1 | # Summary
 2 | 
 3 | TODO
 4 | 
 5 | ## Expected Behavior
 6 | 
 7 | Sample URL:
 8 | Description:
 9 | 
10 | ## Actual Behavior
11 | 
12 | 
13 | ## Steps to Reproduce the Problem
14 | 
15 | 1.
16 | 1.
17 | 1.
18 | 


--------------------------------------------------------------------------------
/.github/pull_request_template.md:
--------------------------------------------------------------------------------
 1 | # Description
 2 | 
 3 | Please include a summary of the change and which issue is fixed. Please also include relevant motivation and context. List any dependencies that are required for this change.
 4 | 
 5 | Fixes # (issue)
 6 | 
 7 | ## Is it been tested?
 8 | - [ ] Development testing done
 9 | 
10 | ## Checklist
11 | 
12 | - [ ] My code follows the style guidelines of this project
13 | - [ ] I have performed a self-review of my own code
14 | - [ ] I have performed a peer-reviewed with team member(s)
15 | - [ ] I have commented my code, particularly in hard-to-understand areas
16 | - [ ] I have made corresponding changes to the documentation
17 | - [ ] My changes generate no new warnings
18 | - [ ] Any dependent changes have been merged and published in downstream modules
19 | 


--------------------------------------------------------------------------------
/CONTRIBUTING.md:
--------------------------------------------------------------------------------
 1 | # How to become a contributor and submit your own code
 2 | 
 3 | ## Contributor License Agreements
 4 | 
 5 | We'd love to accept your sample apps and patches! Before we can take them, we
 6 | have to jump a couple of legal hurdles.
 7 | 
 8 | Please fill out either the individual or corporate Contributor License Agreement
 9 | (CLA).
10 | 
11 | * If you are an individual writing original source code and you're sure you
12 |   own the intellectual property, then you'll need to sign an
13 |   [individual CLA](https://developers.google.com/open-source/cla/individual).
14 | * If you work for a company that wants to allow you to contribute your work,
15 |   then you'll need to sign a
16 |   [corporate CLA](https://developers.google.com/open-source/cla/corporate).
17 | 
18 | Follow either of the two links above to access the appropriate CLA and
19 | instructions for how to sign and return it. Once we receive it, we'll be able to
20 | accept your pull requests.
21 | 
22 | ## Contributing A Patch
23 | 
24 | 1. Submit an issue describing your proposed change to the repository in question.
25 | 1. The repository owner will respond to your issue promptly.
26 | 1. If your proposed change is accepted, and you haven't already done so, sign a Contributor License Agreement (see details above).
27 | 1. Fork the desired repository, develop and test your code changes.
28 | 1. Ensure that your code adheres to the existing style in the sample to which you are contributing.
29 | 1. Ensure that your code has an appropriate set of unit tests which all pass.
30 | 1. Submit a pull request!
31 | 
32 | ## Style
33 | 
34 | Samples in this repository follow the [JavaScript Semi-Standard
35 | Style](https://github.com/Flet/semistandard).
36 | 


--------------------------------------------------------------------------------
/README.md:
--------------------------------------------------------------------------------
  1 | # Google Apps Script Samples
  2 | 
  3 | Various sample code and projects for the Google Apps Script platform, a JavaScript platform in the cloud.
  4 | 
  5 | Learn more at [developers.google.com](https://developers.google.com/apps-script).
  6 | 
  7 | ## Google APIs
  8 | 
  9 | <img
 10 | src="https://www.gstatic.com/images/branding/product/2x/admin_96dp.png"
 11 | align="left"
 12 | width="96px"/>
 13 | ### AdminSDK
 14 | - [Manage domains and apps](adminSDK)
 15 | <br><br>
 16 | 
 17 | <img
 18 | src="https://www.gstatic.com/images/branding/product/2x/google_cloud_96dp.png"
 19 | align="left"
 20 | width="96px"/>
 21 | ### Advanced Services
 22 | - [Access Google APIs via Advanced Google services](advanced/)
 23 | <br><br>
 24 | 
 25 | <img
 26 | src="https://www.gstatic.com/images/branding/product/2x/calendar_96dp.png"
 27 | align="left"
 28 | width="96px"/>
 29 | ### Calendar
 30 | - [List upcoming events](calendar/quickstart)
 31 | - [Create a vacation calendar](solutions/automations/vacation-calendar/Code.js)
 32 | 
 33 | <img
 34 | src="https://www.gstatic.com/images/branding/product/2x/classroom_96dp.png"
 35 | align="left"
 36 | width="96px"/>
 37 | ### Classroom
 38 | - [Manage Google Classroom](classroom/quickstart)
 39 | <br><br>
 40 | 
 41 | <img
 42 | src="https://www.gstatic.com/images/branding/product/2x/data_studio_96dp.png"
 43 | align="left"
 44 | width="96px"/>
 45 | ### Data Studio
 46 | - [Build a connector](data-studio/build.gs)
 47 | - [Authentication and Authorization](data-studio/auth.gs)
 48 | 
 49 | <img
 50 | src="https://www.gstatic.com/images/branding/product/2x/docs_96dp.png"
 51 | align="left"
 52 | width="96px"/>
 53 | ### Docs
 54 | - [Cursor inspector add-on](docs/cursorInspector)
 55 | - [Translate add-on](docs/translate)
 56 | 
 57 | <img
 58 | src="https://www.gstatic.com/images/branding/product/2x/drive_96dp.png"
 59 | align="left"
 60 | width="96px"/>
 61 | ### Drive
 62 | - [Manage Google Drive files and folders](drive/quickstart)
 63 | - [View Google Drive activity](drive/activity)
 64 | 
 65 | <img
 66 | src="https://www.gstatic.com/images/branding/product/2x/forms_96dp.png"
 67 | align="left"
 68 | width="96px"/>
 69 | ### Forms
 70 | - [Notification add-on](forms)
 71 | <br><br>
 72 | 
 73 | <img
 74 | src="https://www.gstatic.com/images/branding/product/2x/gmail_96dp.png"
 75 | align="left"
 76 | width="96px"/>
 77 | ### Gmail
 78 | - [Sending email](gmail/sendingEmails)
 79 | - [Mailmerge: Merge a template email with content](gmail/mailmerge)
 80 | 
 81 | <img
 82 | src="https://www.gstatic.com/images/icons/material/system/2x/people_black_48dp.png"
 83 | align="left"
 84 | width="96px"/>
 85 | ### People
 86 | - [Listing Connections](people/quickstart)
 87 | <br><br>
 88 | 
 89 | <img
 90 | src="https://www.gstatic.com/images/branding/product/2x/sheets_96dp.png"
 91 | align="left"
 92 | width="96px"/>
 93 | ### Sheets
 94 | - [Managing Responses for Google Forms](sheets)
 95 | - [Menus and Custom Functions](sheets)
 96 | 
 97 | <img
 98 | src="https://www.gstatic.com/images/branding/product/2x/slides_96dp.png"
 99 | align="left"
100 | width="96px"/>
101 | ### Slides
102 | - [Translate Slides Add-on](slides/translate)
103 | - [Progress Bars add-on](slides/progress)
104 | 
105 | <img
106 | src="https://www.gstatic.com/images/branding/product/2x/tasks_96dp.png"
107 | align="left"
108 | width="96px"/>
109 | ### Tasks
110 | - [List Tasks](tasks/quickstart)
111 | - [Simple Tasks Web App](tasks/simpleTasks)
112 | 
113 | <img
114 | src="https://www.gstatic.com/images/icons/material/system/2x/code_grey600_48dp.png"
115 | align="left"
116 | width="96px"/>
117 | ### Templates
118 | - Build off a working framework for new Apps Script projects.
119 | <br><br>
120 | 
121 | <img
122 | src="https://www.gstatic.com/images/icons/material/system/2x/alarm_grey600_48dp.png"
123 | align="left"
124 | width="96px"/>
125 | ### Triggers
126 | - Call an Apps Script function such as `onOpen`, `onEdit`, or `onInstall` in an add-on
127 | - Create a [time-driven trigger](https://developers.google.com/apps-script/guides/triggers/installable#time_driven_triggers)
128 | 
129 | ## Codelabs
130 | 
131 | Codelab tutorials combine detailed explanation, coding exercises, and documented best practices to help engineers get up to speed with key Google technologies. Here's a list of Apps Script codelabs:
132 | 
133 | - [Apps Script Intro](http://g.co/codelabs/apps-script-intro)
134 | - [Apps Script CLI – clasp](http://g.co/codelabs/clasp)
135 | - [BigQuery + Sheets + Slides](http://g.co/codelabs/bigquery-sheets-slides)
136 | - [Docs Add-on + Cloud Natural Language API](http://g.co/codelabs/nlp-docs)
137 | - [Gmail Add-ons](http://g.co/codelabs/gmail-add-ons)
138 | - [Google Chat Apps](https://developers.google.com/codelabs/chat-apps-script)
139 | 
140 | ## Clone using the `clasp` command-line tool
141 | 
142 | Learn how to clone, pull, and push Apps Script projects on the command-line
143 | using [clasp](https://developers.google.com/apps-script/guides/clasp).
144 | 
145 | ## Lint
146 | 
147 | Run ESLint over this whole repository with:
148 | 
149 | ```shell
150 | npm run lint
151 | ```
152 | 
153 | This command will fix simple errors.
154 | 


--------------------------------------------------------------------------------
/SECURITY.md:
--------------------------------------------------------------------------------
1 | # Report a security issue
2 | 
3 | To report a security issue, please use [https://g.co/vulnz](https://g.co/vulnz). We use
4 | [https://g.co/vulnz](https://g.co/vulnz) for our intake, and do coordination and disclosure here on
5 | GitHub (including using GitHub Security Advisory). The Google Security Team will
6 | respond within 5 working days of your report on [https://g.co/vulnz](https://g.co/vulnz).
7 | 


--------------------------------------------------------------------------------
/adminSDK/directory/quickstart.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | // [START admin_sdk_directory_quickstart]
17 | /**
18 |  * Lists users in a Google Workspace domain.
19 |  * @see https://developers.google.com/admin-sdk/directory/reference/rest/v1/users/list
20 |  */
21 | function listUsers() {
22 |   const optionalArgs = {
23 |     customer: 'my_customer',
24 |     maxResults: 10,
25 |     orderBy: 'email'
26 |   };
27 |   try {
28 |     const response = AdminDirectory.Users.list(optionalArgs);
29 |     const users = response.users;
30 |     if (!users || users.length === 0) {
31 |       console.log('No users found.');
32 |       return;
33 |     }
34 |     // Print the list of user's full name and email
35 |     console.log('Users:');
36 |     for (const user of users) {
37 |       console.log('%s (%s)', user.primaryEmail, user.name.fullName);
38 |     }
39 |   } catch (err) {
40 |     // TODO (developer)- Handle exception from the Directory API
41 |     console.log('Failed with error %s', err.message);
42 |   }
43 | }
44 | // [END admin_sdk_directory_quickstart]
45 | 


--------------------------------------------------------------------------------
/adminSDK/reports/quickstart.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | // [START admin_sdk_reports_quickstart]
17 | /**
18 |  * List login events for a Google Workspace domain.
19 |  * @see https://developers.google.com/admin-sdk/reports/reference/rest/v1/activities/list
20 |  */
21 | function listLogins() {
22 |   const userKey = 'all';
23 |   const applicationName = 'login';
24 |   const optionalArgs = {
25 |     maxResults: 10
26 |   };
27 |   try {
28 |     const response = AdminReports.Activities.list(userKey, applicationName, optionalArgs);
29 |     const activities = response.items;
30 |     if (!activities || activities.length === 0) {
31 |       console.log('No logins found.');
32 |       return;
33 |     }
34 |     // Print login events
35 |     console.log('Logins:');
36 |     for (const activity of activities) {
37 |       console.log('%s: %s (%s)', activity.id.time, activity.actor.email,
38 |           activity.events[0].name);
39 |     }
40 |   } catch (err) {
41 |     // TODO (developer)- Handle exception from the Report  API
42 |     console.log('Failed with error %s', err.message);
43 |   }
44 | }
45 | // [END admin_sdk_reports_quickstart]
46 | 


--------------------------------------------------------------------------------
/adminSDK/reseller/quickstart.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | // [START admin_sdk_reseller_quickstart]
17 | /**
18 |  * List Admin SDK reseller.
19 |  * @see https://developers.google.com/admin-sdk/reseller/reference/rest/v1/subscriptions/list
20 |  */
21 | function listSubscriptions() {
22 |   const optionalArgs = {
23 |     maxResults: 10
24 |   };
25 |   try {
26 |     const response = AdminReseller.Subscriptions.list(optionalArgs);
27 |     const subscriptions = response.subscriptions;
28 |     if (!subscriptions || subscriptions.length === 0) {
29 |       console.log('No subscriptions found.');
30 |       return;
31 |     }
32 |     console.log('Subscriptions:');
33 |     for (const subscription of subscriptions) {
34 |       console.log('%s (%s, %s)', subscription.customerId, subscription.skuId,
35 |           subscription.plan.planName);
36 |     }
37 |   } catch (err) {
38 |     // TODO (developer)- Handle exception from the Reseller  API
39 |     console.log('Failed with error %s', err.message);
40 |   }
41 | }
42 | // [END admin_sdk_reseller_quickstart]
43 | 


--------------------------------------------------------------------------------
/advanced/README.md:
--------------------------------------------------------------------------------
1 | # Advanced Services Samples
2 | 
3 | This directory contains samples for using Apps Script Advanced Services.
4 | 
5 | > Note: These services must be [enabled](https://developers.google.com/apps-script/guides/services/advanced#enabling_advanced_services) before running these samples.
6 | 
7 | Learn more at [developers.google.com](https://developers.google.com/apps-script/guides/services/advanced).
8 | 


--------------------------------------------------------------------------------
/advanced/adminSDK.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | // [START apps_script_admin_sdk_list_all_users]
 17 | /**
 18 |  * Lists all the users in a domain sorted by first name.
 19 |  * @see https://developers.google.com/admin-sdk/directory/reference/rest/v1/users/list
 20 |  */
 21 | function listAllUsers() {
 22 |   let pageToken;
 23 |   let page;
 24 |   do {
 25 |     page = AdminDirectory.Users.list({
 26 |       domain: 'example.com',
 27 |       orderBy: 'givenName',
 28 |       maxResults: 100,
 29 |       pageToken: pageToken
 30 |     });
 31 |     const users = page.users;
 32 |     if (!users) {
 33 |       console.log('No users found.');
 34 |       return;
 35 |     }
 36 |     // Print the user's full name and email.
 37 |     for (const user of users) {
 38 |       console.log('%s (%s)', user.name.fullName, user.primaryEmail);
 39 |     }
 40 |     pageToken = page.nextPageToken;
 41 |   } while (pageToken);
 42 | }
 43 | // [END apps_script_admin_sdk_list_all_users]
 44 | 
 45 | // [START apps_script_admin_sdk_get_users]
 46 | /**
 47 |  * Get a user by their email address and logs all of their data as a JSON string.
 48 |  * @see https://developers.google.com/admin-sdk/directory/reference/rest/v1/users/get
 49 |  */
 50 | function getUser() {
 51 |   // TODO (developer) - Replace userEmail value with yours
 52 |   const userEmail = 'liz@example.com';
 53 |   try {
 54 |     const user = AdminDirectory.Users.get(userEmail);
 55 |     console.log('User data:\n %s', JSON.stringify(user, null, 2));
 56 |   } catch (err) {
 57 |     // TODO (developer)- Handle exception from the API
 58 |     console.log('Failed with error %s', err.message);
 59 |   }
 60 | }
 61 | // [END apps_script_admin_sdk_get_users]
 62 | 
 63 | // [START apps_script_admin_sdk_add_user]
 64 | /**
 65 |  * Adds a new user to the domain, including only the required information. For
 66 |  * the full list of user fields, see the API's reference documentation:
 67 |  * @see https://developers.google.com/admin-sdk/directory/v1/reference/users/insert
 68 |  */
 69 | function addUser() {
 70 |   let user = {
 71 |     // TODO (developer) - Replace primaryEmail value with yours
 72 |     primaryEmail: 'liz@example.com',
 73 |     name: {
 74 |       givenName: 'Elizabeth',
 75 |       familyName: 'Smith'
 76 |     },
 77 |     // Generate a random password string.
 78 |     password: Math.random().toString(36)
 79 |   };
 80 |   try {
 81 |     user = AdminDirectory.Users.insert(user);
 82 |     console.log('User %s created with ID %s.', user.primaryEmail, user.id);
 83 |   } catch (err) {
 84 |     // TODO (developer)- Handle exception from the API
 85 |     console.log('Failed with error %s', err.message);
 86 |   }
 87 | }
 88 | // [END apps_script_admin_sdk_add_user]
 89 | 
 90 | // [START apps_script_admin_sdk_create_alias]
 91 | /**
 92 |  * Creates an alias (nickname) for a user.
 93 |  * @see https://developers.google.com/admin-sdk/directory/reference/rest/v1/users.aliases/insert
 94 |  */
 95 | function createAlias() {
 96 |   // TODO (developer) - Replace userEmail value with yours
 97 |   const userEmail = 'liz@example.com';
 98 |   let alias = {
 99 |     alias: 'chica@example.com'
100 |   };
101 |   try {
102 |     alias = AdminDirectory.Users.Aliases.insert(alias, userEmail);
103 |     console.log('Created alias %s for user %s.', alias.alias, userEmail);
104 |   } catch (err) {
105 |     // TODO (developer)- Handle exception from the API
106 |     console.log('Failed with error %s', err.message);
107 |   }
108 | }
109 | // [END apps_script_admin_sdk_create_alias]
110 | 
111 | // [START apps_script_admin_sdk_list_all_groups]
112 | /**
113 |  * Lists all the groups in the domain.
114 |  * @see https://developers.google.com/admin-sdk/directory/reference/rest/v1/groups/list
115 |  */
116 | function listAllGroups() {
117 |   let pageToken;
118 |   let page;
119 |   do {
120 |     page = AdminDirectory.Groups.list({
121 |       domain: 'example.com',
122 |       maxResults: 100,
123 |       pageToken: pageToken
124 |     });
125 |     const groups = page.groups;
126 |     if (!groups) {
127 |       console.log('No groups found.');
128 |       return;
129 |     }
130 |     // Print group name and email.
131 |     for (const group of groups) {
132 |       console.log('%s (%s)', group.name, group.email);
133 |     }
134 |     pageToken = page.nextPageToken;
135 |   } while (pageToken);
136 | }
137 | // [END apps_script_admin_sdk_list_all_groups]
138 | 
139 | // [START apps_script_admin_sdk_add_group_member]
140 | /**
141 |  * Adds a user to an existing group in the domain.
142 |  * @see https://developers.google.com/admin-sdk/directory/reference/rest/v1/members/insert
143 |  */
144 | function addGroupMember() {
145 |   // TODO (developer) - Replace userEmail value with yours
146 |   const userEmail = 'liz@example.com';
147 |   // TODO (developer) - Replace groupEmail value with yours
148 |   const groupEmail = 'bookclub@example.com';
149 |   const member = {
150 |     email: userEmail,
151 |     role: 'MEMBER'
152 |   };
153 |   try {
154 |     AdminDirectory.Members.insert(member, groupEmail);
155 |     console.log('User %s added as a member of group %s.', userEmail, groupEmail);
156 |   } catch (err) {
157 |     // TODO (developer)- Handle exception from the API
158 |     console.log('Failed with error %s', err.message);
159 |   }
160 | }
161 | // [END apps_script_admin_sdk_add_group_member]
162 | 
163 | // [START apps_script_admin_sdk_migrate]
164 | /**
165 |  * Gets three RFC822 formatted messages from the each of the latest three
166 |  * threads in the user's Gmail inbox, creates a blob from the email content
167 |  * (including attachments), and inserts it in a Google Group in the domain.
168 |  */
169 | function migrateMessages() {
170 |   // TODO (developer) - Replace groupId value with yours
171 |   const groupId = 'exampleGroup@example.com';
172 |   const messagesToMigrate = getRecentMessagesContent();
173 |   for (const messageContent of messagesToMigrate) {
174 |     const contentBlob = Utilities.newBlob(messageContent, 'message/rfc822');
175 |     AdminGroupsMigration.Archive.insert(groupId, contentBlob);
176 |   }
177 | }
178 | 
179 | /**
180 |  * Gets a list of recent messages' content from the user's Gmail account.
181 |  * By default, fetches 3 messages from the latest 3 threads.
182 |  *
183 |  * @return {Array} the messages' content.
184 |  */
185 | function getRecentMessagesContent() {
186 |   const NUM_THREADS = 3;
187 |   const NUM_MESSAGES = 3;
188 |   const threads = GmailApp.getInboxThreads(0, NUM_THREADS);
189 |   const messages = GmailApp.getMessagesForThreads(threads);
190 |   const messagesContent = [];
191 |   for (let i = 0; i < messages.length; i++) {
192 |     for (let j = 0; j < NUM_MESSAGES; j++) {
193 |       const message = messages[i][j];
194 |       if (message) {
195 |         messagesContent.push(message.getRawContent());
196 |       }
197 |     }
198 |   }
199 |   return messagesContent;
200 | }
201 | // [END apps_script_admin_sdk_migrate]
202 | 
203 | // [START apps_script_admin_sdk_get_group_setting]
204 | /**
205 |  * Gets a group's settings and logs them to the console.
206 |  */
207 | function getGroupSettings() {
208 |   // TODO (developer) - Replace groupId value with yours
209 |   const groupId = 'exampleGroup@example.com';
210 |   try {
211 |     const group = AdminGroupsSettings.Groups.get(groupId);
212 |     console.log(JSON.stringify(group, null, 2));
213 |   } catch (err) {
214 |     // TODO (developer)- Handle exception from the API
215 |     console.log('Failed with error %s', err.message);
216 |   }
217 | }
218 | // [END apps_script_admin_sdk_get_group_setting]
219 | 
220 | // [START apps_script_admin_sdk_update_group_setting]
221 | /**
222 |  * Updates group's settings. Here, the description is modified, but various
223 |  * other settings can be changed in the same way.
224 |  * @see https://developers.google.com/admin-sdk/groups-settings/v1/reference/groups/patch
225 |  */
226 | function updateGroupSettings() {
227 |   const groupId = 'exampleGroup@example.com';
228 |   try {
229 |     const group = AdminGroupsSettings.newGroups();
230 |     group.description = 'Newly changed group description';
231 |     AdminGroupsSettings.Groups.patch(group, groupId);
232 |   } catch (err) {
233 |     // TODO (developer)- Handle exception from the API
234 |     console.log('Failed with error %s', err.message);
235 |   }
236 | }
237 | // [END apps_script_admin_sdk_update_group_setting]
238 | 
239 | // [START apps_script_admin_sdk_get_license_assignments]
240 | /**
241 |  * Logs the license assignments, including the product ID and the sku ID, for
242 |  * the users in the domain. Notice the use of page tokens to access the full
243 |  * list of results.
244 |  */
245 | function getLicenseAssignments() {
246 |   const productId = 'Google-Apps';
247 |   const customerId = 'example.com';
248 |   let assignments = [];
249 |   let pageToken = null;
250 |   do {
251 |     const response = AdminLicenseManager.LicenseAssignments.listForProduct(productId, customerId, {
252 |       maxResults: 500,
253 |       pageToken: pageToken
254 |     });
255 |     assignments = assignments.concat(response.items);
256 |     pageToken = response.nextPageToken;
257 |   } while (pageToken);
258 |   // Print the productId and skuId
259 |   for (const assignment of assignments) {
260 |     console.log('userId: %s, productId: %s, skuId: %s',
261 |         assignment.userId, assignment.productId, assignment.skuId);
262 |   }
263 | }
264 | // [END apps_script_admin_sdk_get_license_assignments]
265 | 
266 | // [START apps_script_admin_sdk_insert_license_assignment]
267 | /**
268 |  * Insert a license assignment for a user, for a given product ID and sku ID
269 |  * combination.
270 |  * For more details follow the link
271 |  * https://developers.google.com/admin-sdk/licensing/reference/rest/v1/licenseAssignments/insert
272 |  */
273 | function insertLicenseAssignment() {
274 |   const productId = 'Google-Apps';
275 |   const skuId = 'Google-Vault';
276 |   const userId = 'marty@hoverboard.net';
277 |   try {
278 |     const results = AdminLicenseManager.LicenseAssignments
279 |         .insert({userId: userId}, productId, skuId);
280 |     console.log(results);
281 |   } catch (e) {
282 |     // TODO (developer) - Handle exception.
283 |     console.log('Failed with an error %s ', e.message);
284 |   }
285 | }
286 | // [END apps_script_admin_sdk_insert_license_assignment]
287 | 
288 | // [START apps_script_admin_sdk_generate_login_activity_report]
289 | /**
290 |  * Generates a login activity report for the last week as a spreadsheet. The
291 |  * report includes the time, user, and login result.
292 |  * @see https://developers.google.com/admin-sdk/reports/reference/rest/v1/activities/list
293 |  */
294 | function generateLoginActivityReport() {
295 |   const now = new Date();
296 |   const oneWeekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
297 |   const startTime = oneWeekAgo.toISOString();
298 |   const endTime = now.toISOString();
299 | 
300 |   const rows = [];
301 |   let pageToken;
302 |   let page;
303 |   do {
304 |     page = AdminReports.Activities.list('all', 'login', {
305 |       startTime: startTime,
306 |       endTime: endTime,
307 |       maxResults: 500,
308 |       pageToken: pageToken
309 |     });
310 |     const items = page.items;
311 |     if (items) {
312 |       for (const item of items) {
313 |         const row = [
314 |           new Date(item.id.time),
315 |           item.actor.email,
316 |           item.events[0].name
317 |         ];
318 |         rows.push(row);
319 |       }
320 |     }
321 |     pageToken = page.nextPageToken;
322 |   } while (pageToken);
323 | 
324 |   if (rows.length === 0) {
325 |     console.log('No results returned.');
326 |     return;
327 |   }
328 |   const spreadsheet = SpreadsheetApp.create('Google Workspace Login Report');
329 |   const sheet = spreadsheet.getActiveSheet();
330 | 
331 |   // Append the headers.
332 |   const headers = ['Time', 'User', 'Login Result'];
333 |   sheet.appendRow(headers);
334 | 
335 |   // Append the results.
336 |   sheet.getRange(2, 1, rows.length, headers.length).setValues(rows);
337 | 
338 |   console.log('Report spreadsheet created: %s', spreadsheet.getUrl());
339 | }
340 | // [END apps_script_admin_sdk_generate_login_activity_report]
341 | 
342 | // [START apps_script_admin_sdk_generate_user_usage_report]
343 | /**
344 |  * Generates a user usage report for this day last week as a spreadsheet. The
345 |  * report includes the date, user, last login time, number of emails received,
346 |  * and number of drive files created.
347 |  * @see https://developers.google.com/admin-sdk/reports/reference/rest/v1/userUsageReport/get
348 |  */
349 | function generateUserUsageReport() {
350 |   const today = new Date();
351 |   const oneWeekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
352 |   const timezone = Session.getScriptTimeZone();
353 |   const date = Utilities.formatDate(oneWeekAgo, timezone, 'yyyy-MM-dd');
354 | 
355 |   const parameters = [
356 |     'accounts:last_login_time',
357 |     'gmail:num_emails_received',
358 |     'drive:num_items_created'
359 |   ];
360 |   const rows = [];
361 |   let pageToken;
362 |   let page;
363 |   do {
364 |     page = AdminReports.UserUsageReport.get('all', date, {
365 |       parameters: parameters.join(','),
366 |       maxResults: 500,
367 |       pageToken: pageToken
368 |     });
369 |     if (page.warnings) {
370 |       for (const warning of page.warnings) {
371 |         console.log(warning.message);
372 |       }
373 |     }
374 |     const reports = page.usageReports;
375 |     if (reports) {
376 |       for (const report of reports) {
377 |         const parameterValues = getParameterValues(report.parameters);
378 |         const row = [
379 |           report.date,
380 |           report.entity.userEmail,
381 |           parameterValues['accounts:last_login_time'],
382 |           parameterValues['gmail:num_emails_received'],
383 |           parameterValues['drive:num_items_created']
384 |         ];
385 |         rows.push(row);
386 |       }
387 |     }
388 |     pageToken = page.nextPageToken;
389 |   } while (pageToken);
390 | 
391 |   if (rows.length === 0) {
392 |     console.log('No results returned.');
393 |     return;
394 |   }
395 |   const spreadsheet = SpreadsheetApp.create('Google Workspace User Usage Report');
396 |   const sheet = spreadsheet.getActiveSheet();
397 | 
398 |   // Append the headers.
399 |   const headers = ['Date', 'User', 'Last Login', 'Num Emails Received',
400 |     'Num Drive Files Created'];
401 |   sheet.appendRow(headers);
402 | 
403 |   // Append the results.
404 |   sheet.getRange(2, 1, rows.length, headers.length).setValues(rows);
405 | 
406 |   console.log('Report spreadsheet created: %s', spreadsheet.getUrl());
407 | }
408 | 
409 | /**
410 |  * Gets a map of parameter names to values from an array of parameter objects.
411 |  * @param {Array} parameters An array of parameter objects.
412 |  * @return {Object} A map from parameter names to their values.
413 |  */
414 | function getParameterValues(parameters) {
415 |   return parameters.reduce((result, parameter) => {
416 |     const name = parameter.name;
417 |     let value;
418 |     if (parameter.intValue !== undefined) {
419 |       value = parameter.intValue;
420 |     } else if (parameter.stringValue !== undefined) {
421 |       value = parameter.stringValue;
422 |     } else if (parameter.datetimeValue !== undefined) {
423 |       value = new Date(parameter.datetimeValue);
424 |     } else if (parameter.boolValue !== undefined) {
425 |       value = parameter.boolValue;
426 |     }
427 |     result[name] = value;
428 |     return result;
429 |   }, {});
430 | }
431 | // [END apps_script_admin_sdk_generate_user_usage_report]
432 | 
433 | // [START apps_script_admin_sdk_get_subscriptions]
434 | /**
435 |  * Logs the list of subscriptions, including the customer ID, date created, plan
436 |  * name, and the sku ID. Notice the use of page tokens to access the full list
437 |  * of results.
438 |  * @see https://developers.google.com/admin-sdk/reseller/reference/rest/v1/subscriptions/list
439 |  */
440 | function getSubscriptions() {
441 |   let result;
442 |   let pageToken;
443 |   do {
444 |     result = AdminReseller.Subscriptions.list({
445 |       pageToken: pageToken
446 |     });
447 |     for (const sub of result.subscriptions) {
448 |       const creationDate = new Date();
449 |       creationDate.setUTCSeconds(sub.creationTime);
450 |       console.log('customer ID: %s, date created: %s, plan name: %s, sku id: %s',
451 |           sub.customerId, creationDate.toDateString(), sub.plan.planName,
452 |           sub.skuId);
453 |     }
454 |     pageToken = result.nextPageToken;
455 |   } while (pageToken);
456 | }
457 | // [END apps_script_admin_sdk_get_subscriptions]
458 | 


--------------------------------------------------------------------------------
/advanced/adsense.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | // [START apps_script_adsense_list_accounts]
 17 | /**
 18 |  * Lists available AdSense accounts.
 19 |  */
 20 | function listAccounts() {
 21 |   let pageToken;
 22 |   do {
 23 |     const response = AdSense.Accounts.list({pageToken: pageToken});
 24 |     if (!response.accounts) {
 25 |       console.log('No accounts found.');
 26 |       return;
 27 |     }
 28 |     for (const account of response.accounts) {
 29 |       console.log('Found account with resource name "%s" and display name "%s".',
 30 |           account.name, account.displayName);
 31 |     }
 32 |     pageToken = response.nextPageToken;
 33 |   } while (pageToken);
 34 | }
 35 | // [END apps_script_adsense_list_accounts]
 36 | 
 37 | // [START apps_script_adsense_list_ad_clients]
 38 | /**
 39 |  * Logs available Ad clients for an account.
 40 |  *
 41 |  * @param {string} accountName The resource name of the account that owns the
 42 |  *     collection of ad clients.
 43 |  */
 44 | function listAdClients(accountName) {
 45 |   let pageToken;
 46 |   do {
 47 |     const response = AdSense.Accounts.Adclients.list(accountName, {
 48 |       pageToken: pageToken
 49 |     });
 50 |     if (!response.adClients) {
 51 |       console.log('No ad clients found for this account.');
 52 |       return;
 53 |     }
 54 |     for (const adClient of response.adClients) {
 55 |       console.log('Found ad client for product "%s" with resource name "%s".',
 56 |           adClient.productCode, adClient.name);
 57 |       console.log('Reporting dimension ID: %s',
 58 |           adClient.reportingDimensionId ?? 'None');
 59 |     }
 60 |     pageToken = response.nextPageToken;
 61 |   } while (pageToken);
 62 | }
 63 | // [END apps_script_adsense_list_ad_clients]
 64 | 
 65 | // [START apps_script_adsense_list_ad_units]
 66 | /**
 67 |  * Lists ad units.
 68 |  * @param {string} adClientName The resource name of the ad client that owns the collection
 69 |  *     of ad units.
 70 |  */
 71 | function listAdUnits(adClientName) {
 72 |   let pageToken;
 73 |   do {
 74 |     const response = AdSense.Accounts.Adclients.Adunits.list(adClientName, {
 75 |       pageSize: 50,
 76 |       pageToken: pageToken
 77 |     });
 78 |     if (!response.adUnits) {
 79 |       console.log('No ad units found for this ad client.');
 80 |       return;
 81 |     }
 82 |     for (const adUnit of response.adUnits) {
 83 |       console.log('Found ad unit with resource name "%s" and display name "%s".',
 84 |           adUnit.name, adUnit.displayName);
 85 |     }
 86 | 
 87 |     pageToken = response.nextPageToken;
 88 |   } while (pageToken);
 89 | }
 90 | // [END apps_script_adsense_list_ad_units]
 91 | 
 92 | // [START apps_script_adsense_generate_report]
 93 | /**
 94 |  * Generates a spreadsheet report for a specific ad client in an account.
 95 |  * @param {string} accountName The resource name of the account.
 96 |  * @param {string} adClientReportingDimensionId The reporting dimension ID
 97 |  *     of the ad client.
 98 |  */
 99 | function generateReport(accountName, adClientReportingDimensionId) {
100 |   // Prepare report.
101 |   const today = new Date();
102 |   const oneWeekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
103 | 
104 |   const report = AdSense.Accounts.Reports.generate(accountName, {
105 |     // Specify the desired ad client using a filter.
106 |     filters: ['AD_CLIENT_ID==' + escapeFilterParameter(adClientReportingDimensionId)],
107 |     metrics: ['PAGE_VIEWS', 'AD_REQUESTS', 'AD_REQUESTS_COVERAGE', 'CLICKS',
108 |       'AD_REQUESTS_CTR', 'COST_PER_CLICK', 'AD_REQUESTS_RPM',
109 |       'ESTIMATED_EARNINGS'],
110 |     dimensions: ['DATE'],
111 |     ...dateToJson('startDate', oneWeekAgo),
112 |     ...dateToJson('endDate', today),
113 |     // Sort by ascending date.
114 |     orderBy: ['+DATE']
115 |   });
116 | 
117 |   if (!report.rows) {
118 |     console.log('No rows returned.');
119 |     return;
120 |   }
121 |   const spreadsheet = SpreadsheetApp.create('AdSense Report');
122 |   const sheet = spreadsheet.getActiveSheet();
123 | 
124 |   // Append the headers.
125 |   sheet.appendRow(report.headers.map((header) => header.name));
126 | 
127 |   // Append the results.
128 |   sheet.getRange(2, 1, report.rows.length, report.headers.length)
129 |       .setValues(report.rows.map((row) => row.cells.map((cell) => cell.value)));
130 | 
131 |   console.log('Report spreadsheet created: %s',
132 |       spreadsheet.getUrl());
133 | }
134 | 
135 | /**
136 |  * Escape special characters for a parameter being used in a filter.
137 |  * @param {string} parameter The parameter to be escaped.
138 |  * @return {string} The escaped parameter.
139 |  */
140 | function escapeFilterParameter(parameter) {
141 |   return parameter.replace('\\', '\\\\').replace(',', '\\,');
142 | }
143 | 
144 | /**
145 |  * Returns the JSON representation of a Date object (as a google.type.Date).
146 |  *
147 |  * @param {string} paramName the name of the date parameter
148 |  * @param {Date} value the date
149 |  * @return {object} formatted date
150 |  */
151 | function dateToJson(paramName, value) {
152 |   return {
153 |     [paramName + '.year']: value.getFullYear(),
154 |     [paramName + '.month']: value.getMonth() + 1,
155 |     [paramName + '.day']: value.getDate()
156 |   };
157 | }
158 | 
159 | // [END apps_script_adsense_generate_report]
160 | 


--------------------------------------------------------------------------------
/advanced/analytics.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | // [START apps_script_analytics_accounts]
 17 | /**
 18 |  * Lists Analytics accounts.
 19 |  */
 20 | function listAccounts() {
 21 |   try {
 22 |     const accounts = Analytics.Management.Accounts.list();
 23 |     if (!accounts.items || !accounts.items.length) {
 24 |       console.log('No accounts found.');
 25 |       return;
 26 |     }
 27 | 
 28 |     for (let i = 0; i < accounts.items.length; i++) {
 29 |       const account = accounts.items[i];
 30 |       console.log('Account: name "%s", id "%s".', account.name, account.id);
 31 | 
 32 |       // List web properties in the account.
 33 |       listWebProperties(account.id);
 34 |     }
 35 |   } catch (e) {
 36 |     // TODO (Developer) - Handle exception
 37 |     console.log('Failed with error: %s', e.error);
 38 |   }
 39 | }
 40 | 
 41 | /**
 42 |  * Lists web properites for an Analytics account.
 43 |  * @param  {string} accountId The account ID.
 44 |  */
 45 | function listWebProperties(accountId) {
 46 |   try {
 47 |     const webProperties = Analytics.Management.Webproperties.list(accountId);
 48 |     if (!webProperties.items || !webProperties.items.length) {
 49 |       console.log('\tNo web properties found.');
 50 |       return;
 51 |     }
 52 |     for (let i = 0; i < webProperties.items.length; i++) {
 53 |       const webProperty = webProperties.items[i];
 54 |       console.log('\tWeb Property: name "%s", id "%s".',
 55 |           webProperty.name, webProperty.id);
 56 | 
 57 |       // List profiles in the web property.
 58 |       listProfiles(accountId, webProperty.id);
 59 |     }
 60 |   } catch (e) {
 61 |     // TODO (Developer) - Handle exception
 62 |     console.log('Failed with error: %s', e.error);
 63 |   }
 64 | }
 65 | 
 66 | /**
 67 |  * Logs a list of Analytics accounts profiles.
 68 |  * @param  {string} accountId     The Analytics account ID
 69 |  * @param  {string} webPropertyId The web property ID
 70 |  */
 71 | function listProfiles(accountId, webPropertyId) {
 72 |   // Note: If you experience "Quota Error: User Rate Limit Exceeded" errors
 73 |   // due to the number of accounts or profiles you have, you may be able to
 74 |   // avoid it by adding a Utilities.sleep(1000) statement here.
 75 |   try {
 76 |     const profiles = Analytics.Management.Profiles.list(accountId,
 77 |         webPropertyId);
 78 | 
 79 |     if (!profiles.items || !profiles.items.length) {
 80 |       console.log('\t\tNo web properties found.');
 81 |       return;
 82 |     }
 83 |     for (let i = 0; i < profiles.items.length; i++) {
 84 |       const profile = profiles.items[i];
 85 |       console.log('\t\tProfile: name "%s", id "%s".', profile.name,
 86 |           profile.id);
 87 |     }
 88 |   } catch (e) {
 89 |     // TODO (Developer) - Handle exception
 90 |     console.log('Failed with error: %s', e.error);
 91 |   }
 92 | }
 93 | // [END apps_script_analytics_accounts]
 94 | 
 95 | // [START apps_script_analytics_reports]
 96 | /**
 97 |  * Runs a report of an Analytics profile ID. Creates a sheet with the report.
 98 |  * @param  {string} profileId The profile ID.
 99 |  */
100 | function runReport(profileId) {
101 |   const today = new Date();
102 |   const oneWeekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
103 | 
104 |   const startDate = Utilities.formatDate(oneWeekAgo, Session.getScriptTimeZone(),
105 |       'yyyy-MM-dd');
106 |   const endDate = Utilities.formatDate(today, Session.getScriptTimeZone(),
107 |       'yyyy-MM-dd');
108 | 
109 |   const tableId = 'ga:' + profileId;
110 |   const metric = 'ga:visits';
111 |   const options = {
112 |     'dimensions': 'ga:source,ga:keyword',
113 |     'sort': '-ga:visits,ga:source',
114 |     'filters': 'ga:medium==organic',
115 |     'max-results': 25
116 |   };
117 |   const report = Analytics.Data.Ga.get(tableId, startDate, endDate, metric,
118 |       options);
119 | 
120 |   if (!report.rows) {
121 |     console.log('No rows returned.');
122 |     return;
123 |   }
124 | 
125 |   const spreadsheet = SpreadsheetApp.create('Google Analytics Report');
126 |   const sheet = spreadsheet.getActiveSheet();
127 | 
128 |   // Append the headers.
129 |   const headers = report.columnHeaders.map((columnHeader) => {
130 |     return columnHeader.name;
131 |   });
132 |   sheet.appendRow(headers);
133 | 
134 |   // Append the results.
135 |   sheet.getRange(2, 1, report.rows.length, headers.length)
136 |       .setValues(report.rows);
137 | 
138 |   console.log('Report spreadsheet created: %s',
139 |       spreadsheet.getUrl());
140 | }
141 | // [END apps_script_analytics_reports]
142 | 


--------------------------------------------------------------------------------
/advanced/analyticsAdmin.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright 2021 Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | // [START apps_script_analyticsadmin]
17 | /**
18 |  * Logs the Google Analytics accounts accessible by the current user.
19 |  */
20 | function listAccounts() {
21 |   try {
22 |     accounts = AnalyticsAdmin.Accounts.list();
23 |     if (!accounts.items || !accounts.items.length) {
24 |       console.log('No accounts found.');
25 |       return;
26 |     }
27 | 
28 |     for (let i = 0; i < accounts.items.length; i++) {
29 |       const account = accounts.items[i];
30 |       console.log('Account: name "%s", displayName "%s".', account.name, account.displayName);
31 |     }
32 |   } catch (e) {
33 |     // TODO (Developer) - Handle exception
34 |     console.log('Failed with error: %s', e.error);
35 |   }
36 | }
37 | // [END apps_script_analyticsadmin]
38 | 


--------------------------------------------------------------------------------
/advanced/analyticsData.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright 2021 Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | // [START apps_script_analyticsdata]
17 | /**
18 |  * Runs a report of a Google Analytics 4 property ID. Creates a sheet with the
19 |  * report.
20 |  */
21 | function runReport() {
22 |   /**
23 |    * TODO(developer): Uncomment this variable and replace with your
24 |    *   Google Analytics 4 property ID before running the sample.
25 |    */
26 |   const propertyId = 'YOUR-GA4-PROPERTY-ID';
27 | 
28 |   try {
29 |     const metric = AnalyticsData.newMetric();
30 |     metric.name = 'activeUsers';
31 | 
32 |     const dimension = AnalyticsData.newDimension();
33 |     dimension.name = 'city';
34 | 
35 |     const dateRange = AnalyticsData.newDateRange();
36 |     dateRange.startDate = '2020-03-31';
37 |     dateRange.endDate = 'today';
38 | 
39 |     const request = AnalyticsData.newRunReportRequest();
40 |     request.dimensions = [dimension];
41 |     request.metrics = [metric];
42 |     request.dateRanges = dateRange;
43 | 
44 |     const report = AnalyticsData.Properties.runReport(request,
45 |         'properties/' + propertyId);
46 |     if (!report.rows) {
47 |       console.log('No rows returned.');
48 |       return;
49 |     }
50 | 
51 |     const spreadsheet = SpreadsheetApp.create('Google Analytics Report');
52 |     const sheet = spreadsheet.getActiveSheet();
53 | 
54 |     // Append the headers.
55 |     const dimensionHeaders = report.dimensionHeaders.map(
56 |         (dimensionHeader) => {
57 |           return dimensionHeader.name;
58 |         });
59 |     const metricHeaders = report.metricHeaders.map(
60 |         (metricHeader) => {
61 |           return metricHeader.name;
62 |         });
63 |     const headers = [...dimensionHeaders, ...metricHeaders];
64 | 
65 |     sheet.appendRow(headers);
66 | 
67 |     // Append the results.
68 |     const rows = report.rows.map((row) => {
69 |       const dimensionValues = row.dimensionValues.map(
70 |           (dimensionValue) => {
71 |             return dimensionValue.value;
72 |           });
73 |       const metricValues = row.metricValues.map(
74 |           (metricValues) => {
75 |             return metricValues.value;
76 |           });
77 |       return [...dimensionValues, ...metricValues];
78 |     });
79 | 
80 |     sheet.getRange(2, 1, report.rows.length, headers.length)
81 |         .setValues(rows);
82 | 
83 |     console.log('Report spreadsheet created: %s',
84 |         spreadsheet.getUrl());
85 |   } catch (e) {
86 |     // TODO (Developer) - Handle exception
87 |     console.log('Failed with error: %s', e.error);
88 |   }
89 | }
90 | // [END apps_script_analyticsdata]
91 | 


--------------------------------------------------------------------------------
/advanced/bigquery.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | // [START apps_script_bigquery_run_query]
 17 | /**
 18 |  * Runs a BigQuery query and logs the results in a spreadsheet.
 19 |  */
 20 | function runQuery() {
 21 |   // Replace this value with the project ID listed in the Google
 22 |   // Cloud Platform project.
 23 |   const projectId = 'XXXXXXXX';
 24 | 
 25 |   const request = {
 26 |     // TODO (developer) - Replace query with yours
 27 |     query: 'SELECT refresh_date AS Day, term AS Top_Term, rank ' +
 28 |       'FROM `bigquery-public-data.google_trends.top_terms` ' +
 29 |       'WHERE rank = 1 ' +
 30 |       'AND refresh_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 WEEK) ' +
 31 |       'GROUP BY Day, Top_Term, rank ' +
 32 |       'ORDER BY Day DESC;',
 33 |     useLegacySql: false
 34 |   };
 35 |   let queryResults = BigQuery.Jobs.query(request, projectId);
 36 |   const jobId = queryResults.jobReference.jobId;
 37 | 
 38 |   // Check on status of the Query Job.
 39 |   let sleepTimeMs = 500;
 40 |   while (!queryResults.jobComplete) {
 41 |     Utilities.sleep(sleepTimeMs);
 42 |     sleepTimeMs *= 2;
 43 |     queryResults = BigQuery.Jobs.getQueryResults(projectId, jobId);
 44 |   }
 45 | 
 46 |   // Get all the rows of results.
 47 |   let rows = queryResults.rows;
 48 |   while (queryResults.pageToken) {
 49 |     queryResults = BigQuery.Jobs.getQueryResults(projectId, jobId, {
 50 |       pageToken: queryResults.pageToken
 51 |     });
 52 |     rows = rows.concat(queryResults.rows);
 53 |   }
 54 | 
 55 |   if (!rows) {
 56 |     console.log('No rows returned.');
 57 |     return;
 58 |   }
 59 |   const spreadsheet = SpreadsheetApp.create('BigQuery Results');
 60 |   const sheet = spreadsheet.getActiveSheet();
 61 | 
 62 |   // Append the headers.
 63 |   const headers = queryResults.schema.fields.map(function(field) {
 64 |     return field.name;
 65 |   });
 66 |   sheet.appendRow(headers);
 67 | 
 68 |   // Append the results.
 69 |   const data = new Array(rows.length);
 70 |   for (let i = 0; i < rows.length; i++) {
 71 |     const cols = rows[i].f;
 72 |     data[i] = new Array(cols.length);
 73 |     for (let j = 0; j < cols.length; j++) {
 74 |       data[i][j] = cols[j].v;
 75 |     }
 76 |   }
 77 |   sheet.getRange(2, 1, rows.length, headers.length).setValues(data);
 78 | 
 79 |   console.log('Results spreadsheet created: %s', spreadsheet.getUrl());
 80 | }
 81 | // [END apps_script_bigquery_run_query]
 82 | 
 83 | // [START apps_script_bigquery_load_csv]
 84 | /**
 85 |  * Loads a CSV into BigQuery
 86 |  */
 87 | function loadCsv() {
 88 |   // Replace this value with the project ID listed in the Google
 89 |   // Cloud Platform project.
 90 |   const projectId = 'XXXXXXXX';
 91 |   // Create a dataset in the BigQuery UI (https://bigquery.cloud.google.com)
 92 |   // and enter its ID below.
 93 |   const datasetId = 'YYYYYYYY';
 94 |   // Sample CSV file of Google Trends data conforming to the schema below.
 95 |   // https://docs.google.com/file/d/0BwzA1Orbvy5WMXFLaTR1Z1p2UDg/edit
 96 |   const csvFileId = '0BwzA1Orbvy5WMXFLaTR1Z1p2UDg';
 97 | 
 98 |   // Create the table.
 99 |   const tableId = 'pets_' + new Date().getTime();
100 |   let table = {
101 |     tableReference: {
102 |       projectId: projectId,
103 |       datasetId: datasetId,
104 |       tableId: tableId
105 |     },
106 |     schema: {
107 |       fields: [
108 |         {name: 'week', type: 'STRING'},
109 |         {name: 'cat', type: 'INTEGER'},
110 |         {name: 'dog', type: 'INTEGER'},
111 |         {name: 'bird', type: 'INTEGER'}
112 |       ]
113 |     }
114 |   };
115 |   try {
116 |     table = BigQuery.Tables.insert(table, projectId, datasetId);
117 |     console.log('Table created: %s', table.id);
118 |   } catch (err) {
119 |     console.log('unable to create table');
120 |   }
121 |   // Load CSV data from Drive and convert to the correct format for upload.
122 |   const file = DriveApp.getFileById(csvFileId);
123 |   const data = file.getBlob().setContentType('application/octet-stream');
124 | 
125 |   // Create the data upload job.
126 |   const job = {
127 |     configuration: {
128 |       load: {
129 |         destinationTable: {
130 |           projectId: projectId,
131 |           datasetId: datasetId,
132 |           tableId: tableId
133 |         },
134 |         skipLeadingRows: 1
135 |       }
136 |     }
137 |   };
138 |   try {
139 |     const jobResult = BigQuery.Jobs.insert(job, projectId, data);
140 |     console.log(`Load job started. Status: ${jobResult.status.state}`);
141 |   } catch (err) {
142 |     console.log('unable to insert job');
143 |   }
144 | }
145 | // [END apps_script_bigquery_load_csv]
146 | 


--------------------------------------------------------------------------------
/advanced/calendar.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | // [START calendar_list_calendars]
 17 | /**
 18 |  * Lists the calendars shown in the user's calendar list.
 19 |  * @see https://developers.google.com/calendar/api/v3/reference/calendarList/list
 20 |  */
 21 | function listCalendars() {
 22 |   let calendars;
 23 |   let pageToken;
 24 |   do {
 25 |     calendars = Calendar.CalendarList.list({
 26 |       maxResults: 100,
 27 |       pageToken: pageToken
 28 | 
 29 |     });
 30 |     if (!calendars.items || calendars.items.length === 0) {
 31 |       console.log('No calendars found.');
 32 |       return;
 33 |     }
 34 |     // Print the calendar id and calendar summary
 35 |     for (const calendar of calendars.items) {
 36 |       console.log('%s (ID: %s)', calendar.summary, calendar.id);
 37 |     }
 38 |     pageToken = calendars.nextPageToken;
 39 |   } while (pageToken);
 40 | }
 41 | // [END calendar_list_calendars]
 42 | 
 43 | // [START calendar_create_event]
 44 | /**
 45 |  * Creates an event in the user's default calendar.
 46 |  * @see https://developers.google.com/calendar/api/v3/reference/events/insert
 47 |  */
 48 | function createEvent() {
 49 |   const calendarId = 'primary';
 50 |   const start = getRelativeDate(1, 12);
 51 |   const end = getRelativeDate(1, 13);
 52 |   // event details for creating event.
 53 |   let event = {
 54 |     summary: 'Lunch Meeting',
 55 |     location: 'The Deli',
 56 |     description: 'To discuss our plans for the presentation next week.',
 57 |     start: {
 58 |       dateTime: start.toISOString()
 59 |     },
 60 |     end: {
 61 |       dateTime: end.toISOString()
 62 |     },
 63 |     attendees: [
 64 |       {email: 'gduser1@workspacesample.dev'},
 65 |       {email: 'gduser2@workspacesample.dev'}
 66 |     ],
 67 |     // Red background. Use Calendar.Colors.get() for the full list.
 68 |     colorId: 11
 69 |   };
 70 |   try {
 71 |     // call method to insert/create new event in provided calandar
 72 |     event = Calendar.Events.insert(event, calendarId);
 73 |     console.log('Event ID: ' + event.id);
 74 |   } catch (err) {
 75 |     console.log('Failed with error %s', err.message);
 76 |   }
 77 | }
 78 | 
 79 | /**
 80 |  * Helper function to get a new Date object relative to the current date.
 81 |  * @param {number} daysOffset The number of days in the future for the new date.
 82 |  * @param {number} hour The hour of the day for the new date, in the time zone
 83 |  *     of the script.
 84 |  * @return {Date} The new date.
 85 |  */
 86 | function getRelativeDate(daysOffset, hour) {
 87 |   const date = new Date();
 88 |   date.setDate(date.getDate() + daysOffset);
 89 |   date.setHours(hour);
 90 |   date.setMinutes(0);
 91 |   date.setSeconds(0);
 92 |   date.setMilliseconds(0);
 93 |   return date;
 94 | }
 95 | // [END calendar_create_event]
 96 | 
 97 | // [START calendar_list_events]
 98 | /**
 99 |  * Lists the next 10 upcoming events in the user's default calendar.
100 |  * @see https://developers.google.com/calendar/api/v3/reference/events/list
101 |  */
102 | function listNext10Events() {
103 |   const calendarId = 'primary';
104 |   const now = new Date();
105 |   const events = Calendar.Events.list(calendarId, {
106 |     timeMin: now.toISOString(),
107 |     singleEvents: true,
108 |     orderBy: 'startTime',
109 |     maxResults: 10
110 |   });
111 |   if (!events.items || events.items.length === 0) {
112 |     console.log('No events found.');
113 |     return;
114 |   }
115 |   for (const event of events.items) {
116 |     if (event.start.date) {
117 |       // All-day event.
118 |       const start = new Date(event.start.date);
119 |       console.log('%s (%s)', event.summary, start.toLocaleDateString());
120 |       continue;
121 |     }
122 |     const start = new Date(event.start.dateTime);
123 |     console.log('%s (%s)', event.summary, start.toLocaleString());
124 |   }
125 | }
126 | // [END calendar_list_events]
127 | 
128 | // [START calendar_log_synced_events]
129 | /**
130 |  * Retrieve and log events from the given calendar that have been modified
131 |  * since the last sync. If the sync token is missing or invalid, log all
132 |  * events from up to a month ago (a full sync).
133 |  *
134 |  * @param {string} calendarId The ID of the calender to retrieve events from.
135 |  * @param {boolean} fullSync If true, throw out any existing sync token and
136 |  *        perform a full sync; if false, use the existing sync token if possible.
137 |  */
138 | function logSyncedEvents(calendarId, fullSync) {
139 |   const properties = PropertiesService.getUserProperties();
140 |   const options = {
141 |     maxResults: 100
142 |   };
143 |   const syncToken = properties.getProperty('syncToken');
144 |   if (syncToken && !fullSync) {
145 |     options.syncToken = syncToken;
146 |   } else {
147 |     // Sync events up to thirty days in the past.
148 |     options.timeMin = getRelativeDate(-30, 0).toISOString();
149 |   }
150 |   // Retrieve events one page at a time.
151 |   let events;
152 |   let pageToken;
153 |   do {
154 |     try {
155 |       options.pageToken = pageToken;
156 |       events = Calendar.Events.list(calendarId, options);
157 |     } catch (e) {
158 |       // Check to see if the sync token was invalidated by the server;
159 |       // if so, perform a full sync instead.
160 |       if (e.message === 'Sync token is no longer valid, a full sync is required.') {
161 |         properties.deleteProperty('syncToken');
162 |         logSyncedEvents(calendarId, true);
163 |         return;
164 |       }
165 |       throw new Error(e.message);
166 |     }
167 |     if (events.items && events.items.length === 0) {
168 |       console.log('No events found.');
169 |       return;
170 |     }
171 |     for (const event of events.items) {
172 |       if (event.status === 'cancelled') {
173 |         console.log('Event id %s was cancelled.', event.id);
174 |         return;
175 |       }
176 |       if (event.start.date) {
177 |         const start = new Date(event.start.date);
178 |         console.log('%s (%s)', event.summary, start.toLocaleDateString());
179 |         return;
180 |       }
181 |       // Events that don't last all day; they have defined start times.
182 |       const start = new Date(event.start.dateTime);
183 |       console.log('%s (%s)', event.summary, start.toLocaleString());
184 |     }
185 |     pageToken = events.nextPageToken;
186 |   } while (pageToken);
187 |   properties.setProperty('syncToken', events.nextSyncToken);
188 | }
189 | // [END calendar_log_synced_events]
190 | 
191 | // [START calendar_conditional_update]
192 | /**
193 |  * Creates an event in the user's default calendar, waits 30 seconds, then
194 |  * attempts to update the event's location, on the condition that the event
195 |  * has not been changed since it was created.  If the event is changed during
196 |  * the 30-second wait, then the subsequent update will throw a 'Precondition
197 |  * Failed' error.
198 |  *
199 |  * The conditional update is accomplished by setting the 'If-Match' header
200 |  * to the etag of the new event when it was created.
201 |  */
202 | function conditionalUpdate() {
203 |   const calendarId = 'primary';
204 |   const start = getRelativeDate(1, 12);
205 |   const end = getRelativeDate(1, 13);
206 |   let event = {
207 |     summary: 'Lunch Meeting',
208 |     location: 'The Deli',
209 |     description: 'To discuss our plans for the presentation next week.',
210 |     start: {
211 |       dateTime: start.toISOString()
212 |     },
213 |     end: {
214 |       dateTime: end.toISOString()
215 |     },
216 |     attendees: [
217 |       {email: 'gduser1@workspacesample.dev'},
218 |       {email: 'gduser2@workspacesample.dev'}
219 |     ],
220 |     // Red background. Use Calendar.Colors.get() for the full list.
221 |     colorId: 11
222 |   };
223 |   event = Calendar.Events.insert(event, calendarId);
224 |   console.log('Event ID: ' + event.getId());
225 |   // Wait 30 seconds to see if the event has been updated outside this script.
226 |   Utilities.sleep(30 * 1000);
227 |   // Try to update the event, on the condition that the event state has not
228 |   // changed since the event was created.
229 |   event.location = 'The Coffee Shop';
230 |   try {
231 |     event = Calendar.Events.update(
232 |         event,
233 |         calendarId,
234 |         event.id,
235 |         {},
236 |         {'If-Match': event.etag}
237 |     );
238 |     console.log('Successfully updated event: ' + event.id);
239 |   } catch (e) {
240 |     console.log('Fetch threw an exception: ' + e);
241 |   }
242 | }
243 | // [END calendar_conditional_update]
244 | 
245 | // [START calendar_conditional_fetch]
246 | /**
247 |  * Creates an event in the user's default calendar, then re-fetches the event
248 |  * every second, on the condition that the event has changed since the last
249 |  * fetch.
250 |  *
251 |  * The conditional fetch is accomplished by setting the 'If-None-Match' header
252 |  * to the etag of the last known state of the event.
253 |  */
254 | function conditionalFetch() {
255 |   const calendarId = 'primary';
256 |   const start = getRelativeDate(1, 12);
257 |   const end = getRelativeDate(1, 13);
258 |   let event = {
259 |     summary: 'Lunch Meeting',
260 |     location: 'The Deli',
261 |     description: 'To discuss our plans for the presentation next week.',
262 |     start: {
263 |       dateTime: start.toISOString()
264 |     },
265 |     end: {
266 |       dateTime: end.toISOString()
267 |     },
268 |     attendees: [
269 |       {email: 'gduser1@workspacesample.dev'},
270 |       {email: 'gduser2@workspacesample.dev'}
271 |     ],
272 |     // Red background. Use Calendar.Colors.get() for the full list.
273 |     colorId: 11
274 |   };
275 |   try {
276 |     // insert event
277 |     event = Calendar.Events.insert(event, calendarId);
278 |     console.log('Event ID: ' + event.getId());
279 |     // Re-fetch the event each second, but only get a result if it has changed.
280 |     for (let i = 0; i < 30; i++) {
281 |       Utilities.sleep(1000);
282 |       event = Calendar.Events.get(calendarId, event.id, {}, {'If-None-Match': event.etag});
283 |       console.log('New event description: ' + event.start.dateTime);
284 |     }
285 |   } catch (e) {
286 |     console.log('Fetch threw an exception: ' + e);
287 |   }
288 | }
289 | // [END calendar_conditional_fetch]
290 | 


--------------------------------------------------------------------------------
/advanced/chat.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | 
 17 | // [START chat_post_message_with_user_credentials]
 18 | /**
 19 |  * Posts a new message to the specified space on behalf of the user.
 20 |  * @param {string} spaceName The resource name of the space.
 21 |  */
 22 | function postMessageWithUserCredentials(spaceName) {
 23 |   try {
 24 |     const message = {'text': 'Hello world!'};
 25 |     Chat.Spaces.Messages.create(message, spaceName);
 26 |   } catch (err) {
 27 |     // TODO (developer) - Handle exception
 28 |     console.log('Failed to create message with error %s', err.message);
 29 |   }
 30 | }
 31 | // [END chat_post_message_with_user_credentials]
 32 | 
 33 | // [START chat_post_message_with_app_credentials]
 34 | /**
 35 |  * Posts a new message to the specified space on behalf of the app.
 36 |  * @param {string} spaceName The resource name of the space.
 37 |  */
 38 | function postMessageWithAppCredentials(spaceName) {
 39 |   try {
 40 |     // See https://developers.google.com/chat/api/guides/auth/service-accounts
 41 |     // for details on how to obtain a service account OAuth token.
 42 |     const appToken = getToken_();
 43 |     const message = {'text': 'Hello world!'};
 44 |     Chat.Spaces.Messages.create(
 45 |         message,
 46 |         spaceName,
 47 |         {},
 48 |         // Authenticate with the service account token.
 49 |         {'Authorization': 'Bearer ' + appToken});
 50 |   } catch (err) {
 51 |     // TODO (developer) - Handle exception
 52 |     console.log('Failed to create message with error %s', err.message);
 53 |   }
 54 | }
 55 | // [END chat_post_message_with_app_credentials]
 56 | 
 57 | // [START chat_get_space]
 58 | /**
 59 |  * Gets information about a Chat space.
 60 |  * @param {string} spaceName The resource name of the space.
 61 |  */
 62 | function getSpace(spaceName) {
 63 |   try {
 64 |     const space = Chat.Spaces.get(spaceName);
 65 |     console.log('Space display name: %s', space.displayName);
 66 |     console.log('Space type: %s', space.spaceType);
 67 |   } catch (err) {
 68 |     // TODO (developer) - Handle exception
 69 |     console.log('Failed to get space with error %s', err.message);
 70 |   }
 71 | }
 72 | // [END chat_get_space]
 73 | 
 74 | // [START chat_create_space]
 75 | /**
 76 |  * Creates a new Chat space.
 77 |  */
 78 | function createSpace() {
 79 |   try {
 80 |     const space = {'displayName': 'New Space', 'spaceType': 'SPACE'};
 81 |     Chat.Spaces.create(space);
 82 |   } catch (err) {
 83 |     // TODO (developer) - Handle exception
 84 |     console.log('Failed to create space with error %s', err.message);
 85 |   }
 86 | }
 87 | // [END chat_create_space]
 88 | 
 89 | // [START chat_list_memberships]
 90 | /**
 91 |  * Lists all the members of a Chat space.
 92 |  * @param {string} spaceName The resource name of the space.
 93 |  */
 94 | function listMemberships(spaceName) {
 95 |   let response;
 96 |   let pageToken = null;
 97 |   try {
 98 |     do {
 99 |       response = Chat.Spaces.Members.list(spaceName, {
100 |         pageSize: 10,
101 |         pageToken: pageToken
102 |       });
103 |       if (!response.memberships || response.memberships.length === 0) {
104 |         pageToken = response.nextPageToken;
105 |         continue;
106 |       }
107 |       response.memberships.forEach((membership) => console.log(
108 |           'Member resource name: %s (type: %s)',
109 |           membership.name,
110 |           membership.member.type));
111 |       pageToken = response.nextPageToken;
112 |     } while (pageToken);
113 |   } catch (err) {
114 |     // TODO (developer) - Handle exception
115 |     console.log('Failed with error %s', err.message);
116 |   }
117 | }
118 | // [END chat_list_memberships]
119 | 


--------------------------------------------------------------------------------
/advanced/classroom.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | // [START apps_script_classroom_list_courses]
17 | /**
18 |  * Lists 10 course names and IDs.
19 |  */
20 | function listCourses() {
21 |   /**
22 |    * @see https://developers.google.com/classroom/reference/rest/v1/courses/list
23 |    */
24 |   const optionalArgs = {
25 |     pageSize: 10
26 |     // Use other query parameters here if needed.
27 |   };
28 |   try {
29 |     const response = Classroom.Courses.list(optionalArgs);
30 |     const courses = response.courses;
31 |     if (!courses || courses.length === 0) {
32 |       console.log('No courses found.');
33 |       return;
34 |     }
35 |     // Print the course names and IDs of the available courses.
36 |     for (const course in courses) {
37 |       console.log('%s (%s)', courses[course].name, courses[course].id);
38 |     }
39 |   } catch (err) {
40 |     // TODO (developer)- Handle Courses.list() exception from Classroom API
41 |     console.log('Failed with error %s', err.message);
42 |   }
43 | }
44 | // [END apps_script_classroom_list_courses]
45 | 


--------------------------------------------------------------------------------
/advanced/docs.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | 
 17 | // [START docs_create_document]
 18 | /**
 19 |  * Create a new document.
 20 |  * @see https://developers.google.com/docs/api/reference/rest/v1/documents/create
 21 |  * @return {string} documentId
 22 |  */
 23 | function createDocument() {
 24 |   try {
 25 |     // Create document with title
 26 |     const document = Docs.Documents.create({'title': 'My New Document'});
 27 |     console.log('Created document with ID: ' + document.documentId);
 28 |     return document.documentId;
 29 |   } catch (e) {
 30 |     // TODO (developer) - Handle exception
 31 |     console.log('Failed with error %s', e.message);
 32 |   }
 33 | }
 34 | // [END docs_create_document]
 35 | 
 36 | // [START docs_find_and_replace_text]
 37 | /**
 38 |  * Performs "replace all".
 39 |  * @param {string} documentId The document to perform the replace text operations on.
 40 |  * @param {Object} findTextToReplacementMap A map from the "find text" to the "replace text".
 41 |  * @return {Object} replies
 42 |  * @see https://developers.google.com/docs/api/reference/rest/v1/documents/batchUpdate
 43 |  */
 44 | function findAndReplace(documentId, findTextToReplacementMap) {
 45 |   const requests = [];
 46 |   for (const findText in findTextToReplacementMap) {
 47 |     const replaceText = findTextToReplacementMap[findText];
 48 |     // One option for replacing all text is to specify all tab IDs.
 49 |     const request = {
 50 |       replaceAllText: {
 51 |         containsText: {
 52 |           text: findText,
 53 |           matchCase: true
 54 |         },
 55 |         replaceText: replaceText,
 56 |         tabsCriteria: {
 57 |           tabIds: [TAB_ID_1, TAB_ID_2, TAB_ID_3],
 58 |         }
 59 |       }
 60 |     };
 61 |     // Another option is to omit TabsCriteria if you are replacing across all tabs.
 62 |     const request = {
 63 |       replaceAllText: {
 64 |         containsText: {
 65 |           text: findText,
 66 |           matchCase: true
 67 |         },
 68 |         replaceText: replaceText
 69 |       }
 70 |     };
 71 |     requests.push(request);
 72 |   }
 73 |   try {
 74 |     const response = Docs.Documents.batchUpdate({'requests': requests}, documentId);
 75 |     const replies = response.replies;
 76 |     for (const [index] of replies.entries()) {
 77 |       const numReplacements = replies[index].replaceAllText.occurrencesChanged || 0;
 78 |       console.log('Request %s performed %s replacements.', index, numReplacements);
 79 |     }
 80 |     return replies;
 81 |   } catch (e) {
 82 |     // TODO (developer) - Handle exception
 83 |     console.log('Failed with error : %s', e.message);
 84 |   }
 85 | }
 86 | // [END docs_find_and_replace_text]
 87 | 
 88 | // [START docs_insert_and_style_text]
 89 | /**
 90 |  * Insert text at the beginning of the first tab in the document and then style
 91 |  * the inserted text.
 92 |  * @param {string} documentId The document the text is inserted into.
 93 |  * @param {string} text The text to insert into the document.
 94 |  * @return {Object} replies
 95 |  * @see https://developers.google.com/docs/api/reference/rest/v1/documents/batchUpdate
 96 |  */
 97 | function insertAndStyleText(documentId, text) {
 98 |   const requests = [{
 99 |     insertText: {
100 |       location: {
101 |         index: 1,
102 |         // A tab can be specified using its ID. When omitted, the request is
103 |         // applied to the first tab.
104 |         // tabId: TAB_ID
105 |       },
106 |       text: text
107 |     }
108 |   },
109 |   {
110 |     updateTextStyle: {
111 |       range: {
112 |         startIndex: 1,
113 |         endIndex: text.length + 1
114 |       },
115 |       textStyle: {
116 |         fontSize: {
117 |           magnitude: 12,
118 |           unit: 'PT'
119 |         },
120 |         weightedFontFamily: {
121 |           fontFamily: 'Calibri'
122 |         }
123 |       },
124 |       fields: 'weightedFontFamily, fontSize'
125 |     }
126 |   }];
127 |   try {
128 |     const response =Docs.Documents.batchUpdate({'requests': requests}, documentId);
129 |     return response.replies;
130 |   } catch (e) {
131 |     // TODO (developer) - Handle exception
132 |     console.log('Failed with an error %s', e.message);
133 |   }
134 | }
135 | // [END docs_insert_and_style_text]
136 | 
137 | // [START docs_read_first_paragraph]
138 | /**
139 |  * Read the first paragraph of the first tab in a document.
140 |  * @param {string} documentId The ID of the document to read.
141 |  * @return {Object} paragraphText
142 |  * @see https://developers.google.com/docs/api/reference/rest/v1/documents/get
143 |  */
144 | function readFirstParagraph(documentId) {
145 |   try {
146 |     // Get the document using document ID
147 |     const document = Docs.Documents.get(documentId, {'includeTabsContent': true});
148 |     const firstTab = document.tabs[0];
149 |     const bodyElements = firstTab.documentTab.body.content;
150 |     for (let i = 0; i < bodyElements.length; i++) {
151 |       const structuralElement = bodyElements[i];
152 |       // Print the first paragraph text present in document
153 |       if (structuralElement.paragraph) {
154 |         const paragraphElements = structuralElement.paragraph.elements;
155 |         let paragraphText = '';
156 | 
157 |         for (let j = 0; j < paragraphElements.length; j++) {
158 |           const paragraphElement = paragraphElements[j];
159 |           if (paragraphElement.textRun !== null) {
160 |             paragraphText += paragraphElement.textRun.content;
161 |           }
162 |         }
163 |         console.log(paragraphText);
164 |         return paragraphText;
165 |       }
166 |     }
167 |   } catch (e) {
168 |     // TODO (developer) - Handle exception
169 |     console.log('Failed with error %s', e.message);
170 |   }
171 | }
172 | // [END docs_read_first_paragraph]
173 | 


--------------------------------------------------------------------------------
/advanced/doubleclick.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | // [START apps_script_doubleclick_list_user_profiles]
 17 | /**
 18 |  * Logs all of the user profiles available in the account.
 19 |  */
 20 | function listUserProfiles() {
 21 |   // Retrieve the list of available user profiles
 22 |   try {
 23 |     const profiles = DoubleClickCampaigns.UserProfiles.list();
 24 | 
 25 |     if (profiles.items) {
 26 |       // Print out the user ID and name of each
 27 |       for (let i = 0; i < profiles.items.length; i++) {
 28 |         const profile = profiles.items[i];
 29 |         console.log('Found profile with ID %s and name "%s".',
 30 |             profile.profileId, profile.userName);
 31 |       }
 32 |     }
 33 |   } catch (e) {
 34 |     // TODO (Developer) - Handle exception
 35 |     console.log('Failed with error: %s', e.error);
 36 |   }
 37 | }
 38 | // [END apps_script_doubleclick_list_user_profiles]
 39 | 
 40 | // [START apps_script_doubleclick_list_active_campaigns]
 41 | /**
 42 |  * Logs names and ID's of all active campaigns.
 43 |  * Note the use of paging tokens to retrieve the whole list.
 44 |  */
 45 | function listActiveCampaigns() {
 46 |   const profileId = '1234567'; // Replace with your profile ID.
 47 |   const fields = 'nextPageToken,campaigns(id,name)';
 48 |   let result;
 49 |   let pageToken;
 50 |   try {
 51 |     do {
 52 |       result = DoubleClickCampaigns.Campaigns.list(profileId, {
 53 |         'archived': false,
 54 |         'fields': fields,
 55 |         'pageToken': pageToken
 56 |       });
 57 |       if (result.campaigns) {
 58 |         for (let i = 0; i < result.campaigns.length; i++) {
 59 |           const campaign = result.campaigns[i];
 60 |           console.log('Found campaign with ID %s and name "%s".',
 61 |               campaign.id, campaign.name);
 62 |         }
 63 |       }
 64 |       pageToken = result.nextPageToken;
 65 |     } while (pageToken);
 66 |   } catch (e) {
 67 |     // TODO (Developer) - Handle exception
 68 |     console.log('Failed with error: %s', e.error);
 69 |   }
 70 | }
 71 | // [END apps_script_doubleclick_list_active_campaigns]
 72 | 
 73 | // [START apps_script_doubleclick_create_advertiser_and_campaign]
 74 | /**
 75 |  * Creates a new advertiser, and creates a new campaign with that advertiser.
 76 |  * The campaign is set to last for one month.
 77 |  */
 78 | function createAdvertiserAndCampaign() {
 79 |   const profileId = '1234567'; // Replace with your profile ID.
 80 | 
 81 |   const advertiser = {
 82 |     name: 'Example Advertiser',
 83 |     status: 'APPROVED'
 84 |   };
 85 | 
 86 |   try {
 87 |     const advertiserId = DoubleClickCampaigns.Advertisers
 88 |         .insert(advertiser, profileId).id;
 89 | 
 90 |     const landingPage = {
 91 |       advertiserId: advertiserId,
 92 |       archived: false,
 93 |       name: 'Example landing page',
 94 |       url: 'https://www.google.com'
 95 |     };
 96 |     const landingPageId = DoubleClickCampaigns.AdvertiserLandingPages
 97 |         .insert(landingPage, profileId).id;
 98 | 
 99 |     const campaignStart = new Date();
100 |     // End campaign after 1 month.
101 |     const campaignEnd = new Date();
102 |     campaignEnd.setMonth(campaignEnd.getMonth() + 1);
103 | 
104 |     const campaign = {
105 |       advertiserId: advertiserId,
106 |       defaultLandingPageId: landingPageId,
107 |       name: 'Example campaign',
108 |       startDate: Utilities.formatDate(campaignStart, 'GMT', 'yyyy-MM-dd'),
109 |       endDate: Utilities.formatDate(campaignEnd, 'GMT', 'yyyy-MM-dd')
110 |     };
111 |     DoubleClickCampaigns.Campaigns.insert(campaign, profileId);
112 |   } catch (e) {
113 |     // TODO (Developer) - Handle exception
114 |     console.log('Failed with error: %s', e.error);
115 |   }
116 | }
117 | // [END apps_script_doubleclick_create_advertiser_and_campaign]
118 | 


--------------------------------------------------------------------------------
/advanced/drive.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | 
 17 | // [START drive_upload_file]
 18 | /**
 19 |  * Uploads a new file to the user's Drive.
 20 |  */
 21 | function uploadFile() {
 22 |   try {
 23 |     // Makes a request to fetch a URL.
 24 |     const image = UrlFetchApp.fetch('http://goo.gl/nd7zjB').getBlob();
 25 |     let file = {
 26 |       name: 'google_logo.png',
 27 |       mimeType: 'image/png'
 28 |     };
 29 |     // Create a file in the user's Drive.
 30 |     file = Drive.Files.create(file, image, {'fields': 'id,size'});
 31 |     console.log('ID: %s, File size (bytes): %s', file.id, file.size);
 32 |   } catch (err) {
 33 |     // TODO (developer) - Handle exception
 34 |     console.log('Failed to upload file with error %s', err.message);
 35 |   }
 36 | }
 37 | // [END drive_upload_file]
 38 | 
 39 | // [START drive_list_root_folders]
 40 | /**
 41 |  * Lists the top-level folders in the user's Drive.
 42 |  */
 43 | function listRootFolders() {
 44 |   const query = '"root" in parents and trashed = false and ' +
 45 |     'mimeType = "application/vnd.google-apps.folder"';
 46 |   let folders;
 47 |   let pageToken = null;
 48 |   do {
 49 |     try {
 50 |       folders = Drive.Files.list({
 51 |         q: query,
 52 |         pageSize: 100,
 53 |         pageToken: pageToken
 54 |       });
 55 |       if (!folders.files || folders.files.length === 0) {
 56 |         console.log('All folders found.');
 57 |         return;
 58 |       }
 59 |       for (let i = 0; i < folders.files.length; i++) {
 60 |         const folder = folders.files[i];
 61 |         console.log('%s (ID: %s)', folder.name, folder.id);
 62 |       }
 63 |       pageToken = folders.nextPageToken;
 64 |     } catch (err) {
 65 |       // TODO (developer) - Handle exception
 66 |       console.log('Failed with error %s', err.message);
 67 |     }
 68 |   } while (pageToken);
 69 | }
 70 | // [END drive_list_root_folders]
 71 | 
 72 | // [START drive_add_custom_property]
 73 | /**
 74 |  * Adds a custom app property to a file. Unlike Apps Script's DocumentProperties,
 75 |  * Drive's custom file properties can be accessed outside of Apps Script and
 76 |  * by other applications; however, appProperties are only visible to the script.
 77 |  * @param {string} fileId The ID of the file to add the app property to.
 78 |  */
 79 | function addAppProperty(fileId) {
 80 |   try {
 81 |     let file = {
 82 |       'appProperties': {
 83 |         'department': 'Sales'
 84 |       }
 85 |     };
 86 |     // Updates a file to add an app property.
 87 |     file = Drive.Files.update(file, fileId, null, {'fields': 'id,appProperties'});
 88 |     console.log(
 89 |         'ID: %s, appProperties: %s',
 90 |         file.id,
 91 |         JSON.stringify(file.appProperties, null, 2));
 92 |   } catch (err) {
 93 |     // TODO (developer) - Handle exception
 94 |     console.log('Failed with error %s', err.message);
 95 |   }
 96 | }
 97 | // [END drive_add_custom_property]
 98 | 
 99 | // [START drive_list_revisions]
100 | /**
101 |  * Lists the revisions of a given file.
102 |  * @param {string} fileId The ID of the file to list revisions for.
103 |  */
104 | function listRevisions(fileId) {
105 |   let revisions;
106 |   const pageToken = null;
107 |   do {
108 |     try {
109 |       revisions = Drive.Revisions.list(
110 |           fileId,
111 |           {'fields': 'revisions(modifiedTime,size),nextPageToken'});
112 |       if (!revisions.revisions || revisions.revisions.length === 0) {
113 |         console.log('All revisions found.');
114 |         return;
115 |       }
116 |       for (let i = 0; i < revisions.revisions.length; i++) {
117 |         const revision = revisions.revisions[i];
118 |         const date = new Date(revision.modifiedTime);
119 |         console.log('Date: %s, File size (bytes): %s', date.toLocaleString(),
120 |             revision.size);
121 |       }
122 |       pageToken = revisions.nextPageToken;
123 |     } catch (err) {
124 |       // TODO (developer) - Handle exception
125 |       console.log('Failed with error %s', err.message);
126 |     }
127 |   } while (pageToken);
128 | }
129 | 
130 | // [END drive_list_revisions]
131 | 


--------------------------------------------------------------------------------
/advanced/driveActivity.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | // [START apps_script_drive_activity_get_users_activity]
17 | /**
18 |  * Gets a file's activity and logs the list of
19 |  * unique users that performed the activity.
20 |  */
21 | function getUsersActivity() {
22 |   var fileId = 'YOUR_FILE_ID_HERE';
23 | 
24 |   var pageToken;
25 |   var users = {};
26 |   do {
27 |     var result = AppsActivity.Activities.list({
28 |       'drive.fileId': fileId,
29 |       'source': 'drive.google.com',
30 |       'pageToken': pageToken
31 |     });
32 |     var activities = result.activities;
33 |     for (var i = 0; i < activities.length; i++) {
34 |       var events = activities[i].singleEvents;
35 |       for (var j = 0; j < events.length; j++) {
36 |         var event = events[j];
37 |         users[event.user.name] = true;
38 |       }
39 |     }
40 |     pageToken = result.nextPageToken;
41 |   } while (pageToken);
42 |   console.log(Object.keys(users));
43 | }
44 | // [END apps_script_drive_activity_get_users_activity]
45 | 


--------------------------------------------------------------------------------
/advanced/driveLabels.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright 2022 Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | 
 17 | // [START apps_script_drive_labels_list_labels]
 18 | /**
 19 |  * List labels available to the user.
 20 |  */
 21 | function listLabels() {
 22 |   let pageToken = null;
 23 |   let labels = [];
 24 |   do {
 25 |     try {
 26 |       const response = DriveLabels.Labels.list({
 27 |         publishedOnly: true,
 28 |         pageToken: pageToken
 29 |       });
 30 |       pageToken = response.nextPageToken;
 31 |       labels = labels.concat(response.labels);
 32 |     } catch (err) {
 33 |       // TODO (developer) - Handle exception
 34 |       console.log('Failed to list labels with error %s', err.message);
 35 |     }
 36 |   } while (pageToken != null);
 37 | 
 38 |   console.log('Found %d labels', labels.length);
 39 | }
 40 | // [END apps_script_drive_labels_list_labels]
 41 | 
 42 | // [START apps_script_drive_labels_get_label]
 43 | /**
 44 |  * Get a label by name.
 45 |  * @param {string} labelName The label name.
 46 |  */
 47 | function getLabel(labelName) {
 48 |   try {
 49 |     const label = DriveLabels.Labels.get(labelName, {view: 'LABEL_VIEW_FULL'});
 50 |     const title = label.properties.title;
 51 |     const fieldsLength = label.fields.length;
 52 |     console.log(`Fetched label with title: '${title}' and ${fieldsLength} fields.`);
 53 |   } catch (err) {
 54 |     // TODO (developer) - Handle exception
 55 |     console.log('Failed to get label with error %s', err.message);
 56 |   }
 57 | }
 58 | // [END apps_script_drive_labels_get_label]
 59 | 
 60 | // [START apps_script_drive_labels_list_labels_on_drive_item]
 61 | /**
 62 |  * List Labels on a Drive Item
 63 |  * Fetches a Drive Item and prints all applied values along with their to their
 64 |  * human-readable names.
 65 |  *
 66 |  * @param {string} fileId The Drive File ID
 67 |  */
 68 | function listLabelsOnDriveItem(fileId) {
 69 |   try {
 70 |     const appliedLabels = Drive.Files.listLabels(fileId);
 71 | 
 72 |     console.log('%d label(s) are applied to this file', appliedLabels.labels.length);
 73 | 
 74 |     appliedLabels.labels.forEach((appliedLabel) => {
 75 |       // Resource name of the label at the applied revision.
 76 |       const labelName = 'labels/' + appliedLabel.id + '@' + appliedLabel.revisionId;
 77 | 
 78 |       console.log('Fetching Label: %s', labelName);
 79 |       const label = DriveLabels.Labels.get(labelName, {view: 'LABEL_VIEW_FULL'});
 80 | 
 81 |       console.log('Label Title: %s', label.properties.title);
 82 | 
 83 |       Object.keys(appliedLabel.fields).forEach((fieldId) => {
 84 |         const fieldValue = appliedLabel.fields[fieldId];
 85 |         const field = label.fields.find((f) => f.id == fieldId);
 86 | 
 87 |         console.log(`Field ID: ${field.id}, Display Name: ${field.properties.displayName}`);
 88 |         switch (fieldValue.valueType) {
 89 |           case 'text':
 90 |             console.log('Text: %s', fieldValue.text[0]);
 91 |             break;
 92 |           case 'integer':
 93 |             console.log('Integer: %d', fieldValue.integer[0]);
 94 |             break;
 95 |           case 'dateString':
 96 |             console.log('Date: %s', fieldValue.dateString[0]);
 97 |             break;
 98 |           case 'user':
 99 |             const user = fieldValue.user.map((user) => {
100 |               return `${user.emailAddress}: ${user.displayName}`;
101 |             }).join(', ');
102 |             console.log(`User: ${user}`);
103 |             break;
104 |           case 'selection':
105 |             const choices = fieldValue.selection.map((choiceId) => {
106 |               return field.selectionOptions.choices.find((choice) => choice.id === choiceId);
107 |             });
108 |             const selection = choices.map((choice) => {
109 |               return `${choice.id}: ${choice.properties.displayName}`;
110 |             }).join(', ');
111 |             console.log(`Selection: ${selection}`);
112 |             break;
113 |           default:
114 |             console.log('Unknown: %s', fieldValue.valueType);
115 |             console.log(fieldValue.value);
116 |         }
117 |       });
118 |     });
119 |   } catch (err) {
120 |     // TODO (developer) - Handle exception
121 |     console.log('Failed with error %s', err.message);
122 |   }
123 | }
124 | // [END apps_script_drive_labels_list_labels_on_drive_item]
125 | 


--------------------------------------------------------------------------------
/advanced/events.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | 
 17 | // [START events_create_subscription]
 18 | /**
 19 |  * Creates a subscription to receive events about a Google Workspace resource.
 20 |  * For a list of supported resources and event types, see the
 21 |  * [Google Workspace Events API Overview](https://developers.google.com/workspace/events#supported-events).
 22 |  * For additional information, see the
 23 |  * [subscriptions.create](https://developers.google.com/workspace/events/reference/rest/v1/subscriptions/create)
 24 |  * method reference.
 25 |  * @param {!string} targetResource The full resource name of the Google Workspace resource to subscribe to.
 26 |  * @param {!string|!Array<string>} eventTypes The types of events to receive about the resource.
 27 |  * @param {!string} pubsubTopic The resource name of the Pub/Sub topic that receives events from the subscription.
 28 |  */
 29 | function createSubscription(targetResource, eventTypes, pubsubTopic) {
 30 |   try {
 31 |     const operation = WorkspaceEvents.Subscriptions.create({
 32 |       targetResource: targetResource,
 33 |       eventTypes: eventTypes,
 34 |       notificationEndpoint: {
 35 |         pubsubTopic: pubsubTopic,
 36 |       },
 37 |     });
 38 |     console.log(operation);
 39 |   } catch (err) {
 40 |     // TODO (developer) - Handle exception
 41 |     console.log('Failed to create subscription with error %s', err.message);
 42 |   }
 43 | }
 44 | // [END events_create_subscription]
 45 | 
 46 | // [START events_list_subscriptions]
 47 | /**
 48 |  * Lists subscriptions created by the calling app filtered by one or more event types and optionally by a target resource.
 49 |  * For additional information, see the
 50 |  * [subscriptions.list](https://developers.google.com/workspace/events/reference/rest/v1/subscriptions/list)
 51 |  * method reference.
 52 |  * @param {!string} filter The query filter.
 53 |  */
 54 | function listSubscriptions(filter) {
 55 |   try {
 56 |     const response = WorkspaceEvents.Subscriptions.list({ filter });
 57 |     console.log(response);
 58 |   } catch (err) {
 59 |     // TODO (developer) - Handle exception
 60 |     console.log('Failed to list subscriptions with error %s', err.message);
 61 |   }
 62 | }
 63 | // [END events_list_subscriptions]
 64 | 
 65 | // [START events_get_subscription]
 66 | /**
 67 |  * Gets details about a subscription.
 68 |  * For additional information, see the
 69 |  * [subscriptions.get](https://developers.google.com/workspace/events/reference/rest/v1/subscriptions/get)
 70 |  * method reference.
 71 |  * @param {!string} name The resource name of the subscription.
 72 |  */
 73 | function getSubscription(name) {
 74 |   try {
 75 |     const subscription = WorkspaceEvents.Subscriptions.get(name);
 76 |     console.log(subscription);
 77 |   } catch (err) {
 78 |     // TODO (developer) - Handle exception
 79 |     console.log('Failed to get subscription with error %s', err.message);
 80 |   }
 81 | }
 82 | // [END events_get_subscription]
 83 | 
 84 | // [START events_patch_subscription]
 85 | /**
 86 |  * Updates an existing subscription.
 87 |  * This can be used to renew a subscription that is about to expire.
 88 |  * For additional information, see the
 89 |  * [subscriptions.patch](https://developers.google.com/workspace/events/reference/rest/v1/subscriptions/patch)
 90 |  * method reference.
 91 |  * @param {!string} name The resource name of the subscription.
 92 |  */
 93 | function patchSubscription(name) {
 94 |   try {
 95 |     const operation = WorkspaceEvents.Subscriptions.patch({
 96 |       // Setting the TTL to 0 seconds extends the subscription to its maximum expiration time.
 97 |       ttl: '0s',
 98 |     }, name);
 99 |     console.log(operation);
100 |   } catch (err) {
101 |     // TODO (developer) - Handle exception
102 |     console.log('Failed to update subscription with error %s', err.message);
103 |   }
104 | }
105 | // [END events_patch_subscription]
106 | 
107 | // [START events_reactivate_subscription]
108 | /**
109 |  * Reactivates a suspended subscription.
110 |  * Before reactivating, you must resolve any errors with the subscription.
111 |  * For additional information, see the
112 |  * [subscriptions.reactivate](https://developers.google.com/workspace/events/reference/rest/v1/subscriptions/reactivate)
113 |  * method reference.
114 |  * @param {!string} name The resource name of the subscription.
115 |  */
116 | function reactivateSubscription(name) {
117 |   try {
118 |     const operation = WorkspaceEvents.Subscriptions.reactivate({}, name);
119 |     console.log(operation);
120 |   } catch (err) {
121 |     // TODO (developer) - Handle exception
122 |     console.log('Failed to reactivate subscription with error %s', err.message);
123 |   }
124 | }
125 | // [END events_reactivate_subscription]
126 | 
127 | // [START events_delete_subscription]
128 | /**
129 |  * Deletes a subscription.
130 |  * For additional information, see the
131 |  * [subscriptions.delete](https://developers.google.com/workspace/events/reference/rest/v1/subscriptions/delete)
132 |  * method reference.
133 |  * @param {!string} name The resource name of the subscription.
134 |  */
135 | function deleteSubscription(name) {
136 |   try {
137 |     const operation = WorkspaceEvents.Subscriptions.remove(name);
138 |     console.log(operation);
139 |   } catch (err) {
140 |     // TODO (developer) - Handle exception
141 |     console.log('Failed to delete subscription with error %s', err.message);
142 |   }
143 | }
144 | // [END events_delete_subscription]
145 | 
146 | // [START events_get_operation]
147 | /**
148 |  * Gets details about an operation returned by one of the methods on the subscription
149 |  * resource of the Google Workspace Events API.
150 |  * For additional information, see the
151 |  * [operations.get](https://developers.google.com/workspace/events/reference/rest/v1/operations/get)
152 |  * method reference.
153 |  * @param {!string} name The resource name of the operation.
154 |  */
155 | function getOperation(name) {
156 |   try {
157 |     const operation = WorkspaceEvents.Operations.get(name);
158 |     console.log(operation);
159 |   } catch (err) {
160 |     // TODO (developer) - Handle exception
161 |     console.log('Failed to get operation with error %s', err.message);
162 |   }
163 | }
164 | // [END events_get_operation]
165 | 


--------------------------------------------------------------------------------
/advanced/gmail.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | // [START gmail_label]
 17 | /**
 18 |  * Lists the user's labels, including name, type,
 19 |  * ID and visibility information.
 20 |  */
 21 | function listLabelInfo() {
 22 |   try {
 23 |     const response =
 24 |       Gmail.Users.Labels.list('me');
 25 |     for (let i = 0; i < response.labels.length; i++) {
 26 |       const label = response.labels[i];
 27 |       console.log(JSON.stringify(label));
 28 |     }
 29 |   } catch (err) {
 30 |     console.log(err);
 31 |   }
 32 | }
 33 | // [END gmail_label]
 34 | 
 35 | // [START gmail_inbox_snippets]
 36 | /**
 37 |  * Lists, for each thread in the user's Inbox, a
 38 |  * snippet associated with that thread.
 39 |  */
 40 | function listInboxSnippets() {
 41 |   try {
 42 |     let pageToken;
 43 |     do {
 44 |       const threadList = Gmail.Users.Threads.list('me', {
 45 |         q: 'label:inbox',
 46 |         pageToken: pageToken
 47 |       });
 48 |       if (threadList.threads && threadList.threads.length > 0) {
 49 |         threadList.threads.forEach(function(thread) {
 50 |           console.log('Snippet: %s', thread.snippet);
 51 |         });
 52 |       }
 53 |       pageToken = threadList.nextPageToken;
 54 |     } while (pageToken);
 55 |   } catch (err) {
 56 |     console.log(err);
 57 |   }
 58 | }
 59 | // [END gmail_inbox_snippets]
 60 | 
 61 | 
 62 | // [START gmail_history]
 63 | /**
 64 |  * Gets a history record ID associated with the most
 65 |  * recently sent message, then logs all the message IDs
 66 |  * that have changed since that message was sent.
 67 |  */
 68 | function logRecentHistory() {
 69 |   try {
 70 |     // Get the history ID associated with the most recent
 71 |     // sent message.
 72 |     const sent = Gmail.Users.Threads.list('me', {
 73 |       q: 'label:sent',
 74 |       maxResults: 1
 75 |     });
 76 |     if (!sent.threads || !sent.threads[0]) {
 77 |       console.log('No sent threads found.');
 78 |       return;
 79 |     }
 80 |     const historyId = sent.threads[0].historyId;
 81 | 
 82 |     // Log the ID of each message changed since the most
 83 |     // recent message was sent.
 84 |     let pageToken;
 85 |     const changed = [];
 86 |     do {
 87 |       const recordList = Gmail.Users.History.list('me', {
 88 |         startHistoryId: historyId,
 89 |         pageToken: pageToken
 90 |       });
 91 |       const history = recordList.history;
 92 |       if (history && history.length > 0) {
 93 |         history.forEach(function(record) {
 94 |           record.messages.forEach(function(message) {
 95 |             if (changed.indexOf(message.id) === -1) {
 96 |               changed.push(message.id);
 97 |             }
 98 |           });
 99 |         });
100 |       }
101 |       pageToken = recordList.nextPageToken;
102 |     } while (pageToken);
103 | 
104 |     changed.forEach(function(id) {
105 |       console.log('Message Changed: %s', id);
106 |     });
107 |   } catch (err) {
108 |     console.log(err);
109 |   }
110 | }
111 | // [END gmail_history]
112 | 
113 | // [START gmail_raw]
114 | /**
115 |  * Logs the raw message content for the most recent message in gmail.
116 |  */
117 | function getRawMessage() {
118 |   try {
119 |     const messageId = Gmail.Users.Messages.list('me').messages[0].id;
120 |     console.log(messageId);
121 |     const message = Gmail.Users.Messages.get('me', messageId, {
122 |       'format': 'raw'
123 |     });
124 | 
125 |     // Get raw content as base64url encoded string.
126 |     const encodedMessage = Utilities.base64Encode(message.raw);
127 |     console.log(encodedMessage);
128 |   } catch (err) {
129 |     console.log(err);
130 |   }
131 | }
132 | // [END gmail_raw]
133 | 


--------------------------------------------------------------------------------
/advanced/iot.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright 2019 Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | // [START apps_script_iot_list_registries]
 17 | /**
 18 |  * Lists the registries for the configured project and region.
 19 |  */
 20 | function listRegistries() {
 21 |   console.log(response);
 22 |   var projectId = 'your-project-id';
 23 |   var cloudRegion = 'us-central1';
 24 |   var parent = 'projects/' + projectId + '/locations/' + cloudRegion;
 25 | 
 26 |   var response = CloudIoT.Projects.Locations.Registries.list(parent);
 27 |   if (response.deviceRegistries) {
 28 |     response.deviceRegistries.forEach(
 29 |         function(registry) {
 30 |           console.log(registry.id);
 31 |         });
 32 |   }
 33 | }
 34 | // [END apps_script_iot_list_registries]
 35 | 
 36 | // [START apps_script_iot_create_registry]
 37 | /**
 38 |  * Creates a registry.
 39 |  */
 40 | function createRegistry() {
 41 |   var cloudRegion = 'us-central1';
 42 |   var name = 'your-registry-name';
 43 |   var projectId = 'your-project-id';
 44 |   var topic = 'your-pubsub-topic';
 45 | 
 46 |   var pubsubTopic = 'projects/' + projectId + '/topics/' + topic;
 47 | 
 48 |   var registry = {
 49 |     'eventNotificationConfigs': [{
 50 |       // From - https://console.cloud.google.com/cloudpubsub
 51 |       pubsubTopicName: pubsubTopic
 52 |     }],
 53 |     'id': name
 54 |   };
 55 |   var parent = 'projects/' + projectId + '/locations/' + cloudRegion;
 56 | 
 57 |   var response = CloudIoT.Projects.Locations.Registries.create(registry, parent);
 58 |   console.log('Created registry: ' + response.id);
 59 | }
 60 | // [END apps_script_iot_create_registry]
 61 | 
 62 | // [START apps_script_iot_get_registry]
 63 | /**
 64 |  * Describes a registry.
 65 |  */
 66 | function getRegistry() {
 67 |   var cloudRegion = 'us-central1';
 68 |   var name = 'your-registry-name';
 69 |   var projectId = 'your-project-id';
 70 | 
 71 |   var parent = 'projects/' + projectId + '/locations/' + cloudRegion;
 72 |   var registryName = parent + '/registries/' + name;
 73 | 
 74 |   var response = CloudIoT.Projects.Locations.Registries.get(registryName);
 75 |   console.log('Retrieved registry: ' + response.id);
 76 | }
 77 | // [END apps_script_iot_get_registry]
 78 | 
 79 | // [START apps_script_iot_delete_registry]
 80 | /**
 81 |  * Deletes a registry.
 82 |  */
 83 | function deleteRegistry() {
 84 |   var cloudRegion = 'us-central1';
 85 |   var name = 'your-registry-name';
 86 |   var projectId = 'your-project-id';
 87 | 
 88 |   var parent = 'projects/' + projectId + '/locations/' + cloudRegion;
 89 |   var registryName = parent + '/registries/' + name;
 90 | 
 91 |   var response = CloudIoT.Projects.Locations.Registries.remove(registryName);
 92 |   // Successfully removed registry if exception was not thrown.
 93 |   console.log('Deleted registry: ' + name);
 94 | }
 95 | // [END apps_script_iot_delete_registry]
 96 | 
 97 | // [START apps_script_iot_list_devices]
 98 | /**
 99 |  * Lists the devices in the given registry.
100 |  */
101 | function listDevicesForRegistry() {
102 |   var cloudRegion = 'us-central1';
103 |   var name = 'your-registry-name';
104 |   var projectId = 'your-project-id';
105 | 
106 |   var parent = 'projects/' + projectId + '/locations/' + cloudRegion;
107 |   var registryName = parent + '/registries/' + name;
108 | 
109 |   var response = CloudIoT.Projects.Locations.Registries.Devices.list(registryName);
110 | 
111 |   console.log('Registry contains the following devices: ');
112 |   if (response.devices) {
113 |     response.devices.forEach(
114 |         function(device) {
115 |           console.log('\t' + device.id);
116 |         });
117 |   }
118 | }
119 | // [END apps_script_iot_list_devices]
120 | 
121 | // [START apps_script_iot_create_unauth_device]
122 | /**
123 |  * Creates a device without credentials.
124 |  */
125 | function createDevice() {
126 |   var cloudRegion = 'us-central1';
127 |   var name = 'your-device-name';
128 |   var projectId = 'your-project-id';
129 |   var registry = 'your-registry-name';
130 | 
131 |   console.log('Creating device: ' + name + ' in Registry: ' + registry);
132 |   var parent = 'projects/' + projectId + '/locations/' + cloudRegion + '/registries/' + registry;
133 | 
134 |   var device = {
135 |     id: name,
136 |     gatewayConfig: {
137 |       gatewayType: 'NON_GATEWAY',
138 |       gatewayAuthMethod: 'ASSOCIATION_ONLY'
139 |     }
140 |   };
141 | 
142 |   var response = CloudIoT.Projects.Locations.Registries.Devices.create(device, parent);
143 |   console.log('Created device:' + response.name);
144 | }
145 | // [END apps_script_iot_create_unauth_device]
146 | 
147 | // [START apps_script_iot_create_rsa_device]
148 | /**
149 |  * Creates a device with RSA credentials.
150 |  */
151 | function createRsaDevice() {
152 |   // Create the RSA public/private keypair with the following OpenSSL command:
153 |   //    openssl req -x509 -newkey rsa:2048 -days 3650 -keyout rsa_private.pem \
154 |   //      -nodes -out rsa_cert.pem -subj "/CN=unused"
155 |   //
156 |   // **NOTE** Be sure to insert the newline charaters in the string varant.
157 |   var cert =
158 |       '-----BEGIN CERTIFICATE-----\n' +
159 |       'your-PUBLIC-certificate-b64-bytes\n' +
160 |       '...\n' +
161 |       'more-PUBLIC-certificate-b64-bytes==\n' +
162 |       '-----END CERTIFICATE-----\n';
163 | 
164 |   var cloudRegion = 'us-central1';
165 |   var name = 'your-device-name';
166 |   var projectId = 'your-project-id';
167 |   var registry = 'your-registry-name';
168 | 
169 |   var parent = 'projects/' + projectId + '/locations/' + cloudRegion + '/registries/' + registry;
170 |   var device = {
171 |     id: name,
172 |     gatewayConfig: {
173 |       gatewayType: 'NON_GATEWAY',
174 |       gatewayAuthMethod: 'ASSOCIATION_ONLY'
175 |     },
176 |     credentials: [{
177 |       publicKey: {
178 |         format: 'RSA_X509_PEM',
179 |         key: cert
180 |       }
181 |     }]
182 |   };
183 | 
184 |   var response = CloudIoT.Projects.Locations.Registries.Devices.create(device, parent);
185 |   console.log('Created device:' + response.name);
186 | }
187 | // [END apps_script_iot_create_rsa_device]
188 | 
189 | // [START apps_script_iot_delete_device]
190 | /**
191 |  * Deletes a device from the given registry.
192 |  */
193 | function deleteDevice() {
194 |   var cloudRegion = 'us-central1';
195 |   var name = 'your-device-name';
196 |   var projectId = 'your-project-id';
197 |   var registry = 'your-registry-name';
198 | 
199 |   var parent = 'projects/' + projectId + '/locations/' + cloudRegion + '/registries/' + registry;
200 |   var deviceName = parent + '/devices/' + name;
201 | 
202 |   var response = CloudIoT.Projects.Locations.Registries.Devices.remove(deviceName);
203 |   // If no exception thrown, device was successfully removed
204 |   console.log('Successfully deleted device: ' + deviceName);
205 | }
206 | // [END apps_script_iot_delete_device]
207 | 
208 | 


--------------------------------------------------------------------------------
/advanced/people.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | // [START people_get_connections]
 17 | /**
 18 |  * Gets a list of people in the user's contacts.
 19 |  * @see https://developers.google.com/people/api/rest/v1/people.connections/list
 20 |  */
 21 | function getConnections() {
 22 |   try {
 23 |     // Get the list of connections/contacts of user's profile
 24 |     const people = People.People.Connections.list('people/me', {
 25 |       personFields: 'names,emailAddresses'
 26 |     });
 27 |     // Print the connections/contacts
 28 |     console.log('Connections: %s', JSON.stringify(people, null, 2));
 29 |   } catch (err) {
 30 |     // TODO (developers) - Handle exception here
 31 |     console.log('Failed to get the connection with an error %s', err.message);
 32 |   }
 33 | }
 34 | // [END people_get_connections]
 35 | 
 36 | // [START people_get_self_profile]
 37 | /**
 38 |  * Gets the own user's profile.
 39 |  * @see https://developers.google.com/people/api/rest/v1/people/getBatchGet
 40 |  */
 41 | function getSelf() {
 42 |   try {
 43 |     // Get own user's profile using People.getBatchGet() method
 44 |     const people = People.People.getBatchGet({
 45 |       resourceNames: ['people/me'],
 46 |       personFields: 'names,emailAddresses'
 47 |       // Use other query parameter here if needed
 48 |     });
 49 |     console.log('Myself: %s', JSON.stringify(people, null, 2));
 50 |   } catch (err) {
 51 |     // TODO (developer) -Handle exception
 52 |     console.log('Failed to get own profile with an error %s', err.message);
 53 |   }
 54 | }
 55 | // [END people_get_self_profile]
 56 | 
 57 | // [START people_get_account]
 58 | /**
 59 |  * Gets the person information for any Google Account.
 60 |  * @param {string} accountId The account ID.
 61 |  * @see https://developers.google.com/people/api/rest/v1/people/get
 62 |  */
 63 | function getAccount(accountId) {
 64 |   try {
 65 |     // Get the Account details using account ID.
 66 |     const people = People.People.get('people/' + accountId, {
 67 |       personFields: 'names,emailAddresses'
 68 |     });
 69 |     // Print the profile details of Account.
 70 |     console.log('Public Profile: %s', JSON.stringify(people, null, 2));
 71 |   } catch (err) {
 72 |     // TODO (developer) - Handle exception
 73 |     console.log('Failed to get account with an error %s', err.message);
 74 |   }
 75 | }
 76 | // [END people_get_account]
 77 | 
 78 | // [START people_get_group]
 79 | 
 80 | /**
 81 |  * Gets a contact group with the given name
 82 |  * @param {string} name The group name.
 83 |  * @see https://developers.google.com/people/api/rest/v1/contactGroups/list
 84 |  */
 85 | function getContactGroup(name) {
 86 |   try {
 87 |     const people = People.ContactGroups.list();
 88 |     // Finds the contact group for the person where the name matches.
 89 |     const group = people['contactGroups'].find((group) => group['name'] === name);
 90 |     // Prints the contact group
 91 |     console.log('Group: %s', JSON.stringify(group, null, 2));
 92 |   } catch (err) {
 93 |     // TODO (developers) - Handle exception
 94 |     console.log('Failed to get the contact group with an error %s', err.message);
 95 |   }
 96 | }
 97 | 
 98 | // [END people_get_group]
 99 | 
100 | // [START people_get_contact_by_email]
101 | 
102 | /**
103 |  * Gets a contact by the email address.
104 |  * @param {string} email The email address.
105 |  * @see https://developers.google.com/people/api/rest/v1/people.connections/list
106 |  */
107 | function getContactByEmail(email) {
108 |   try {
109 |     // Gets the person with that email address by iterating over all contacts.
110 |     const people = People.People.Connections.list('people/me', {
111 |       personFields: 'names,emailAddresses'
112 |     });
113 |     const contact = people['connections'].find((connection) => {
114 |       return connection['emailAddresses'].some((emailAddress) => emailAddress['value'] === email);
115 |     });
116 |     // Prints the contact.
117 |     console.log('Contact: %s', JSON.stringify(contact, null, 2));
118 |   } catch (err) {
119 |     // TODO (developers) - Handle exception
120 |     console.log('Failed to get the connection with an error %s', err.message);
121 |   }
122 | }
123 | 
124 | // [END people_get_contact_by_email]
125 | 
126 | // [START people_get_full_name]
127 | /**
128 |  * Gets the full name (given name and last name) of the contact as a string.
129 |  * @see https://developers.google.com/people/api/rest/v1/people/get
130 |  */
131 | function getFullName() {
132 |   try {
133 |     // Gets the person by specifying resource name/account ID
134 |     // in the first parameter of People.People.get.
135 |     // This example gets the person for the user running the script.
136 |     const people = People.People.get('people/me', {personFields: 'names'});
137 |     // Prints the full name (given name + family name)
138 |     console.log(`${people['names'][0]['givenName']} ${people['names'][0]['familyName']}`);
139 |   } catch (err) {
140 |     // TODO (developers) - Handle exception
141 |     console.log('Failed to get the connection with an error %s', err.message);
142 |   }
143 | }
144 | 
145 | // [END people_get_full_name]
146 | 
147 | // [START people_get_phone_numbers]
148 | /**
149 |  * Gets all the phone numbers for this contact.
150 |  * @see https://developers.google.com/people/api/rest/v1/people/get
151 |  */
152 | function getPhoneNumbers() {
153 |   try {
154 |     // Gets the person by specifying resource name/account ID
155 |     // in the first parameter of People.People.get.
156 |     // This example gets the person for the user running the script.
157 |     const people = People.People.get('people/me', {personFields: 'phoneNumbers'});
158 |     // Prints the phone numbers.
159 |     console.log(people['phoneNumbers']);
160 |   } catch (err) {
161 |     // TODO (developers) - Handle exception
162 |     console.log('Failed to get the connection with an error %s', err.message);
163 |   }
164 | }
165 | 
166 | // [END people_get_phone_numbers]
167 | 
168 | // [START people_get_single_phone_number]
169 | /**
170 |  * Gets a phone number by type, such as work or home.
171 |  * @see https://developers.google.com/people/api/rest/v1/people/get
172 |  */
173 | function getPhone() {
174 |   try {
175 |     // Gets the person by specifying resource name/account ID
176 |     // in the first parameter of People.People.get.
177 |     // This example gets the person for the user running the script.
178 |     const people = People.People.get('people/me', {personFields: 'phoneNumbers'});
179 |     // Gets phone number by type, such as home or work.
180 |     const phoneNumber = people['phoneNumbers'].find((phone) => phone['type'] === 'home')['value'];
181 |     // Prints the phone numbers.
182 |     console.log(phoneNumber);
183 |   } catch (err) {
184 |     // TODO (developers) - Handle exception
185 |     console.log('Failed to get the connection with an error %s', err.message);
186 |   }
187 | }
188 | 
189 | // [END people_get_single_phone_number]
190 | 


--------------------------------------------------------------------------------
/advanced/sheets.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | // TODO (developer)- Replace the spreadsheet ID and sheet ID with yours values.
 17 | const yourspreadsheetId = '1YdrrmXSjpi4Tz-UuQ0eUKtdzQuvpzRLMoPEz3niTTVU';
 18 | const yourpivotSourceDataSheetId = 635809130;
 19 | const yourdestinationSheetId = 83410180;
 20 | // [START sheets_read_range]
 21 | /**
 22 |  * Read a range (A1:D5) of data values. Logs the values.
 23 |  * @param {string} spreadsheetId The spreadsheet ID to read from.
 24 |  * @see https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/get
 25 |  */
 26 | function readRange(spreadsheetId = yourspreadsheetId) {
 27 |   try {
 28 |     const response = Sheets.Spreadsheets.Values.get(spreadsheetId, 'Sheet1!A1:D5');
 29 |     if (response.values) {
 30 |       console.log(response.values);
 31 |       return;
 32 |     }
 33 |     console.log('Failed to get range of values from spreadsheet');
 34 |   } catch (e) {
 35 |     // TODO (developer) - Handle exception
 36 |     console.log('Failed with error %s', e.message);
 37 |   }
 38 | }
 39 | // [END sheets_read_range]
 40 | 
 41 | // [START sheets_write_range]
 42 | /**
 43 |  * Write to multiple, disjoint data ranges.
 44 |  * @param {string} spreadsheetId The spreadsheet ID to write to.
 45 |  * @see https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/batchUpdate
 46 |  */
 47 | function writeToMultipleRanges(spreadsheetId = yourspreadsheetId) {
 48 |   // Specify some values to write to the sheet.
 49 |   const columnAValues = [
 50 |     ['Item', 'Wheel', 'Door', 'Engine']
 51 |   ];
 52 |   const rowValues = [
 53 |     ['Cost', 'Stocked', 'Ship Date'],
 54 |     ['$20.50', '4', '3/1/2016']
 55 |   ];
 56 | 
 57 |   const request = {
 58 |     'valueInputOption': 'USER_ENTERED',
 59 |     'data': [
 60 |       {
 61 |         'range': 'Sheet1!A1:A4',
 62 |         'majorDimension': 'COLUMNS',
 63 |         'values': columnAValues
 64 |       },
 65 |       {
 66 |         'range': 'Sheet1!B1:D2',
 67 |         'majorDimension': 'ROWS',
 68 |         'values': rowValues
 69 |       }
 70 |     ]
 71 |   };
 72 |   try {
 73 |     const response = Sheets.Spreadsheets.Values.batchUpdate(request, spreadsheetId);
 74 |     if (response) {
 75 |       console.log(response);
 76 |       return;
 77 |     }
 78 |     console.log('response null');
 79 |   } catch (e) {
 80 |     // TODO (developer) - Handle  exception
 81 |     console.log('Failed with error %s', e.message);
 82 |   }
 83 | }
 84 | // [END sheets_write_range]
 85 | 
 86 | // [START sheets_add_new_sheet]
 87 | /**
 88 |  * Add a new sheet with some properties.
 89 |  * @param {string} spreadsheetId The spreadsheet ID.
 90 |  * @see https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/batchUpdate
 91 |  */
 92 | function addSheet(spreadsheetId = yourspreadsheetId) {
 93 |   const requests = [{
 94 |     'addSheet': {
 95 |       'properties': {
 96 |         'title': 'Deposits',
 97 |         'gridProperties': {
 98 |           'rowCount': 20,
 99 |           'columnCount': 12
100 |         },
101 |         'tabColor': {
102 |           'red': 1.0,
103 |           'green': 0.3,
104 |           'blue': 0.4
105 |         }
106 |       }
107 |     }
108 |   }];
109 |   try {
110 |     const response =
111 |       Sheets.Spreadsheets.batchUpdate({'requests': requests}, spreadsheetId);
112 |     console.log('Created sheet with ID: ' +
113 |       response.replies[0].addSheet.properties.sheetId);
114 |   } catch (e) {
115 |     // TODO (developer) - Handle exception
116 |     console.log('Failed with error %s', e.message);
117 |   }
118 | }
119 | // [END sheets_add_new_sheet]
120 | 
121 | // [START sheets_add_pivot_table]
122 | /**
123 |  * Add a pivot table.
124 |  * @param {string} spreadsheetId The spreadsheet ID to add the pivot table to.
125 |  * @param {string} pivotSourceDataSheetId The sheet ID to get the data from.
126 |  * @param {string} destinationSheetId The sheet ID to add the pivot table to.
127 |  * @see https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/batchUpdate
128 |  */
129 | function addPivotTable(
130 |     spreadsheetId = yourspreadsheetId,
131 |     pivotSourceDataSheetId= yourpivotSourceDataSheetId,
132 |     destinationSheetId= yourdestinationSheetId) {
133 |   const requests = [{
134 |     'updateCells': {
135 |       'rows': {
136 |         'values': [
137 |           {
138 |             'pivotTable': {
139 |               'source': {
140 |                 'sheetId': pivotSourceDataSheetId,
141 |                 'startRowIndex': 0,
142 |                 'startColumnIndex': 0,
143 |                 'endRowIndex': 20,
144 |                 'endColumnIndex': 7
145 |               },
146 |               'rows': [
147 |                 {
148 |                   'sourceColumnOffset': 0,
149 |                   'showTotals': true,
150 |                   'sortOrder': 'ASCENDING',
151 |                   'valueBucket': {
152 |                     'buckets': [
153 |                       {
154 |                         'stringValue': 'West'
155 |                       }
156 |                     ]
157 |                   }
158 |                 },
159 |                 {
160 |                   'sourceColumnOffset': 1,
161 |                   'showTotals': true,
162 |                   'sortOrder': 'DESCENDING',
163 |                   'valueBucket': {}
164 |                 }
165 |               ],
166 |               'columns': [
167 |                 {
168 |                   'sourceColumnOffset': 4,
169 |                   'sortOrder': 'ASCENDING',
170 |                   'showTotals': true,
171 |                   'valueBucket': {}
172 |                 }
173 |               ],
174 |               'values': [
175 |                 {
176 |                   'summarizeFunction': 'SUM',
177 |                   'sourceColumnOffset': 3
178 |                 }
179 |               ],
180 |               'valueLayout': 'HORIZONTAL'
181 |             }
182 |           }
183 |         ]
184 |       },
185 |       'start': {
186 |         'sheetId': destinationSheetId,
187 |         'rowIndex': 49,
188 |         'columnIndex': 0
189 |       },
190 |       'fields': 'pivotTable'
191 |     }
192 |   }];
193 |   try {
194 |     const response = Sheets.Spreadsheets.batchUpdate({'requests': requests}, spreadsheetId);
195 |     // The Pivot table will appear anchored to cell A50 of the destination sheet.
196 |   } catch (e) {
197 |     // TODO (developer) - Handle exception
198 |     console.log('Failed with error %s', e.message);
199 |   }
200 | }
201 | // [END sheets_add_pivot_table]
202 | 


--------------------------------------------------------------------------------
/advanced/shoppingContent.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | // [START apps_script_shopping_product_insert]
 17 | /**
 18 |  * Inserts a product into the products list. Logs the API response.
 19 |  */
 20 | function productInsert() {
 21 |   const merchantId = 123456; // Replace this with your Merchant Center ID.
 22 |   // Create a product resource and insert it
 23 |   const productResource = {
 24 |     'offerId': 'book123',
 25 |     'title': 'A Tale of Two Cities',
 26 |     'description': 'A classic novel about the French Revolution',
 27 |     'link': 'http://my-book-shop.com/tale-of-two-cities.html',
 28 |     'imageLink': 'http://my-book-shop.com/tale-of-two-cities.jpg',
 29 |     'contentLanguage': 'en',
 30 |     'targetCountry': 'US',
 31 |     'channel': 'online',
 32 |     'availability': 'in stock',
 33 |     'condition': 'new',
 34 |     'googleProductCategory': 'Media > Books',
 35 |     'productType': 'Media > Books',
 36 |     'gtin': '9780007350896',
 37 |     'price': {
 38 |       'value': '2.50',
 39 |       'currency': 'USD'
 40 |     },
 41 |     'shipping': [{
 42 |       'country': 'US',
 43 |       'service': 'Standard shipping',
 44 |       'price': {
 45 |         'value': '0.99',
 46 |         'currency': 'USD'
 47 |       }
 48 |     }],
 49 |     'shippingWeight': {
 50 |       'value': '2',
 51 |       'unit': 'pounds'
 52 |     }
 53 |   };
 54 | 
 55 |   try {
 56 |     response = ShoppingContent.Products.insert(productResource, merchantId);
 57 |     // RESTful insert returns the JSON object as a response.
 58 |     console.log(response);
 59 |   } catch (e) {
 60 |     // TODO (Developer) - Handle exceptions
 61 |     console.log('Failed with error: $s', e.error);
 62 |   }
 63 | }
 64 | // [END apps_script_shopping_product_insert]
 65 | 
 66 | // [START apps_script_shopping_product_list]
 67 | /**
 68 |  * Lists the products for a given merchant.
 69 |  */
 70 | function productList() {
 71 |   const merchantId = 123456; // Replace this with your Merchant Center ID.
 72 |   let pageToken;
 73 |   let pageNum = 1;
 74 |   const maxResults = 10;
 75 |   try {
 76 |     do {
 77 |       const products = ShoppingContent.Products.list(merchantId, {
 78 |         pageToken: pageToken,
 79 |         maxResults: maxResults
 80 |       });
 81 |       console.log('Page ' + pageNum);
 82 |       if (products.resources) {
 83 |         for (let i = 0; i < products.resources.length; i++) {
 84 |           console.log('Item [' + i + '] ==> ' + products.resources[i]);
 85 |         }
 86 |       } else {
 87 |         console.log('No more products in account ' + merchantId);
 88 |       }
 89 |       pageToken = products.nextPageToken;
 90 |       pageNum++;
 91 |     } while (pageToken);
 92 |   } catch (e) {
 93 |     // TODO (Developer) - Handle exceptions
 94 |     console.log('Failed with error: $s', e.error);
 95 |   }
 96 | }
 97 | // [END apps_script_shopping_product_list]
 98 | 
 99 | // [START apps_script_shopping_product_batch_insert]
100 | /**
101 |  * Batch updates products. Logs the response.
102 |  * @param  {object} productResource1 The first product resource.
103 |  * @param  {object} productResource2 The second product resource.
104 |  * @param  {object} productResource3 The third product resource.
105 |  */
106 | function custombatch(productResource1, productResource2, productResource3) {
107 |   const merchantId = 123456; // Replace this with your Merchant Center ID.
108 |   custombatchResource = {
109 |     'entries': [
110 |       {
111 |         'batchId': 1,
112 |         'merchantId': merchantId,
113 |         'method': 'insert',
114 |         'productId': 'book124',
115 |         'product': productResource1
116 |       },
117 |       {
118 |         'batchId': 2,
119 |         'merchantId': merchantId,
120 |         'method': 'insert',
121 |         'productId': 'book125',
122 |         'product': productResource2
123 |       },
124 |       {
125 |         'batchId': 3,
126 |         'merchantId': merchantId,
127 |         'method': 'insert',
128 |         'productId': 'book126',
129 |         'product': productResource3
130 |       }
131 |     ]
132 |   };
133 |   try {
134 |     const response = ShoppingContent.Products.custombatch(custombatchResource);
135 |     console.log(response);
136 |   } catch (e) {
137 |     // TODO (Developer) - Handle exceptions
138 |     console.log('Failed with error: $s', e.error);
139 |   }
140 | }
141 | // [END apps_script_shopping_product_batch_insert]
142 | 
143 | // [START apps_script_shopping_account_info]
144 | /**
145 |  * Updates content account tax information.
146 |  * Logs the API response.
147 |  */
148 | function updateAccountTax() {
149 |   // Replace this with your Merchant Center ID.
150 |   const merchantId = 123456;
151 | 
152 |   // Replace this with the account that you are updating taxes for.
153 |   const accountId = 123456;
154 | 
155 |   try {
156 |     const accounttax = ShoppingContent.Accounttax.get(merchantId, accountId);
157 |     console.log(accounttax);
158 | 
159 |     const taxInfo = {
160 |       accountId: accountId,
161 |       rules: [
162 |         {
163 |           'useGlobalRate': true,
164 |           'locationId': 21135,
165 |           'shippingTaxed': true,
166 |           'country': 'US'
167 |         },
168 |         {
169 |           'ratePercent': 3,
170 |           'locationId': 21136,
171 |           'country': 'US'
172 |         },
173 |         {
174 |           'ratePercent': 2,
175 |           'locationId': 21160,
176 |           'shippingTaxed': true,
177 |           'country': 'US'
178 |         }
179 |       ]
180 |     };
181 | 
182 |     console.log(ShoppingContent.Accounttax
183 |         .update(taxInfo, merchantId, accountId));
184 |   } catch (e) {
185 |     // TODO (Developer) - Handle exceptions
186 |     console.log('Failed with error: $s', e.error);
187 |   }
188 | }
189 | // [END apps_script_shopping_account_info]
190 | 


--------------------------------------------------------------------------------
/advanced/slides.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | 
 17 | // [START apps_script_slides_create_presentation]
 18 | /**
 19 |  * Create a new presentation.
 20 |  * @return {string} presentation Id.
 21 |  * @see https://developers.google.com/slides/api/reference/rest/v1/presentations/create
 22 |  */
 23 | function createPresentation() {
 24 |   try {
 25 |     const presentation =
 26 |       Slides.Presentations.create({'title': 'MyNewPresentation'});
 27 |     console.log('Created presentation with ID: ' + presentation.presentationId);
 28 |     return presentation.presentationId;
 29 |   } catch (e) {
 30 |     // TODO (developer) - Handle exception
 31 |     console.log('Failed with error %s', e.message);
 32 |   }
 33 | }
 34 | // [END apps_script_slides_create_presentation]
 35 | 
 36 | // [START apps_script_slides_create_slide]
 37 | /**
 38 |  * Create a new slide.
 39 |  * @param {string} presentationId The presentation to add the slide to.
 40 |  * @return {Object} slide
 41 |  * @see https://developers.google.com/slides/api/reference/rest/v1/presentations/batchUpdate
 42 |  */
 43 | function createSlide(presentationId) {
 44 |   // You can specify the ID to use for the slide, as long as it's unique.
 45 |   const pageId = Utilities.getUuid();
 46 | 
 47 |   const requests = [{
 48 |     'createSlide': {
 49 |       'objectId': pageId,
 50 |       'insertionIndex': 1,
 51 |       'slideLayoutReference': {
 52 |         'predefinedLayout': 'TITLE_AND_TWO_COLUMNS'
 53 |       }
 54 |     }
 55 |   }];
 56 |   try {
 57 |     const slide =
 58 |       Slides.Presentations.batchUpdate({'requests': requests}, presentationId);
 59 |     console.log('Created Slide with ID: ' + slide.replies[0].createSlide.objectId);
 60 |     return slide;
 61 |   } catch (e) {
 62 |     // TODO (developer) - Handle Exception
 63 |     console.log('Failed with error %s', e.message);
 64 |   }
 65 | }
 66 | // [END apps_script_slides_create_slide]
 67 | 
 68 | // [START apps_script_slides_read_page]
 69 | /**
 70 |  * Read page element IDs.
 71 |  * @param {string} presentationId The presentation to read from.
 72 |  * @param {string} pageId The page to read from.
 73 |  * @return {Object} response
 74 |  * @see https://developers.google.com/slides/api/reference/rest/v1/presentations.pages/get
 75 |  */
 76 | function readPageElementIds(presentationId, pageId) {
 77 |   // You can use a field mask to limit the data the API retrieves
 78 |   // in a get request, or what fields are updated in an batchUpdate.
 79 |   try {
 80 |     const response = Slides.Presentations.Pages.get(
 81 |         presentationId, pageId, {'fields': 'pageElements.objectId'});
 82 |     console.log(response);
 83 |     return response;
 84 |   } catch (e) {
 85 |     // TODO (developer) - Handle Exception
 86 |     console.log('Failed with error %s', e.message);
 87 |   }
 88 | }
 89 | // [END apps_script_slides_read_page]
 90 | 
 91 | // [START apps_script_slides_add_text_box]
 92 | /**
 93 |  * Add a new text box with text to a page.
 94 |  * @param {string} presentationId The presentation ID.
 95 |  * @param {string} pageId The page ID.
 96 |  * @return {Object} response
 97 |  * @see https://developers.google.com/slides/api/reference/rest/v1/presentations/batchUpdate
 98 |  */
 99 | function addTextBox(presentationId, pageId) {
100 |   // You can specify the ID to use for elements you create,
101 |   // as long as the ID is unique.
102 |   const pageElementId = Utilities.getUuid();
103 | 
104 |   const requests = [{
105 |     'createShape': {
106 |       'objectId': pageElementId,
107 |       'shapeType': 'TEXT_BOX',
108 |       'elementProperties': {
109 |         'pageObjectId': pageId,
110 |         'size': {
111 |           'width': {
112 |             'magnitude': 150,
113 |             'unit': 'PT'
114 |           },
115 |           'height': {
116 |             'magnitude': 50,
117 |             'unit': 'PT'
118 |           }
119 |         },
120 |         'transform': {
121 |           'scaleX': 1,
122 |           'scaleY': 1,
123 |           'translateX': 200,
124 |           'translateY': 100,
125 |           'unit': 'PT'
126 |         }
127 |       }
128 |     }
129 |   }, {
130 |     'insertText': {
131 |       'objectId': pageElementId,
132 |       'text': 'My Added Text Box',
133 |       'insertionIndex': 0
134 |     }
135 |   }];
136 |   try {
137 |     const response =
138 |       Slides.Presentations.batchUpdate({'requests': requests}, presentationId);
139 |     console.log('Created Textbox with ID: ' +
140 |       response.replies[0].createShape.objectId);
141 |     return response;
142 |   } catch (e) {
143 |     // TODO (developer) - Handle Exception
144 |     console.log('Failed with error %s', e.message);
145 |   }
146 | }
147 | // [END apps_script_slides_add_text_box]
148 | 
149 | // [START apps_script_slides_format_shape_text]
150 | /**
151 |  * Format the text in a shape.
152 |  * @param {string} presentationId The presentation ID.
153 |  * @param {string} shapeId The shape ID.
154 |  * @return {Object} replies
155 |  * @see https://developers.google.com/slides/api/reference/rest/v1/presentations/batchUpdate
156 |  */
157 | function formatShapeText(presentationId, shapeId) {
158 |   const requests = [{
159 |     'updateTextStyle': {
160 |       'objectId': shapeId,
161 |       'fields': 'foregroundColor,bold,italic,fontFamily,fontSize,underline',
162 |       'style': {
163 |         'foregroundColor': {
164 |           'opaqueColor': {
165 |             'themeColor': 'ACCENT5'
166 |           }
167 |         },
168 |         'bold': true,
169 |         'italic': true,
170 |         'underline': true,
171 |         'fontFamily': 'Corsiva',
172 |         'fontSize': {
173 |           'magnitude': 18,
174 |           'unit': 'PT'
175 |         }
176 |       },
177 |       'textRange': {
178 |         'type': 'ALL'
179 |       }
180 |     }
181 |   }];
182 |   try {
183 |     const response =
184 |       Slides.Presentations.batchUpdate({'requests': requests}, presentationId);
185 |     return response.replies;
186 |   } catch (e) {
187 |     // TODO (developer) - Handle Exception
188 |     console.log('Failed with error %s', e.message);
189 |   }
190 | }
191 | // [END apps_script_slides_format_shape_text]
192 | 
193 | // [START apps_script_slides_save_thumbnail]
194 | /**
195 |  * Saves a thumbnail image of the current Google Slide presentation in Google Drive.
196 |  * Logs the image URL.
197 |  * @param {number} i The zero-based slide index. 0 is the first slide.
198 |  * @example saveThumbnailImage(0)
199 |  * @see https://developers.google.com/slides/api/reference/rest/v1/presentations.pages/getThumbnail
200 |  */
201 | function saveThumbnailImage(i) {
202 |   try {
203 |     const presentation = SlidesApp.getActivePresentation();
204 |     // Get the thumbnail of specified page
205 |     const thumbnail = Slides.Presentations.Pages.getThumbnail(
206 |         presentation.getId(), presentation.getSlides()[i].getObjectId());
207 |     // fetch the  URL to the thumbnail image.
208 |     const response = UrlFetchApp.fetch(thumbnail.contentUrl);
209 |     const image = response.getBlob();
210 |     // Creates a file in the root of the user's Drive from a given Blob of arbitrary data.
211 |     const file = DriveApp.createFile(image);
212 |     console.log(file.getUrl());
213 |   } catch (e) {
214 |     // TODO (developer) - Handle Exception
215 |     console.log('Failed with error %s', e.message);
216 |   }
217 | }
218 | // [END apps_script_slides_save_thumbnail]
219 | 


--------------------------------------------------------------------------------
/advanced/tagManager.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | // [START apps_script_tag_manager_create_version]
 17 | /**
 18 |  * Creates a container version for a particular account
 19 |  * with the input accountPath.
 20 |  * @param {string} accountPath The account path.
 21 |  * @return {string} The tag manager container version.
 22 |  */
 23 | function createContainerVersion(accountPath) {
 24 |   const date = new Date();
 25 |   // Creates a container in the account, using the current timestamp to make
 26 |   // sure the container is unique.
 27 |   try {
 28 |     const container = TagManager.Accounts.Containers.create(
 29 |         {
 30 |           'name': 'appscript tagmanager container ' + date.getTime(),
 31 |           'usageContext': ['WEB']
 32 |         },
 33 |         accountPath);
 34 |     const containerPath = container.path;
 35 |     // Creates a workspace in the container to track entity changes.
 36 |     const workspace = TagManager.Accounts.Containers.Workspaces.create(
 37 |         {'name': 'appscript workspace', 'description': 'appscript workspace'},
 38 |         containerPath);
 39 |     const workspacePath = workspace.path;
 40 |     // Creates a random value variable.
 41 |     const variable = TagManager.Accounts.Containers.Workspaces.Variables.create(
 42 |         {'name': 'apps script variable', 'type': 'r'},
 43 |         workspacePath);
 44 |     // Creates a trigger that fires on any page view.
 45 |     const trigger = TagManager.Accounts.Containers.Workspaces.Triggers.create(
 46 |         {'name': 'apps script trigger', 'type': 'PAGEVIEW'},
 47 |         workspacePath);
 48 |     // Creates a arbitary pixel that fires the tag on all page views.
 49 |     const tag = TagManager.Accounts.Containers.Workspaces.Tags.create(
 50 |         {
 51 |           'name': 'apps script tag',
 52 |           'type': 'img',
 53 |           'liveOnly': false,
 54 |           'parameter': [
 55 |             {'type': 'boolean', 'key': 'useCacheBuster', 'value': 'true'}, {
 56 |               'type': 'template',
 57 |               'key': 'cacheBusterQueryParam',
 58 |               'value': 'gtmcb'
 59 |             },
 60 |             {'type': 'template', 'key': 'url', 'value': '//example.com'}
 61 |           ],
 62 |           'firingTriggerId': [trigger.triggerId]
 63 |         },
 64 |         workspacePath);
 65 |     // Creates a container version with the variabe, trigger, and tag.
 66 |     const version = TagManager.Accounts.Containers.Workspaces
 67 |         .create_version(
 68 |             {'name': 'apps script version'}, workspacePath)
 69 |         .containerVersion;
 70 |     console.log(version);
 71 |     return version;
 72 |   } catch (e) {
 73 |     // TODO (Developer) - Handle exception
 74 |     console.log('Failed with error: %s', e.error);
 75 |   }
 76 | }
 77 | // [END apps_script_tag_manager_create_version]
 78 | 
 79 | // [START apps_script_tag_manager_publish_version]
 80 | /**
 81 |  * Retrieves the container path from a container version path.
 82 |  * @param  {string} versionPath The version path.
 83 |  * @return {string}             The container path.
 84 |  */
 85 | function grabContainerPath(versionPath) {
 86 |   const pathParts = versionPath.split('/');
 87 |   return pathParts.slice(0, 4).join('/');
 88 | }
 89 | 
 90 | /**
 91 |  * Publishes a container version publically to the world and creates a quick
 92 |  * preview of the current container draft.
 93 |  * @param {object} version The container version.
 94 |  */
 95 | function publishVersionAndQuickPreviewDraft(version) {
 96 |   try {
 97 |     const containerPath = grabContainerPath(version.path);
 98 |     // Publish the input container version.
 99 |     TagManager.Accounts.Containers.Versions.publish(version.path);
100 |     const workspace = TagManager.Accounts.Containers.Workspaces.create(
101 |         {'name': 'appscript workspace', 'description': 'appscript workspace'},
102 |         containerPath);
103 |     const workspaceId = workspace.path;
104 |     // Quick previews the current container draft.
105 |     const quickPreview = TagManager.Accounts.Containers.Workspaces
106 |         .quick_preview(workspace.path);
107 |     console.log(quickPreview);
108 |   } catch (e) {
109 |     // TODO (Developer) - Handle exceptions
110 |     console.log('Failed with error: $s', e.error);
111 |   }
112 | }
113 | // [END apps_script_tag_manager_publish_version]
114 | 
115 | // [START apps_script_tag_manager_create_user_environment]
116 | /**
117 |  * Retrieves the container path from a container version path.
118 |  * @param  {string} versionPath The version path.
119 |  * @return {string}             The container path.
120 |  */
121 | function grabContainerPath(versionPath) {
122 |   const pathParts = versionPath.split('/');
123 |   return pathParts.slice(0, 4).join('/');
124 | }
125 | 
126 | /**
127 |  * Creates and reauthorizes a user environment in a container that points
128 |  * to a container version passed in as an argument.
129 |  * @param {object} version The container version object.
130 |  */
131 | function createAndReauthorizeUserEnvironment(version) {
132 |   try {
133 |     // Creates a container version.
134 |     const containerPath = grabContainerPath(version.path);
135 |     // Creates a user environment that points to a container version.
136 |     const environment = TagManager.Accounts.Containers.Environments.create(
137 |         {
138 |           'name': 'test_environment',
139 |           'type': 'user',
140 |           'containerVersionId': version.containerVersionId
141 |         },
142 |         containerPath);
143 |     console.log('Original user environment: ' + environment);
144 |     // Reauthorizes the user environment that points to a container version.
145 |     TagManager.Accounts.Containers.Environments.reauthorize(
146 |         {}, environment.path);
147 |     console.log('Reauthorized user environment: ' + environment);
148 |   } catch (e) {
149 |     // TODO (Developer) - Handle exceptions
150 |     console.log('Failed with error: $s', e.error);
151 |   }
152 | }
153 | // [END apps_script_tag_manager_create_user_environment]
154 | 
155 | // [START apps_script_tag_manager_log]
156 | /**
157 |  * Logs all emails and container access permission within an account.
158 |  * @param {string} accountPath The account path.
159 |  */
160 | function logAllAccountUserPermissionsWithContainerAccess(accountPath) {
161 |   try {
162 |     const userPermissions =
163 |       TagManager.Accounts.User_permissions.list(accountPath).userPermission;
164 |     for (let i = 0; i < userPermissions.length; i++) {
165 |       const userPermission = userPermissions[i];
166 |       if ('emailAddress' in userPermission) {
167 |         const containerAccesses = userPermission.containerAccess;
168 |         for (let j = 0; j < containerAccesses.length; j++) {
169 |           const containerAccess = containerAccesses[j];
170 |           console.log(
171 |               'emailAddress:' + userPermission.emailAddress +
172 |             ' containerId:' + containerAccess.containerId +
173 |             ' containerAccess:' + containerAccess.permission);
174 |         }
175 |       }
176 |     }
177 |   } catch (e) {
178 |     // TODO (Developer) - Handle exceptions
179 |     console.log('Failed with error: $s', e.error);
180 |   }
181 | }
182 | // [END apps_script_tag_manager_log]
183 | 


--------------------------------------------------------------------------------
/advanced/tasks.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | // [START tasks_lists_task_lists]
17 | /**
18 |  * Lists the titles and IDs of tasksList.
19 |  * @see https://developers.google.com/tasks/reference/rest/v1/tasklists/list
20 |  */
21 | function listTaskLists() {
22 |   try {
23 |     // Returns all the authenticated user's task lists.
24 |     const taskLists = Tasks.Tasklists.list();
25 |     // If taskLists are available then print all tasklists.
26 |     if (!taskLists.items) {
27 |       console.log('No task lists found.');
28 |       return;
29 |     }
30 |     // Print the tasklist title and tasklist id.
31 |     for (let i = 0; i < taskLists.items.length; i++) {
32 |       const taskList = taskLists.items[i];
33 |       console.log('Task list with title "%s" and ID "%s" was found.', taskList.title, taskList.id);
34 |     }
35 |   } catch (err) {
36 |     // TODO (developer) - Handle exception from Task API
37 |     console.log('Failed with an error %s ', err.message);
38 |   }
39 | }
40 | // [END tasks_lists_task_lists]
41 | 
42 | // [START tasks_list_tasks]
43 | /**
44 |  * Lists task items for a provided tasklist ID.
45 |  * @param  {string} taskListId The tasklist ID.
46 |  * @see https://developers.google.com/tasks/reference/rest/v1/tasks/list
47 |  */
48 | function listTasks(taskListId) {
49 |   try {
50 |     // List the task items of specified tasklist using taskList id.
51 |     const tasks = Tasks.Tasks.list(taskListId);
52 |     // If tasks are available then print all task of given tasklists.
53 |     if (!tasks.items) {
54 |       console.log('No tasks found.');
55 |       return;
56 |     }
57 |     // Print the task title and task id of specified tasklist.
58 |     for (let i = 0; i < tasks.items.length; i++) {
59 |       const task = tasks.items[i];
60 |       console.log('Task with title "%s" and ID "%s" was found.', task.title, task.id);
61 |     }
62 |   } catch (err) {
63 |     // TODO (developer) - Handle exception from Task API
64 |     console.log('Failed with an error %s', err.message);
65 |   }
66 | }
67 | // [END tasks_list_tasks]
68 | 
69 | // [START tasks_add_task]
70 | /**
71 |  * Adds a task to a tasklist.
72 |  * @param {string} taskListId The tasklist to add to.
73 |  * @see https://developers.google.com/tasks/reference/rest/v1/tasks/insert
74 |  */
75 | function addTask(taskListId) {
76 |   // Task details with title and notes for inserting new task
77 |   let task = {
78 |     title: 'Pick up dry cleaning',
79 |     notes: 'Remember to get this done!'
80 |   };
81 |   try {
82 |     // Call insert method with taskDetails and taskListId to insert Task to specified tasklist.
83 |     task = Tasks.Tasks.insert(task, taskListId);
84 |     // Print the Task ID of created task.
85 |     console.log('Task with ID "%s" was created.', task.id);
86 |   } catch (err) {
87 |     // TODO (developer) - Handle exception from Tasks.insert() of Task API
88 |     console.log('Failed with an error %s', err.message);
89 |   }
90 | }
91 | // [END tasks_add_task]
92 | 


--------------------------------------------------------------------------------
/advanced/test_adminSDK.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | 
 17 | /**
 18 |  * Tests listAllUsers function of adminSDK.gs
 19 |  */
 20 | function itShouldListAllUsers() {
 21 |   console.log('> itShouldListAllUsers');
 22 |   listAllUsers();
 23 | }
 24 | 
 25 | /**
 26 |  * Tests getUser function of adminSDK.gs
 27 |  */
 28 | function itShouldGetUser() {
 29 |   console.log('> itShouldGetUser');
 30 |   getUser();
 31 | }
 32 | 
 33 | /**
 34 |  * Tests addUser function of adminSDK.gs
 35 |  */
 36 | function itShouldAddUser() {
 37 |   console.log('> itShouldAddUser');
 38 |   addUser();
 39 | }
 40 | 
 41 | /**
 42 |  * Tests createAlias function of adminSDK.gs
 43 |  */
 44 | function itShouldCreateAlias() {
 45 |   console.log('> itShouldCreateAlias');
 46 |   createAlias();
 47 | }
 48 | 
 49 | /**
 50 |  * Tests listAllGroups function of adminSDK.gs
 51 |  */
 52 | function itShouldListAllGroups() {
 53 |   console.log('> itShouldListAllGroups');
 54 |   listAllGroups();
 55 | }
 56 | 
 57 | /**
 58 |  * Tests addGroupMember function of adminSDK.gs
 59 |  */
 60 | function itShouldAddGroupMember() {
 61 |   console.log('> itShouldAddGroupMember');
 62 |   addGroupMember();
 63 | }
 64 | 
 65 | /**
 66 |  * Tests migrateMessages function of adminSDK.gs
 67 |  */
 68 | function itShouldMigrateMessages() {
 69 |   console.log('> itShouldMigrateMessages');
 70 |   migrateMessages();
 71 | }
 72 | 
 73 | /**
 74 |  * Tests getGroupSettings function of adminSDK.gs
 75 |  */
 76 | function itShouldGetGroupSettings() {
 77 |   console.log('> itShouldGetGroupSettings');
 78 |   getGroupSettings();
 79 | }
 80 | 
 81 | /**
 82 |  * Tests updateGroupSettings function of adminSDK.gs
 83 |  */
 84 | function itShouldUpdateGroupSettings() {
 85 |   console.log('> itShouldUpdateGroupSettings');
 86 |   updateGroupSettings();
 87 | }
 88 | 
 89 | /**
 90 |  * Tests getLicenseAssignments function of adminSDK.gs
 91 |  */
 92 | function itShouldGetLicenseAssignments() {
 93 |   console.log('> itShouldGetLicenseAssignments');
 94 |   getLicenseAssignments();
 95 | }
 96 | 
 97 | /**
 98 |  * Tests insertLicenseAssignment function of adminSDK.gs
 99 |  */
100 | function itShouldInsertLicenseAssignment() {
101 |   console.log('> itShouldInsertLicenseAssignment');
102 |   insertLicenseAssignment();
103 | }
104 | 
105 | /**
106 |  * Tests generateLoginActivityReport function of adminSDK.gs
107 |  */
108 | function itShouldGenerateLoginActivityReport() {
109 |   console.log('> itShouldGenerateLoginActivityReport');
110 |   generateLoginActivityReport();
111 | }
112 | 
113 | /**
114 |  * Tests generateUserUsageReport function of adminSDK.gs
115 |  */
116 | function itShouldGenerateUserUsageReport() {
117 |   console.log('> itShouldGenerateUserUsageReport');
118 |   generateUserUsageReport();
119 | }
120 | 
121 | /**
122 |  * Tests getSubscriptions function of adminSDK.gs
123 |  */
124 | function itShouldGetSubscriptions() {
125 |   console.log('> itShouldGetSubscriptions');
126 |   getSubscriptions();
127 | }
128 | 
129 | /**
130 |  * Runs all the tests
131 |  */
132 | function RUN_ALL_TESTS() {
133 |   itShouldListAllUsers();
134 |   itShouldGetUser();
135 |   itShouldAddUser();
136 |   itShouldCreateAlias();
137 |   itShouldListAllGroups();
138 |   itShouldAddGroupMember();
139 |   itShouldMigrateMessages();
140 |   itShouldGetGroupSettings();
141 |   itShouldUpdateGroupSettings();
142 |   itShouldGetLicenseAssignments();
143 |   itShouldInsertLicenseAssignment();
144 |   itShouldGenerateLoginActivityReport();
145 |   itShouldGenerateUserUsageReport();
146 |   itShouldGetSubscriptions();
147 | }
148 | 


--------------------------------------------------------------------------------
/advanced/test_adsense.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | // Replace with correct values
18 | const accountName = 'account name';
19 | const clientName = 'ad client name';
20 | 
21 | /**
22 |  * Tests listAccounts function of adsense.gs
23 |  */
24 | function itShouldListAccounts() {
25 |   console.log('> itShouldListAccounts');
26 |   listAccounts();
27 | }
28 | 
29 | /**
30 |  * Tests listAdClients function of adsense.gs
31 |  */
32 | function itShouldListAdClients() {
33 |   console.log('> itShouldListAdClients');
34 |   listAdClients(accountName);
35 | }
36 | 
37 | /**
38 |  * Tests listAdUnits function of adsense.gs
39 |  */
40 | function itShouldListAdUnits() {
41 |   console.log('> itShouldListAdUnits');
42 |   listAdUnits(clientName);
43 | }
44 | 
45 | /**
46 |  * Run all tests
47 |  */
48 | function RUN_ALL_TESTS() {
49 |   itShouldListAccounts();
50 |   itShouldListAdClients();
51 |   itShouldListAdUnits();
52 | }
53 | 


--------------------------------------------------------------------------------
/advanced/test_analytics.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | // Replace with the required profileId
18 | const profileId = 'abcd';
19 | 
20 | /**
21 |  * Tests listAccounts function of analytics.gs
22 |  */
23 | function itShouldListAccounts() {
24 |   console.log('> itShouldListAccounts');
25 |   listAccounts();
26 | }
27 | 
28 | /**
29 |  * Tests runReport function of analytics.gs
30 |  */
31 | function itShouldRunReport() {
32 |   console.log('> itShouldRunReport');
33 |   runReport(profileId);
34 | }
35 | 
36 | /**
37 |  * Runs all the tests
38 |  */
39 | function RUN_ALL_TESTS() {
40 |   itShouldListAccounts();
41 |   itShouldRunReport();
42 | }
43 | 


--------------------------------------------------------------------------------
/advanced/test_bigquery.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | /**
18 |  * Tests runQuery function of adminSDK.gs
19 |  */
20 | function itShouldRunQuery() {
21 |   console.log('> itShouldRunQuery');
22 |   runQuery();
23 | }
24 | 
25 | /**
26 |  * Tests loadCsv function of adminSDK.gs
27 |  */
28 | function itShouldLoadCsv() {
29 |   console.log('> itShouldLoadCsv');
30 |   loadCsv();
31 | }
32 | 
33 | /**
34 |  * Runs all the tests
35 |  */
36 | function RUN_ALL_TESTS() {
37 |   itShouldRunQuery();
38 |   itShouldLoadCsv();
39 | }
40 | 


--------------------------------------------------------------------------------
/advanced/test_calendar.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | /**
18 |  * Tests listCalendars function of calendar.gs
19 |  */
20 | function itShouldListCalendars() {
21 |   console.log('> itShouldListCalendars');
22 |   listCalendars();
23 | }
24 | 
25 | /**
26 |  * Tests createEvent function of calendars.gs
27 |  */
28 | function itShouldCreateEvent() {
29 |   console.log('> itShouldCreateEvent');
30 |   createEvent();
31 | }
32 | 
33 | /**
34 |  * Tests gerRelativeDate function of calendar.gs
35 |  */
36 | function itShouldGetRelativeDate() {
37 |   console.log('> itShouldGetRelativeDate');
38 |   console.log('no offset: ' + getRelativeDate(0, 0));
39 |   console.log('4 hour offset: ' + getRelativeDate(0, 4));
40 |   console.log('1 day offset: ' + getRelativeDate(1, 0));
41 |   console.log('1 day and 3 hour off set: ' + getRelativeDate(1, 3));
42 | }
43 | 
44 | /**
45 |  * Tests listNext10Events function of calendar.gs
46 |  */
47 | function itShouldListNext10Events() {
48 |   console.log('> itShouldListNext10Events');
49 |   listNext10Events();
50 | }
51 | 
52 | /**
53 |  * Tests logSyncedEvents function of calendar.gs
54 |  */
55 | function itShouldLogSyncedEvents() {
56 |   console.log('> itShouldLogSyncedEvents');
57 |   logSyncedEvents('primary', true);
58 |   logSyncedEvents('primary', false);
59 | }
60 | 
61 | /**
62 |  * Tests conditionalUpdate function of calendar.gs
63 |  */
64 | function itShouldConditionalUpdate() {
65 |   console.log('> itShouldConditionalUpdate (takes 30 seconds)');
66 |   conditionalUpdate();
67 | }
68 | 
69 | /**
70 |  * Tests conditionalFetch function of calendar.gs
71 |  */
72 | function itShouldConditionalFetch() {
73 |   console.log('> itShouldConditionalFetch');
74 |   conditionalFetch();
75 | }
76 | 
77 | /**
78 |  * Runs all the tests
79 |  */
80 | function RUN_ALL_TESTS() {
81 |   itShouldListCalendars();
82 |   itShouldCreateEvent();
83 |   itShouldGetRelativeDate();
84 |   itShouldListNext10Events();
85 |   itShouldLogSyncedEvents();
86 |   itShouldConditionalUpdate();
87 |   itShouldConditionalFetch();
88 | }
89 | 


--------------------------------------------------------------------------------
/advanced/test_classroom.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | /**
18 |  * Tests listCourses function of classroom.gs
19 |  */
20 | function itShouldListCourses() {
21 |   console.log('> itShouldListCourses');
22 |   listCourses();
23 | }
24 | 
25 | /**
26 |  * Runs all the tests
27 |  */
28 | function RUN_ALL_TESTS() {
29 |   itShouldListCourses();
30 | }
31 | 


--------------------------------------------------------------------------------
/advanced/test_docs.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | // TODO (developer) - Replace with your documentId
 17 | const documentId='1EaLpBfuo3bMUeP6_P34auuQroh3bCWi6hLDppY6J6us';
 18 | /**
 19 |  * A simple exists assertion check. Expects a value to exist. Errors if DNE.
 20 |  * @param {any} value A value that is expected to exist.
 21 |  */
 22 | function expectToExist(value) {
 23 |   if (!value) {
 24 |     console.log('DNE');
 25 |     return;
 26 |   }
 27 |   console.log('TEST: Exists');
 28 | }
 29 | 
 30 | /**
 31 |  * A simple exists assertion check for primatives (no nested objects).
 32 |  * Expects actual to equal expected. Logs the output.
 33 |  * @param {any} expected The actual value.
 34 |  * @param {any} actual  The expected value.
 35 |  */
 36 | function expectToEqual(expected, actual) {
 37 |   if (actual !== expected) {
 38 |     console.log('TEST: actual: %s = expected: %s', actual, expected);
 39 |     return;
 40 |   }
 41 |   console.log('TEST: actual: %s = expected: %s', actual, expected);
 42 | }
 43 | 
 44 | 
 45 | /**
 46 |  * Runs all tests.
 47 |  */
 48 | function RUN_ALL_TESTS() {
 49 |   itShouldCreateDocument();
 50 |   itShouldInsertTextWithStyle();
 51 |   itShouldReplaceText();
 52 |   itShouldReadFirstParagraph();
 53 | }
 54 | 
 55 | /**
 56 |  * Creates a presentation.
 57 |  */
 58 | function itShouldCreateDocument() {
 59 |   const documentId = createDocument();
 60 |   expectToExist(documentId);
 61 |   deleteFileOnCleanup(documentId);
 62 | }
 63 | 
 64 | 
 65 | /**
 66 |  * Insert text with style.
 67 |  */
 68 | function itShouldInsertTextWithStyle() {
 69 |   const documentId = createDocument();
 70 |   expectToExist(documentId);
 71 |   const text='This is the sample document';
 72 |   const replies=insertAndStyleText(documentId, text);
 73 |   expectToEqual(2, replies.length);
 74 |   deleteFileOnCleanup(documentId);
 75 | }
 76 | 
 77 | /**
 78 |  * Find and Replace the text.
 79 |  */
 80 | function itShouldReplaceText() {
 81 |   const documentId = createDocument();
 82 |   expectToExist(documentId);
 83 |   const text='This is the sample document';
 84 |   const response=insertAndStyleText(documentId, text);
 85 |   expectToEqual(2, response.replies.length);
 86 |   const findTextToReplacementMap={'sample': 'test', 'document': 'Doc'};
 87 |   const replies=findAndReplace(documentId, findTextToReplacementMap);
 88 |   expectToEqual(2, replies.length);
 89 |   deleteFileOnCleanup(documentId);
 90 | }
 91 | 
 92 | /**
 93 |  * Read first paragraph
 94 |  */
 95 | function itShouldReadFirstParagraph() {
 96 |   const paragraphText=readFirstParagraph(documentId);
 97 |   expectToExist(paragraphText);
 98 |   expectToEqual(89, paragraphText.length);
 99 | }
100 | /**
101 |  * Delete the file
102 |  * @param {string} id Document ID
103 |  */
104 | function deleteFileOnCleanup(id) {
105 |   Drive.Files.remove(id);
106 | }
107 | 


--------------------------------------------------------------------------------
/advanced/test_doubleclick.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | /**
18 |  * Tests listUserProfiles function of doubleclick.gs
19 |  */
20 | function itShouldListUserProfiles() {
21 |   console.log('> itShouldListUserProfiles');
22 |   listUserProfiles();
23 | }
24 | 
25 | /**
26 |  * Tests listActiveCampaigns function of doubleclick.gs
27 |  */
28 | function itShouldListActiveCampaigns() {
29 |   console.log('> itShouldListActiveCampaigns');
30 |   listActiveCampaigns();
31 | }
32 | 
33 | /**
34 |  * Tests createAdvertiserAndCampaign function of doubleclick.gs
35 |  */
36 | function itShouldCreateAdvertiserAndCampaign() {
37 |   console.log('> itShouldCreateAdvertiserAndCampaign');
38 |   createAdvertiserAndCampaign();
39 | }
40 | 
41 | /**
42 |  * Run all tests
43 |  */
44 | function RUN_ALL_TESTS() {
45 |   itShouldListUserProfiles();
46 |   itShouldListActiveCampaigns();
47 |   itShouldCreateAdvertiserAndCampaign();
48 | }
49 | 


--------------------------------------------------------------------------------
/advanced/test_drive.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | 
 17 | /**
 18 |  * Helper functions to help test drive.gs expectToExist(...)
 19 |  * @param {string} value
 20 |  * To test drive.gs please add drive services
 21 |  */
 22 | function expectToExist(value) {
 23 |   if (value) {
 24 |     console.log('TEST: Exists');
 25 |   } else {
 26 |     throw new Error('TEST: DNE');
 27 |   }
 28 | }
 29 | 
 30 | /**
 31 |  * Helper functions to help test drive.gs expectToEqual
 32 |  * @param {string} actual
 33 |  * @param {string} expected
 34 |  * To test drive.gs please add drive services
 35 |  */
 36 | function expectToEqual(actual, expected) {
 37 |   console.log('TEST: actual: %s = expected: %s', actual, expected);
 38 |   if (actual !== expected) {
 39 |     console.log('TEST: actual: %s expected: %s', actual, expected);
 40 |   }
 41 | }
 42 | 
 43 | /**
 44 |  * Helper functions to help test drive.gs createFolder()
 45 |  *
 46 |  * To test drive.gs please add drive services
 47 |  */
 48 | function createTestFolder() {
 49 |   DriveApp.createFolder('test1');
 50 |   DriveApp.createFolder('test2');
 51 | }
 52 | 
 53 | /**
 54 |  * Helper functions to help test drive.gs getFilesByName(...)
 55 |  *
 56 |  * To test drive.gs please add drive services
 57 |  */
 58 | function fileCleanUp() {
 59 |   DriveApp.getFilesByName('google_logo.png').next().setTrashed(true);
 60 | }
 61 | 
 62 | /**
 63 |  * Helper functions folderCleanUp()
 64 |  *
 65 |  * To test getFoldersByName() please add drive services
 66 |  */
 67 | function folderCleanUp() {
 68 |   DriveApp.getFoldersByName('test1').next().setTrashed(true);
 69 |   DriveApp.getFoldersByName('test2').next().setTrashed(true);
 70 | }
 71 | 
 72 | /**
 73 |  * drive.gs test functions below
 74 |  */
 75 | 
 76 | /**
 77 |  * tests drive.gs uploadFile
 78 |  * @return {string} fileId The ID of the file
 79 |  */
 80 | function checkUploadFile() {
 81 |   uploadFile();
 82 |   const fileId = DriveApp.getFilesByName('google_logo.png').next().getId();
 83 |   expectToExist(fileId);
 84 |   return fileId;
 85 | }
 86 | 
 87 | /**
 88 |  * tests drive.gs listRootFolders
 89 |  */
 90 | function checkListRootFolders() {
 91 |   createTestFolder();
 92 | 
 93 |   const folders = DriveApp.getFolders();
 94 |   while (folders.hasNext()) {
 95 |     const folder = folders.next();
 96 |     console.log(folder.getName() + ' ' + folder.getId());
 97 |   }
 98 |   listRootFolders();
 99 |   folderCleanUp();
100 | }
101 | 
102 | /**
103 |  * tests drive.gs addCustomProperty
104 |  * @param {string} fileId The ID of the file
105 |  */
106 | function checkAddCustomProperty(fileId) {
107 |   addCustomProperty(fileId);
108 |   expectToEqual(Drive.Properties.get(fileId, 'department',
109 |       {visibility: 'PUBLIC'}).value, 'Sales');
110 | }
111 | 
112 | /**
113 |  * Run all tests
114 |  */
115 | function RUN_ALL_TESTS() {
116 |   const fileId = checkUploadFile();
117 |   checkListRootFolders();
118 |   checkAddCustomProperty(fileId);
119 |   listRevisions(fileId);
120 |   fileCleanUp();
121 | }
122 | 


--------------------------------------------------------------------------------
/advanced/test_gmail.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | /**
18 |  * Run All functions of gmail.gs
19 |  * Add gmail services to run
20 |  */
21 | function RUN_ALL_TESTS() {
22 |   console.log('> ltShouldListLabelInfo');
23 |   listLabelInfo();
24 |   console.log('> ltShouldListInboxSnippets');
25 |   listInboxSnippets();
26 |   console.log('> ltShouldLogRecentHistory');
27 |   logRecentHistory();
28 |   console.log('> ltShouldGetRawMessage');
29 |   getRawMessage();
30 | }
31 | 


--------------------------------------------------------------------------------
/advanced/test_people.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | /**
18 |  * Helper functions for sheets.gs testing
19 |  *
20 |  * to tests people.gs add people api services
21 |  */
22 | function RUN_ALL_TESTS() {
23 |   console.log('> itShouldGetConnections');
24 |   getConnections();
25 |   console.log('> itShouldGetSelf'); // Requires the scope userinfo.profile
26 |   getSelf();
27 |   console.log('> itShouldGetAccount');
28 |   getAccount('me');
29 | }
30 | 


--------------------------------------------------------------------------------
/advanced/test_sheets.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | /**
18 |  * Helper functions for sheets.gs testing
19 |  * to tests sheets.gs add sheets services
20 |  *
21 |  * create test spreadsheets
22 |  * @return {string} spreadsheet
23 |  */
24 | function createTestSpreadsheet() {
25 |   const spreadsheet = SpreadsheetApp.create('Test Spreadsheet');
26 |   for (let i = 0; i < 3; ++i) {
27 |     spreadsheet.appendRow([1, 2, 3]);
28 |   }
29 |   return spreadsheet.getId();
30 | }
31 | 
32 | /**
33 |  * populate the created spreadsheet with values
34 |  * @param {string} spreadsheetId
35 |  */
36 | function populateValues(spreadsheetId) {
37 |   const batchUpdateRequest = Sheets.newBatchUpdateSpreadsheetRequest();
38 |   const repeatCellRequest = Sheets.newRepeatCellRequest();
39 | 
40 |   const values = [];
41 |   for (let i = 0; i < 10; ++i) {
42 |     values[i] = [];
43 |     for (let j = 0; j < 10; ++j) {
44 |       values[i].push('Hello');
45 |     }
46 |   }
47 |   const range = 'A1:J10';
48 |   SpreadsheetApp.openById(spreadsheetId).getRange(range).setValues(values);
49 |   SpreadsheetApp.flush();
50 | }
51 | 
52 | /**
53 |  * Functions to test sheets.gs below this line
54 |  * tests readRange function of sheets.gs
55 |  * @return {string} spreadsheet ID
56 |  */
57 | function itShouldReadRange() {
58 |   console.log('> itShouldReadRange');
59 |   spreadsheetId = createTestSpreadsheet();
60 |   populateValues(spreadsheetId);
61 |   readRange(spreadsheetId);
62 |   return spreadsheetId;
63 | }
64 | 
65 | /**
66 |  * tests the addPivotTable function of sheets.gs
67 |  * @param {string} spreadsheetId
68 |  */
69 | function itShouldAddPivotTable(spreadsheetId) {
70 |   console.log('> itShouldAddPivotTable');
71 |   const spreadsheet = SpreadsheetApp.openById(spreadsheetId);
72 |   const sheets = spreadsheet.getSheets();
73 |   sheetId = sheets[0].getSheetId();
74 |   addPivotTable(spreadsheetId, sheetId, sheetId);
75 |   SpreadsheetApp.flush();
76 |   console.log('Created pivot table');
77 | }
78 | 
79 | /**
80 |  * runs all the tests
81 |  */
82 | function RUN_ALL_TEST() {
83 |   const spreadsheetId = itShouldReadRange();
84 |   console.log('> itShouldWriteToMultipleRanges');
85 |   writeToMultipleRanges(spreadsheetId);
86 |   console.log('> itShouldAddSheet');
87 |   addSheet(spreadsheetId);
88 |   itShouldAddPivotTable(spreadsheetId);
89 | }
90 | 


--------------------------------------------------------------------------------
/advanced/test_shoppingContent.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | // Before running these tests replace the product resource variables
18 | const productResource1 = {};
19 | const productResource2 = {};
20 | const productResource3 = {};
21 | 
22 | /**
23 |  * Tests productInsert function of shoppingContent.gs
24 |  */
25 | function itShouldProductInsert() {
26 |   console.log('> itShouldPproductInsert');
27 |   productInsert();
28 | }
29 | 
30 | /**
31 |  * Tests productList function of shoppingContent.gs
32 |  */
33 | function itShouldProductList() {
34 |   console.log('> itShouldProductList');
35 |   productList();
36 | }
37 | 
38 | /**
39 |  * Tests custombatch function of shoppingContent.gs
40 |  */
41 | function itShouldCustombatch() {
42 |   console.log('> itShouldCustombatch');
43 |   custombatch(productResource1, productResource2, productResource3);
44 | }
45 | 
46 | /**
47 |  * Tests updateAccountTax function of shoppingContent.gs
48 |  */
49 | function itShouldUpdateAccountTax() {
50 |   console.log('> itShouldUpdateAccountTax');
51 |   updateAccountTax();
52 | }
53 | 
54 | /**
55 |  * Run all tests
56 |  */
57 | function RUN_ALL_TESTS() {
58 |   itShouldProductInsert();
59 |   itShouldProductList();
60 |   itShouldCustombatch();
61 |   itShouldUpdateAccountTax();
62 | }
63 | 


--------------------------------------------------------------------------------
/advanced/test_slides.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | 
 17 | /**
 18 |  * A simple existance assertion. Logs if the value is falsy.
 19 |  * @param {object} value The value we expect to exist.
 20 |  */
 21 | function expectToExist(value) {
 22 |   if (!value) {
 23 |     console.log('DNE');
 24 |     return;
 25 |   }
 26 |   console.log('TEST: Exists');
 27 | }
 28 | 
 29 | /**
 30 |  * A simple equality assertion. Logs if there is a mismatch.
 31 |  * @param {object} expected The expected value.
 32 |  * @param {object} actual The actual value.
 33 |  */
 34 | function expectToEqual(expected, actual) {
 35 |   if (actual !== expected) {
 36 |     console.log('TEST: actual: %s = expected: %s', actual, expected);
 37 |     return;
 38 |   }
 39 |   console.log('TEST: actual: %s = expected: %s', actual, expected);
 40 | }
 41 | /**
 42 |  * Creates a presentation.
 43 |  * @param {string} presentationId The presentation ID.
 44 |  * @param {string} pageId The page ID.
 45 |  * @return {string} objectId
 46 |  */
 47 | function addShape(presentationId, pageId) {
 48 |   // Create a new square textbox, using the supplied element ID.
 49 |   const elementId = 'MyTextBox_01';
 50 |   const pt350 = {
 51 |     magnitude: 350,
 52 |     unit: 'PT'
 53 |   };
 54 |   const requests = [{
 55 |     createShape: {
 56 |       objectId: elementId,
 57 |       shapeType: 'ELLIPSE',
 58 |       elementProperties: {
 59 |         pageObjectId: pageId,
 60 |         size: {
 61 |           height: pt350,
 62 |           width: pt350
 63 |         },
 64 |         transform: {
 65 |           scaleX: 1,
 66 |           scaleY: 1,
 67 |           translateX: 350,
 68 |           translateY: 100,
 69 |           unit: 'PT'
 70 |         }
 71 |       }
 72 |     }
 73 |   },
 74 | 
 75 |   // Insert text into the box, using the supplied element ID.
 76 |   {
 77 |     insertText: {
 78 |       objectId: elementId,
 79 |       insertionIndex: 0,
 80 |       text: 'Text Formatted!'
 81 |     }
 82 |   }];
 83 | 
 84 |   // Execute the request.
 85 |   const createTextboxWithTextResponse = Slides.Presentations.batchUpdate({
 86 |     requests: requests
 87 |   }, presentationId);
 88 |   const createShapeResponse = createTextboxWithTextResponse.replies[0].createShape;
 89 |   console.log('Created textbox with ID: %s', createShapeResponse.objectId);
 90 |   // [END slides_create_textbox_with_text]
 91 |   return createShapeResponse.objectId;
 92 | }
 93 | 
 94 | 
 95 | /**
 96 |  * Runs all tests.
 97 |  */
 98 | function RUN_ALL_TESTS() {
 99 |   itShouldCreateAPresentation();
100 |   itShouldCreateASlide();
101 |   itShouldCreateATextboxWithText();
102 |   itShouldFormatShapes();
103 |   itShouldReadPage();
104 | }
105 | 
106 | /**
107 |  * Creates a presentation.
108 |  */
109 | function itShouldCreateAPresentation() {
110 |   const presentationId = createPresentation();
111 |   expectToExist(presentationId);
112 |   deleteFileOnCleanup(presentationId);
113 | }
114 | 
115 | 
116 | /**
117 |  * Creates a new slide.
118 |  */
119 | function itShouldCreateASlide() {
120 |   console.log('> itShouldCreateASlide');
121 |   const presentationId = createPresentation();
122 |   const slideId=createSlide(presentationId);
123 |   expectToExist(slideId);
124 |   deleteFileOnCleanup(presentationId);
125 | }
126 | 
127 | /**
128 |  * Creates a slide with text.
129 |  */
130 | function itShouldCreateATextboxWithText() {
131 |   const presentationId = createPresentation();
132 |   const slide=createSlide(presentationId);
133 |   const pageId = slide.replies[0].createSlide.objectId;
134 |   const response = addTextBox(presentationId, pageId);
135 |   expectToEqual(2, response.replies.length);
136 |   const boxId = response.replies[0].createShape.objectId;
137 |   expectToExist(boxId);
138 |   deleteFileOnCleanup(presentationId);
139 | }
140 | 
141 | /**
142 |  * Test for Read Page.
143 |  */
144 | function itShouldReadPage() {
145 |   const presentationId = createPresentation();
146 |   const slide=createSlide(presentationId);
147 |   const pageId = slide.replies[0].createSlide.objectId;
148 |   const response = readPageElementIds(presentationId, pageId);
149 |   expectToEqual(3, response.pageElements.length);
150 |   deleteFileOnCleanup(presentationId);
151 | }
152 | /**
153 |  * Test for format shapes
154 |  */
155 | function itShouldFormatShapes() {
156 |   const presentationId = createPresentation();
157 |   const slide=createSlide(presentationId);
158 |   const pageId = slide.replies[0].createSlide.objectId;
159 |   const shapeId=addShape(presentationId, pageId);
160 |   const replies=formatShapeText(presentationId, shapeId);
161 |   expectToExist(replies);
162 |   deleteFileOnCleanup(presentationId);
163 | }
164 | /**
165 |  * Delete the file
166 |  * @param {string} id presentationId
167 |  */
168 | function deleteFileOnCleanup(id) {
169 |   Drive.Files.remove(id);
170 | }
171 | 


--------------------------------------------------------------------------------
/advanced/test_tagManager.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | // Before running tagManager tests create a test tagMAnager account
17 | // and replace the value below with its account path
18 | const path = 'accounts/6007387289';
19 | 
20 | /**
21 |  * Tests createContainerVersion function of tagManager.gs
22 |  * @param {string} accountPath Tag manager account's path
23 |  * @return {object} version The container version
24 |  */
25 | function itShouldCreateContainerVersion(accountPath) {
26 |   console.log('> itShouldCreateContainerVersion');
27 |   const version = createContainerVersion(accountPath);
28 |   return version;
29 | }
30 | 
31 | /**
32 |  * Tests publishVersionAndQuickPreviewDraft function of tagManager.gs
33 |  * @param {object} version tag managers container version
34 |  */
35 | function itShouldPublishVersionAndQuickPreviewDraft(version) {
36 |   console.log('> itShouldPublishVersionAndQuickPreviewDraft');
37 |   publishVersionAndQuickPreviewDraft(version);
38 | }
39 | 
40 | /**
41 |  * Tests createAndReauthorizeUserEnvironment function of tagManager.gs
42 |  * @param {object} version tag managers container version
43 |  */
44 | function itShouldCreateAndReauthorizeUserEnvironment(version) {
45 |   console.log('> itShouldCreateAndReauthorizeUserEnvironment');
46 |   createAndReauthorizeUserEnvironment(version);
47 | }
48 | 
49 | /**
50 |  * Tests logAllAccountUserPermissionsWithContainerAccess function of tagManager.gs
51 |  * @param {string} accountPath Tag manager account's path
52 |  */
53 | function itShouldLogAllAccountUserPermissionsWithContainerAccess(accountPath) {
54 |   console.log('> itShouldLogAllAccountUserPermissionsWithContainerAccess');
55 |   logAllAccountUserPermissionsWithContainerAccess(accountPath);
56 | }
57 | /**
58 |  * Runs all tests
59 |  */
60 | function RUN_ALL_TESTS() {
61 |   const version = itShouldCreateContainerVersion(path);
62 |   itShouldPublishVersionAndQuickPreviewDraft(version);
63 |   itShouldCreateAndReauthorizeUserEnvironment(version);
64 |   itShouldLogAllAccountUserPermissionsWithContainerAccess(path);
65 | }
66 | 


--------------------------------------------------------------------------------
/advanced/test_tasks.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | /**
18 |  * Test functions for tasks.gs
19 |  *
20 |  * Add task API services to test
21 |  */
22 | 
23 | /**
24 |  * tests listTaskLists of tasks.gs
25 |  */
26 | function itShouldListTaskLists() {
27 |   console.log('> itShouldListTaskLists');
28 |   listTaskLists();
29 | }
30 | 
31 | /**
32 |  * tests listTasks of tasks.gs
33 |  */
34 | function itShouldListTasks() {
35 |   console.log('> itShouldListTasks');
36 |   const taskId = Tasks.Tasklists.list().items[0].id;
37 |   listTasks(taskId);
38 | }
39 | 
40 | /**
41 |  * tests addTask of tasks.gs
42 |  */
43 | function itShouldAddTask() {
44 |   console.log('> itShouldAddTask');
45 |   const taskId = Tasks.Tasklists.list().items[0].id;
46 |   addTask(taskId);
47 | }
48 | 
49 | /**
50 |  * run all tests
51 |  */
52 | function RUN_ALL_TESTS() {
53 |   itShouldListTaskLists();
54 |   itShouldListTasks();
55 |   itShouldAddTask();
56 |   itShouldListTasks();
57 | }
58 | 


--------------------------------------------------------------------------------
/advanced/test_youtube.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | /**
18 |  * Run all tests
19 |  */
20 | function RUN_ALL_TESTS() {
21 |   console.log('> itShouldSearchByKeyword');
22 |   searchByKeyword();
23 |   console.log('> itShouldRetrieveMyUploads');
24 |   retrieveMyUploads();
25 |   console.log('> itShouldAddSubscription');
26 |   addSubscription();
27 |   console.log('> itShouldCreateSlides');
28 |   createSlides();
29 | }
30 | 


--------------------------------------------------------------------------------
/advanced/test_youtubeAnalytics.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | /**
18 |  * Tests createReport function of youtubeAnalytics.gs
19 |  */
20 | function itShouldCreateReport() {
21 |   console.log('> itShouldCreateReport');
22 |   createReport();
23 | }
24 | 
25 | /**
26 |  * Run all tests
27 |  */
28 | function RUN_ALL_TESTS() {
29 |   itShouldCreateReport();
30 | }
31 | 


--------------------------------------------------------------------------------
/advanced/test_youtubeContentId.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | /**
18 |  * Tests claimYourVideoWithMonetizePolicy function of youtubeContentId.gs
19 |  */
20 | function itShouldClaimVideoWithMonetizePolicy() {
21 |   console.log('> itShouldClaimVideoWithMonetizePolicy');
22 |   claimYourVideoWithMonetizePolicy();
23 | }
24 | 
25 | /**
26 |  * Tests updateAssetOwnership function of youtubeContentId.gs
27 |  */
28 | function itShouldUpdateAssetOwnership() {
29 |   console.log('> itShouldUpdateAssetOwnership');
30 |   updateAssetOwnership();
31 | }
32 | 
33 | /**
34 |  * Tests releaseClaim function of youtubeContentId.gs
35 |  */
36 | function itShouldReleaseClaim() {
37 |   console.log('> itShouldReleaseClaim');
38 |   releaseClaim();
39 | }
40 | 
41 | /**
42 |  * Run all tests
43 |  */
44 | function RUN_ALL_TESTS() {
45 |   itShouldClaimVideoWithMonetizePolicy();
46 |   itShouldUpdateAssetOwnership();
47 |   itShouldReleaseClaim();
48 | }
49 | 


--------------------------------------------------------------------------------
/advanced/youtube.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | // [START apps_script_youtube_search]
 17 | /**
 18 |  * Searches for videos about dogs, then logs the video IDs and title.
 19 |  * Note that this sample limits the results to 25. To return more
 20 |  * results, pass additional parameters as shown in the YouTube Data API docs.
 21 |  * @see https://developers.google.com/youtube/v3/docs/search/list
 22 |  */
 23 | function searchByKeyword() {
 24 |   try {
 25 |     const results = YouTube.Search.list('id,snippet', {
 26 |       q: 'dogs',
 27 |       maxResults: 25
 28 |     });
 29 |     if (results === null) {
 30 |       console.log('Unable to search videos');
 31 |       return;
 32 |     }
 33 |     results.items.forEach((item)=> {
 34 |       console.log('[%s] Title: %s', item.id.videoId, item.snippet.title);
 35 |     });
 36 |   } catch (err) {
 37 |     // TODO (developer) - Handle exceptions from Youtube API
 38 |     console.log('Failed with an error %s', err.message);
 39 |   }
 40 | }
 41 | // [END apps_script_youtube_search]
 42 | 
 43 | // [START apps_script_youtube_uploads]
 44 | /**
 45 |  * This function retrieves the user's uploaded videos by:
 46 |  * 1. Fetching the user's channel's.
 47 |  * 2. Fetching the user's "uploads" playlist.
 48 |  * 3. Iterating through this playlist and logs the video IDs and titles.
 49 |  * 4. If there is a next page of resuts, fetching it and returns to step 3.
 50 |  */
 51 | function retrieveMyUploads() {
 52 |   try {
 53 |     // @see https://developers.google.com/youtube/v3/docs/channels/list
 54 |     const results = YouTube.Channels.list('contentDetails', {
 55 |       mine: true
 56 |     });
 57 |     if (!results || results.items.length === 0) {
 58 |       console.log('No Channels found.');
 59 |       return;
 60 |     }
 61 |     for (let i = 0; i < results.items.length; i++) {
 62 |       const item = results.items[i];
 63 |       /** Get the channel ID - it's nested in contentDetails, as described in the
 64 |        * Channel resource: https://developers.google.com/youtube/v3/docs/channels.
 65 |        */
 66 |       const playlistId = item.contentDetails.relatedPlaylists.uploads;
 67 |       let nextPageToken = null;
 68 |       do {
 69 |         // @see: https://developers.google.com/youtube/v3/docs/playlistItems/list
 70 |         const playlistResponse = YouTube.PlaylistItems.list('snippet', {
 71 |           playlistId: playlistId,
 72 |           maxResults: 25,
 73 |           pageToken: nextPageToken
 74 |         });
 75 |         if (!playlistResponse || playlistResponse.items.length === 0) {
 76 |           console.log('No Playlist found.');
 77 |           break;
 78 |         }
 79 |         for (let j = 0; j < playlistResponse.items.length; j++) {
 80 |           const playlistItem = playlistResponse.items[j];
 81 |           console.log('[%s] Title: %s',
 82 |               playlistItem.snippet.resourceId.videoId,
 83 |               playlistItem.snippet.title);
 84 |         }
 85 |         nextPageToken = playlistResponse.nextPageToken;
 86 |       } while (nextPageToken);
 87 |     }
 88 |   } catch (err) {
 89 |     // TODO (developer) - Handle exception
 90 |     console.log('Failed with err %s', err.message);
 91 |   }
 92 | }
 93 | // [END apps_script_youtube_uploads]
 94 | 
 95 | // [START apps_script_youtube_subscription]
 96 | /**
 97 |  * This sample subscribes the user to the Google Developers channel on YouTube.
 98 |  * @see https://developers.google.com/youtube/v3/docs/subscriptions/insert
 99 |  */
100 | function addSubscription() {
101 |   // Replace this channel ID with the channel ID you want to subscribe to
102 |   const channelId = 'UC_x5XG1OV2P6uZZ5FSM9Ttw';
103 |   const resource = {
104 |     snippet: {
105 |       resourceId: {
106 |         kind: 'youtube#channel',
107 |         channelId: channelId
108 |       }
109 |     }
110 |   };
111 | 
112 |   try {
113 |     const response = YouTube.Subscriptions.insert(resource, 'snippet');
114 |     console.log('Added subscription for channel title : %s', response.snippet.title);
115 |   } catch (e) {
116 |     if (e.message.match('subscriptionDuplicate')) {
117 |       console.log('Cannot subscribe; already subscribed to channel: ' +
118 |         channelId);
119 |     } else {
120 |       // TODO (developer) - Handle exception
121 |       console.log('Error adding subscription: ' + e.message);
122 |     }
123 |   }
124 | }
125 | // [END apps_script_youtube_subscription]
126 | 
127 | // [START apps_script_youtube_slides]
128 | /**
129 |  * Creates a slide presentation with 10 videos from the YouTube search `YOUTUBE_QUERY`.
130 |  * The YouTube Advanced Service must be enabled before using this sample.
131 |  */
132 | const PRESENTATION_TITLE = 'San Francisco, CA';
133 | const YOUTUBE_QUERY = 'San Francisco, CA';
134 | 
135 | /**
136 |  * Gets a list of YouTube videos.
137 |  * @param {String} query - The query term to search for.
138 |  * @return {object[]} A list of objects with YouTube video data.
139 |  * @see https://developers.google.com/youtube/v3/docs/search/list
140 |  */
141 | function getYouTubeVideosJSON(query) {
142 |   const youTubeResults = YouTube.Search.list('id,snippet', {
143 |     q: query,
144 |     type: 'video',
145 |     maxResults: 10
146 |   });
147 | 
148 |   return youTubeResults.items.map((item)=> {
149 |     return {
150 |       url: 'https://youtu.be/' + item.id.videoId,
151 |       title: item.snippet.title,
152 |       thumbnailUrl: item.snippet.thumbnails.high.url
153 |     };
154 |   });
155 | }
156 | 
157 | /**
158 |  * Creates a presentation where each slide features a YouTube video.
159 |  * Logs out the URL of the presentation.
160 |  */
161 | function createSlides() {
162 |   try {
163 |     const youTubeVideos = getYouTubeVideosJSON(YOUTUBE_QUERY);
164 |     const presentation = SlidesApp.create(PRESENTATION_TITLE);
165 |     presentation.getSlides()[0].getPageElements()[0].asShape()
166 |         .getText().setText(PRESENTATION_TITLE);
167 |     if (!presentation) {
168 |       console.log('Unable to create presentation');
169 |       return;
170 |     }
171 |     // Add slides with videos and log the presentation URL to the user.
172 |     youTubeVideos.forEach((video)=> {
173 |       const slide = presentation.appendSlide();
174 |       slide.insertVideo(video.url,
175 |           0, 0, presentation.getPageWidth(), presentation.getPageHeight());
176 |     });
177 |     console.log(presentation.getUrl());
178 |   } catch (err) {
179 |     // TODO (developer) - Handle exception
180 |     console.log('Failed with error %s', err.message);
181 |   }
182 | }
183 | // [END apps_script_youtube_slides]
184 | 


--------------------------------------------------------------------------------
/advanced/youtubeAnalytics.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | // [START apps_script_youtube_report]
17 | /**
18 |  * Creates a spreadsheet containing daily view counts, watch-time metrics,
19 |  * and new-subscriber counts for a channel's videos.
20 |  */
21 | function createReport() {
22 |   // Retrieve info about the user's YouTube channel.
23 |   const channels = YouTube.Channels.list('id,contentDetails', {
24 |     mine: true
25 |   });
26 |   const channelId = channels.items[0].id;
27 | 
28 |   // Retrieve analytics report for the channel.
29 |   const oneMonthInMillis = 1000 * 60 * 60 * 24 * 30;
30 |   const today = new Date();
31 |   const lastMonth = new Date(today.getTime() - oneMonthInMillis);
32 | 
33 |   const metrics = [
34 |     'views',
35 |     'estimatedMinutesWatched',
36 |     'averageViewDuration',
37 |     'subscribersGained'
38 |   ];
39 |   const result = YouTubeAnalytics.Reports.query({
40 |     ids: 'channel==' + channelId,
41 |     startDate: formatDateString(lastMonth),
42 |     endDate: formatDateString(today),
43 |     metrics: metrics.join(','),
44 |     dimensions: 'day',
45 |     sort: 'day'
46 |   });
47 | 
48 |   if (!result.rows) {
49 |     console.log('No rows returned.');
50 |     return;
51 |   }
52 |   const spreadsheet = SpreadsheetApp.create('YouTube Analytics Report');
53 |   const sheet = spreadsheet.getActiveSheet();
54 | 
55 |   // Append the headers.
56 |   const headers = result.columnHeaders.map((columnHeader)=> {
57 |     return formatColumnName(columnHeader.name);
58 |   });
59 |   sheet.appendRow(headers);
60 | 
61 |   // Append the results.
62 |   sheet.getRange(2, 1, result.rows.length, headers.length)
63 |       .setValues(result.rows);
64 | 
65 |   console.log('Report spreadsheet created: %s',
66 |       spreadsheet.getUrl());
67 | }
68 | 
69 | /**
70 |  * Converts a Date object into a YYYY-MM-DD string.
71 |  * @param {Date} date The date to convert to a string.
72 |  * @return {string} The formatted date.
73 |  */
74 | function formatDateString(date) {
75 |   return Utilities.formatDate(date, Session.getScriptTimeZone(), 'yyyy-MM-dd');
76 | }
77 | 
78 | /**
79 |  * Formats a column name into a more human-friendly name.
80 |  * @param {string} columnName The unprocessed name of the column.
81 |  * @return {string} The formatted column name.
82 |  * @example "averageViewPercentage" becomes "Average View Percentage".
83 |  */
84 | function formatColumnName(columnName) {
85 |   let name = columnName.replace(/([a-z])([A-Z])/g, '$1 $2');
86 |   name = name.slice(0, 1).toUpperCase() + name.slice(1);
87 |   return name;
88 | }
89 | // [END apps_script_youtube_report]
90 | 


--------------------------------------------------------------------------------
/advanced/youtubeContentId.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | // [START apps_script_youtube_claim]
 17 | /**
 18 |  * This function creates a partner-uploaded claim on a video with the specified
 19 |  * asset and policy rules.
 20 |  * @see https://developers.google.com/youtube/partner/docs/v1/claims/insert
 21 |  */
 22 | function claimYourVideoWithMonetizePolicy() {
 23 |   // The ID of the content owner that you are acting on behalf of.
 24 |   const onBehalfOfContentOwner = 'replaceWithYourContentOwnerID';
 25 |   // A YouTube video ID to claim. In this example, the video must be uploaded
 26 |   // to one of your onBehalfOfContentOwner's linked channels.
 27 |   const videoId = 'replaceWithYourVideoID';
 28 |   const assetId = 'replaceWithYourAssetID';
 29 |   const claimToInsert = {
 30 |     'videoId': videoId,
 31 |     'assetId': assetId,
 32 |     'contentType': 'audiovisual',
 33 |     // Set the claim policy to monetize. You can also specify a policy ID here
 34 |     // instead of policy rules.
 35 |     // For details, please refer to the YouTube Content ID API Policies
 36 |     // documentation:
 37 |     // https://developers.google.com/youtube/partner/docs/v1/policies
 38 |     'policy': {'rules': [{'action': 'monetize'}]}
 39 |   };
 40 |   try {
 41 |     const claimInserted = YouTubeContentId.Claims.insert(claimToInsert,
 42 |         {'onBehalfOfContentOwner': onBehalfOfContentOwner});
 43 |     console.log('Claim created on video %s: %s', videoId, claimInserted);
 44 |   } catch (e) {
 45 |     console.log('Failed to create claim on video %s, error: %s',
 46 |         videoId, e.message);
 47 |   }
 48 | }
 49 | // [END apps_script_youtube_claim]
 50 | 
 51 | // [START apps_script_youtube_update_asset_ownership]
 52 | /**
 53 |  * This function updates your onBehalfOfContentOwner's ownership on an existing
 54 |  * asset.
 55 |  * @see https://developers.google.com/youtube/partner/docs/v1/ownership/update
 56 |  */
 57 | function updateAssetOwnership() {
 58 |   // The ID of the content owner that you are acting on behalf of.
 59 |   const onBehalfOfContentOwner = 'replaceWithYourContentOwnerID';
 60 |   // Replace values with your asset id
 61 |   const assetId = 'replaceWithYourAssetID';
 62 |   // The new ownership here would replace your existing ownership on the asset.
 63 |   const myAssetOwnership = {
 64 |     'general': [
 65 |       {
 66 |         'ratio': 100,
 67 |         'owner': onBehalfOfContentOwner,
 68 |         'type': 'include',
 69 |         'territories': [
 70 |           'US',
 71 |           'CA'
 72 |         ]
 73 |       }
 74 |     ]
 75 |   };
 76 |   try {
 77 |     const updatedOwnership = YouTubeContentId.Ownership.update(myAssetOwnership,
 78 |         assetId, {'onBehalfOfContentOwner': onBehalfOfContentOwner});
 79 |     console.log('Ownership updated on asset %s: %s', assetId, updatedOwnership);
 80 |   } catch (e) {
 81 |     console.log('Ownership update failed on asset %s, error: %s',
 82 |         assetId, e.message);
 83 |   }
 84 | }
 85 | // [END apps_script_youtube_update_asset_ownership]
 86 | 
 87 | // [START apps_script_youtube_release_claim]
 88 | /**
 89 |  * This function releases an existing claim your onBehalfOfContentOwner has
 90 |  * on a video.
 91 |  * @see https://developers.google.com/youtube/partner/docs/v1/claims/patch
 92 |  */
 93 | function releaseClaim() {
 94 |   // The ID of the content owner that you are acting on behalf of.
 95 |   const onBehalfOfContentOwner = 'replaceWithYourContentOwnerID';
 96 |   // The ID of the claim to be released.
 97 |   const claimId = 'replaceWithYourClaimID';
 98 |   // To release the claim, change the resource's status to inactive.
 99 |   const claimToBeReleased = {
100 |     'status': 'inactive'
101 |   };
102 |   try {
103 |     const claimReleased = YouTubeContentId.Claims.patch(claimToBeReleased,
104 |         claimId, {'onBehalfOfContentOwner': onBehalfOfContentOwner});
105 |     console.log('Claim %s was released: %s', claimId, claimReleased);
106 |   } catch (e) {
107 |     console.log('Failed to release claim %s, error: %s', claimId, e.message);
108 |   }
109 | }
110 | // [END apps_script_youtube_release_claim]
111 | 


--------------------------------------------------------------------------------
/ai/autosummarize/README.md:
--------------------------------------------------------------------------------
 1 | # Editor Add-on: Sheets - AutoSummarize AI
 2 | 
 3 | ## Project Description
 4 | 
 5 | Google Workspace Editor Add-on for Google Sheets that uses AI to create AI summaries in bulk for a listing of Google Docs and Slides files.
 6 | 
 7 | 
 8 | ## Prerequisites
 9 | 
10 | * Google Cloud Project (aka Standard Cloud Project for Apps Script) with billing enabled
11 | 
12 | ## Set up your environment
13 | 
14 | 
15 | 1. Create a Cloud Project
16 |    1. Enable the Vertex AI API
17 |    1. Create a Service Account and grant the role Service Account Token Creator Role
18 |    1. Create a private key with type JSON. This will download the JSON file for use in the next section.
19 | 1. Open an Apps Script Project bound to a Google Sheets Spreadsheet.
20 |    1. Rename the script to `Autosummarize AI`.
21 |    1. From Project Settings, change project to GCP project number of Cloud Project from step 1
22 |    1. Add a Script Property. Enter `model_id` as the property name and `gemini-pro-vision` as the value. 
23 |    1. Add a Script Property. Enter `project_location` as the property name and `us-central1` as the value. 
24 |    1. Add a Script Property. Enter `service_account_key` as the property name and paste the JSON key from the service account as the value. 
25 | 1. Add `OAuth2 v43` Apps Script Library using the ID `1B7FSrk5Zi6L1rSxxTDgDEUsPzlukDsi4KGuTMorsTQHhGBzBkMun4iDF`.
26 | 1. Enable the `Drive v3` advanced service.
27 | 1. Add the project code to Apps Script
28 | 
29 | 
30 | ## Usage
31 | 
32 | 1. Insert one or more links to any Google Doc or Slides files in a column.
33 | 1. Select one or more of the links in the sheet.
34 | 1. From the `Sheets` menu, select `Extensions > AutoSummarize AI > Open AutoSummarize AI`
35 | 1. Click Get summaries button.
36 | 


--------------------------------------------------------------------------------
/ai/autosummarize/gemini.js:
--------------------------------------------------------------------------------
  1 | /*
  2 | Copyright 2024 Google LLC
  3 | 
  4 | Licensed under the Apache License, Version 2.0 (the "License");
  5 | you may not use this file except in compliance with the License.
  6 | You may obtain a copy of the License at
  7 | 
  8 |     https://www.apache.org/licenses/LICENSE-2.0
  9 | 
 10 | Unless required by applicable law or agreed to in writing, software
 11 | distributed under the License is distributed on an "AS IS" BASIS,
 12 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 | See the License for the specific language governing permissions and
 14 | limitations under the License.
 15 | */
 16 | 
 17 | function scriptPropertyWithDefault(key, defaultValue = undefined) {
 18 |   const scriptProperties = PropertiesService.getScriptProperties();
 19 |   const value = scriptProperties.getProperty(key);
 20 |   if (value) {
 21 |     return value;
 22 |   }
 23 |   return defaultValue;
 24 | }
 25 | 
 26 | const VERTEX_AI_LOCATION = scriptPropertyWithDefault('project_location', 'us-central1');
 27 | const MODEL_ID = scriptPropertyWithDefault('model_id', 'gemini-pro-vision');
 28 | const SERVICE_ACCOUNT_KEY = scriptPropertyWithDefault('service_account_key');
 29 | 
 30 | 
 31 | /**
 32 |  * Packages prompt and necessary settings, then sends a request to
 33 |  * Vertex API. Returns the response as an JSON object extracted from the
 34 |  * Vertex API response object.
 35 |  *
 36 |  * @param {string} prompt The prompt to senb to Vertex AI API.
 37 |  * @param {string} options.temperature The temperature setting set by user.
 38 |  * @param {string} options.tokens The number of tokens to limit to the prompt.
 39 |  */
 40 | function getAiSummary(parts, options = {}) {
 41 |   options = Object.assign({}, { temperature: 0.1, tokens: 8192}, options ?? {})
 42 |   const request = {
 43 |     "contents": [
 44 |       {
 45 |         "role": "user",
 46 |         "parts": parts,
 47 |       }
 48 |     ],
 49 |     "generationConfig": {
 50 |       "temperature": options.temperature,
 51 |       "topK": 1,
 52 |       "topP": 1,
 53 |       "maxOutputTokens": options.tokens,
 54 |       "stopSequences": []
 55 |     },
 56 |   }
 57 | 
 58 |   const credentials = credentialsForVertexAI();
 59 | 
 60 |   const fetchOptions = {
 61 |     method: 'POST',
 62 |     headers: {
 63 |       'Authorization': `Bearer ${credentials.accessToken}`
 64 |     },
 65 |     contentType: 'application/json',
 66 |     muteHttpExceptions: true,
 67 |     payload: JSON.stringify(request)
 68 |   }
 69 | 
 70 |   const url = `https://${VERTEX_AI_LOCATION}-aiplatform.googleapis.com/v1/projects/${credentials.projectId}` +
 71 |     `/locations/${VERTEX_AI_LOCATION}/publishers/google/models/${MODEL_ID}:generateContent`
 72 |   const response = UrlFetchApp.fetch(url, fetchOptions);
 73 | 
 74 |   
 75 |   const responseCode = response.getResponseCode();
 76 |   if (responseCode >= 400) {
 77 |     throw new Error(`Unable to process file: Error code ${responseCode}`);
 78 |   }
 79 |   
 80 |   const responseText = response.getContentText();
 81 |   const parsedResponse = JSON.parse(responseText);
 82 |   if (parsedResponse.error) {
 83 |     throw new Error(parsedResponse.error.message);
 84 |   }
 85 |   const text = parsedResponse.candidates[0].content.parts[0].text
 86 |   return text
 87 | }
 88 | 
 89 | /**
 90 |  * Gets credentials required to call Vertex API using a Service Account.
 91 |  * Requires use of Service Account Key stored with project
 92 |  * 
 93 |  * @return {!Object} Containing the Cloud Project Id and the access token.
 94 |  */
 95 | function credentialsForVertexAI() {
 96 |   const credentials = SERVICE_ACCOUNT_KEY;
 97 |   if (!credentials) {
 98 |     throw new Error("service_account_key script property must be set.");
 99 |   }
100 | 
101 |   const parsedCredentials = JSON.parse(credentials);
102 |   const service = OAuth2.createService("Vertex")
103 |     .setTokenUrl('https://oauth2.googleapis.com/token')
104 |     .setPrivateKey(parsedCredentials['private_key'])
105 |     .setIssuer(parsedCredentials['client_email'])
106 |     .setPropertyStore(PropertiesService.getScriptProperties())
107 |     .setScope("https://www.googleapis.com/auth/cloud-platform");
108 |   return {
109 |     projectId: parsedCredentials['project_id'],
110 |     accessToken: service.getAccessToken(),
111 |   }
112 | }
113 | 


--------------------------------------------------------------------------------
/ai/autosummarize/main.js:
--------------------------------------------------------------------------------
  1 | /*
  2 | Copyright 2024 Google LLC
  3 | 
  4 | Licensed under the Apache License, Version 2.0 (the "License");
  5 | you may not use this file except in compliance with the License.
  6 | You may obtain a copy of the License at
  7 | 
  8 |     https://www.apache.org/licenses/LICENSE-2.0
  9 | 
 10 | Unless required by applicable law or agreed to in writing, software
 11 | distributed under the License is distributed on an "AS IS" BASIS,
 12 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 | See the License for the specific language governing permissions and
 14 | limitations under the License.
 15 | */
 16 | 
 17 | /**
 18 |  * Creates a menu entry in the Google Sheets Extensions menu when the document is opened.
 19 |  *
 20 |  * @param {object} e The event parameter for a simple onOpen trigger.
 21 |  */
 22 | function onOpen(e) {
 23 |   SpreadsheetApp.getUi().createAddonMenu()
 24 |     .addItem('📄 Open AutoSummarize AI', 'showSidebar')
 25 |     .addSeparator()
 26 |     .addItem('❎ Quick summary', 'doAutoSummarizeAI')
 27 |     .addItem('❌ Remove all summaries', 'removeAllSummaries')
 28 |     .addToUi();
 29 | }
 30 | 
 31 | /**
 32 |  * Runs when the add-on is installed; calls onOpen() to ensure menu creation and
 33 |  * any other initializion work is done immediately. This method is only used by 
 34 |  * the desktop add-on and is never called by the mobile version.
 35 |  *
 36 |  * @param {object} e The event parameter for a simple onInstall trigger. 
 37 |  */
 38 | function onInstall(e) {
 39 |   onOpen(e);
 40 | }
 41 | 
 42 | /**
 43 |  * Opens sidebar in Sheets with AutoSummarize AI interface.
 44 |  */
 45 | function showSidebar() {
 46 |   const ui = HtmlService.createHtmlOutputFromFile('sidebar')
 47 |     .setTitle('AutoSummarize AI');
 48 |   SpreadsheetApp.getUi().showSidebar(ui);
 49 | }
 50 | 
 51 | 
 52 | /**
 53 |  * Deletes all of the AutoSummarize AI created sheets 
 54 |  *  i.e. any sheets with prefix of 'AutoSummarize AI'
 55 |  */
 56 | function removeAllSummaries() {
 57 |   const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
 58 |   const allSheets = spreadsheet.getSheets();
 59 | 
 60 |   allSheets.forEach(function (sheet) {
 61 |     const sheetName = sheet.getName();
 62 |     // Check if the sheet name starts with "AutoSummarize AI"
 63 |     if (sheetName.startsWith("AutoSummarize AI")) {
 64 |       spreadsheet.deleteSheet(sheet)
 65 |     }
 66 |   });
 67 | }
 68 | 
 69 | /**
 70 |  * Wrapper function for add-on.
 71 |  */
 72 | function doAutoSummarizeAI(customPrompt1, customPrompt2, temperature = .1, tokens = 2048) {
 73 |   // Get selected cell values.
 74 |   console.log("Getting selection...");
 75 |   let selection = SpreadsheetApp.getSelection()
 76 |     .getActiveRange()
 77 |     .getRichTextValues()
 78 |     .map(value => {
 79 |       if (value[0].getLinkUrl()) {
 80 |         return value[0].getLinkUrl();
 81 |       }
 82 |       return value[0].getText();
 83 |   });
 84 | 
 85 |   // Get AI summary
 86 |   const data = summarizeFiles(selection, customPrompt1, customPrompt2, temperature, tokens);
 87 |   
 88 |   // Add and format a new new sheet.
 89 |   const now = new Date();
 90 |   const nowFormatted = Utilities.formatDate(now, now.getTimezoneOffset().toString(), "MM/dd HH:mm");
 91 |   let sheetName = `AutoSummarize AI (${nowFormatted})`;
 92 |   if (SpreadsheetApp.getActiveSpreadsheet().getSheetByName(sheetName)) {
 93 |     sheetName = `AutoSummarize AI (${nowFormatted}:${now.getSeconds()})`;
 94 |   }
 95 |   let aiSheet = SpreadsheetApp.getActiveSpreadsheet()
 96 |     .insertSheet()
 97 |     .setName(sheetName);
 98 |   let aiSheetHeaderStyle = SpreadsheetApp.newTextStyle()
 99 |     .setFontSize(12)
100 |     .setBold(true)
101 |     .setFontFamily("Google Sans")
102 |     .setForegroundColor("#ffffff")
103 |     .build();
104 |   let aiSheetValuesStyle = SpreadsheetApp.newTextStyle()
105 |     .setFontSize(10)
106 |     .setBold(false)
107 |     .setFontFamily("Google Sans")
108 |     .setForegroundColor("#000000")
109 |     .build();
110 |   aiSheet.getRange("A1:E1")
111 |     .setBackground("#434343")
112 |     .setTextStyle(aiSheetHeaderStyle)
113 |     .setValues([["Link", "Title",`Summary from Gemini AI [Temperature: ${temperature}]`, `Custom Prompt #1: ${customPrompt1}`, `Custom Prompt #2: ${customPrompt2}`]])
114 |     .setWrap(true);
115 |   aiSheet.setColumnWidths(1, 1, 100);
116 |   aiSheet.setColumnWidths(2, 1, 300);
117 |   aiSheet.setColumnWidths(3, 3, 300);
118 | 
119 |   // Copy results 
120 |   aiSheet
121 |     .getRange(`A2:E${data.length + 1}`)
122 |     .setValues(data);
123 | 
124 |   aiSheet.getRange(`A2:E${data.length + 1}`)
125 |     .setBackground("#ffffff")
126 |     .setTextStyle(aiSheetValuesStyle)
127 |     .setWrapStrategy(SpreadsheetApp.WrapStrategy.CLIP)
128 |     .setVerticalAlignment("top");
129 |   aiSheet.getRange(`C2:E${data.length + 1}`)
130 |     .setBackground("#efefef")
131 |     .setWrapStrategy(SpreadsheetApp.WrapStrategy.WRAP);
132 | 
133 |   aiSheet.deleteColumns(8, 19);
134 |   aiSheet.deleteRows(aiSheet.getLastRow() + 1, aiSheet.getMaxRows() - aiSheet.getLastRow());
135 | }
136 | 


--------------------------------------------------------------------------------
/ai/autosummarize/summarize.js:
--------------------------------------------------------------------------------
  1 | /*
  2 | Copyright 2024 Google LLC
  3 | 
  4 | Licensed under the Apache License, Version 2.0 (the "License");
  5 | you may not use this file except in compliance with the License.
  6 | You may obtain a copy of the License at
  7 | 
  8 |     https://www.apache.org/licenses/LICENSE-2.0
  9 | 
 10 | Unless required by applicable law or agreed to in writing, software
 11 | distributed under the License is distributed on an "AS IS" BASIS,
 12 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 | See the License for the specific language governing permissions and
 14 | limitations under the License.
 15 | */
 16 | 
 17 | /**
 18 |  * Exports a Google Doc/Sheet/Slide to the requested format.
 19 |  * 
 20 |  * @param {string} fileId - ID of file to export
 21 |  * @param {string} targetType - MIME type to export as
 22 |  * @return Base64 encoded file content
 23 |  */
 24 | function exportFile(fileId, targetType = "application/pdf") {
 25 |   const exportUrl = `https://www.googleapis.com/drive/v3/files/${fileId}/export?mimeType=${encodeURIComponent(targetType)}&supportsAllDrives=true`;
 26 | 
 27 |   const requestOptions = {
 28 |     headers: {
 29 |       Authorization: `Bearer ${ScriptApp.getOAuthToken()}`,
 30 |     },
 31 |   };
 32 |   const response = UrlFetchApp.fetch(exportUrl, requestOptions);
 33 |   const blob = response.getBlob();
 34 | 
 35 |   return Utilities.base64Encode(blob.getBytes());
 36 | }
 37 | 
 38 | /**
 39 |  * Downloads a binary file from Drive.
 40 |  * 
 41 |  * @param {string} fileId - ID of file to export
 42 |  * @param {string} targetType - MIME type to export as
 43 |  * @return Base64 encoded file content
 44 |  */
 45 | function downloadFile(fileId) {
 46 |   const exportUrl = `https://www.googleapis.com/drive/v3/files/${fileId}?alt=media&supportsAllDrives=true`;
 47 | 
 48 |   const requestOptions = {
 49 |     headers: {
 50 |       Authorization: `Bearer ${ScriptApp.getOAuthToken()}`,
 51 |     },
 52 |   };
 53 |   const response = UrlFetchApp.fetch(exportUrl, requestOptions);
 54 |   const blob = response.getBlob();
 55 | 
 56 |   return Utilities.base64Encode(blob.getBytes());
 57 | }
 58 | 
 59 | /**
 60 |  * Main function for AutoSummarize AI process.
 61 |  */
 62 | function summarizeFiles(sourceSheetLinks, customPrompt1, customPrompt2, temperature, tokens) {
 63 |   return sourceSheetLinks.map(function (fileUrl) {
 64 |     console.log("Processing:", fileUrl);
 65 | 
 66 |     let fileName = "";
 67 |     let summary = "";
 68 |     let customPrompt1Response = "";
 69 |     let customPrompt2Response = "";
 70 | 
 71 |     if (!fileUrl) {
 72 |       return ["", fileName, summary, customPrompt1Response, customPrompt2Response];
 73 |     }
 74 |     try {
 75 |       const promptParts = [
 76 |         {
 77 |           text: 'Summarize the following document.',
 78 |         },
 79 |         {
 80 |           text: 'Return your response as a single paragraph. Reformat any lists as part of the paragraph. Output only the single paragraph as plain text. Do not use more than 3 sentences. Do not use markdown.'
 81 |         }
 82 |       ]
 83 |       let fileIdMatchPattern = new RegExp("/d/(.*?)/", "gi");
 84 |       let fileId = fileIdMatchPattern.exec(fileUrl)[1];
 85 | 
 86 |       // Get file title and type.
 87 |       let currentFile = Drive.Files.get(fileId, { "supportsAllDrives": true });
 88 |       let fileMimeType = currentFile.mimeType;
 89 |       fileName = currentFile.name;
 90 | 
 91 |       console.log(`Processing ${fileName} (ID: ${fileId})...`);
 92 | 
 93 |       // Add file content to the prompt
 94 |       switch(fileMimeType) {
 95 |         case "application/vnd.google-apps.presentation":
 96 |         case "application/vnd.google-apps.document":
 97 |         case "application/vnd.google-apps.spreadsheet":
 98 |           promptParts.push({
 99 |             inlineData: {
100 |               mimeType: 'application/pdf',
101 |               data: exportFile(fileId, 'application/pdf'),
102 |             }
103 |           })
104 |           break;
105 |         case "application/pdf":
106 |         case "image/gif":
107 |         case "image/jpeg":
108 |         case "image/png":
109 |           promptParts.push({
110 |             inlineData: {
111 |               mimeType: fileMimeType,
112 |               data: downloadFile(fileId),
113 |             }
114 |           })
115 |           break;
116 |         default:
117 |           console.log(`Unsupported file type: ${fileMimeType}`);
118 |           return [fileUrl, fileName, summary, customPrompt1Response, customPrompt2Response];
119 |       }
120 | 
121 |       // Prompt for summary
122 |       let geminiOptions = {
123 |         temperature,
124 |         tokens,
125 |       };
126 |       summary = getAiSummary(promptParts, geminiOptions);
127 | 
128 |       // If any custom prompts, request those too
129 |       if (customPrompt1) {
130 |         promptParts[0].text = customPrompt1;
131 |         customPrompt1Response = getAiSummary(promptParts, geminiOptions);        
132 |       }
133 |       if (customPrompt2) {
134 |         promptParts[0].text = customPrompt2;
135 |         customPrompt2Response = getAiSummary(promptParts, geminiOptions);        
136 |       }
137 | 
138 |       return [fileUrl, fileName, summary, customPrompt1Response, customPrompt2Response];
139 |     } catch (e) {
140 |       // Add error row values if anything else goes wrong.
141 |       console.log(e);
142 |       return [fileUrl, fileName, "Something went wrong. Make sure you have access to this row's link.", "", ""];
143 |     }
144 |   });
145 | }


--------------------------------------------------------------------------------
/ai/custom-func-ai-studio/Code.js:
--------------------------------------------------------------------------------
 1 | /*
 2 | Copyright 2024 Google LLC
 3 | 
 4 | Licensed under the Apache License, Version 2.0 (the "License");
 5 | you may not use this file except in compliance with the License.
 6 | You may obtain a copy of the License at
 7 | 
 8 |     https://www.apache.org/licenses/LICENSE-2.0
 9 | 
10 | Unless required by applicable law or agreed to in writing, software
11 | distributed under the License is distributed on an "AS IS" BASIS,
12 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 | See the License for the specific language governing permissions and
14 | limitations under the License.
15 | */
16 | 
17 | 
18 | /**
19 |  * Passes a prompt and a data range to Gemini AI.
20 |  * 
21 |  * @param {range} range The range of cells.
22 |  * @param {string} prompt The text prompt as a string or single cell reference.
23 |  * @return The Gemini response.
24 |  * @customfunction
25 |  */
26 | function gemini(range,prompt) {
27 |   prompt = `For the range of cells ${range}, ${prompt}`
28 |   return getAiSummary(prompt);
29 | }


--------------------------------------------------------------------------------
/ai/custom-func-ai-studio/README.md:
--------------------------------------------------------------------------------
 1 | # Google Sheets Custom Function with AI Studio
 2 | 
 3 | ## Project Description
 4 | 
 5 | Google Sheets Custom Function to be used as a bound Apps Script project with a Google Sheets Spreadsheet
 6 | 
 7 | ## Prerequisites
 8 | 
 9 | * Google Cloud Project (aka Standard Cloud Project for Apps Script) with billing enabled
10 | 
11 | ## Set up your environment
12 | 
13 | 1. Create a Cloud Project
14 |    1. Enable Generative Language API - (may skip as is automatically done in step 2)
15 | 1. Create a Google Gemini API Key 
16 |    1. Navigate to https://aistudio.google.com/app/apikey 
17 |    1. Create API key for existing project from step 1
18 |    1. Copy the generated key for use in the next step.
19 | 1. Open an Apps Script Project bound to a Google Sheets Spreadsheet
20 |    1. From Project Settings, change project to GCP project number of Cloud Project from step 1
21 |    1. Add a Script Property. Enter `api_key` as the property name and use the Gemini API Key as the value 
22 | 1. Add the project code to Apps Script
23 | 
24 | ## Usage
25 | 
26 | Insert a custom function in Google Sheets, passing a range and a prompt as parameters
27 | 
28 | Example: 
29 | 
30 | ```
31 | =gemini(A1:A10,"Extract colors from the product description")
32 | ```


--------------------------------------------------------------------------------
/ai/custom-func-ai-studio/gemini.js:
--------------------------------------------------------------------------------
 1 | /*
 2 | Copyright 2024 Google LLC
 3 | 
 4 | Licensed under the Apache License, Version 2.0 (the "License");
 5 | you may not use this file except in compliance with the License.
 6 | You may obtain a copy of the License at
 7 | 
 8 |     https://www.apache.org/licenses/LICENSE-2.0
 9 | 
10 | Unless required by applicable law or agreed to in writing, software
11 | distributed under the License is distributed on an "AS IS" BASIS,
12 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 | See the License for the specific language governing permissions and
14 | limitations under the License.
15 | */
16 | 
17 | /**
18 |  * Packages prompt and necessary settings, then sends a request to the
19 |  * Generative Language API. Returns the text string response, extracted from the
20 |  * Gemini AI response object.
21 |  *
22 |  * @param {string} prompt String representing the prompt for Gemini AI call.
23 |  * @return {string} Result of Gemini AI in string format.
24 |  */
25 | function getAiSummary(prompt) {
26 |   const data = {
27 |     "contents": [{
28 |       "parts": [{
29 |         "text": prompt
30 |       }]
31 |     }],
32 |     "generationConfig": {
33 |       "temperature": 0.2,
34 |       "topK": 1,
35 |       "topP": 1,
36 |       "maxOutputTokens": 2048,
37 |       "stopSequences": []
38 |     },
39 |     "safetySettings": [
40 |       {
41 |         "category": "HARM_CATEGORY_HARASSMENT",
42 |         "threshold": "BLOCK_NONE"
43 |       },
44 |       {
45 |         "category": "HARM_CATEGORY_HATE_SPEECH",
46 |         "threshold": "BLOCK_NONE"
47 |       },
48 |       {
49 |         "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
50 |         "threshold": "BLOCK_NONE"
51 |       },
52 |       {
53 |         "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
54 |         "threshold": "BLOCK_NONE"
55 |       }
56 |     ]
57 |   };
58 |   const options = {
59 |     'method': 'post',
60 |     'contentType': 'application/json',
61 |     'payload': JSON.stringify(data) // Convert the JavaScript object to a JSON string.
62 |   };
63 | 
64 |   const apiKey = PropertiesService.getScriptProperties().getProperty('api_key');
65 |   let response = UrlFetchApp.fetch('https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=' + apiKey, options);
66 | 
67 |   const payload = JSON.parse(response.getContentText());
68 |   const text = payload.candidates[0].content.parts[0].text;
69 | 
70 |   return text;
71 | 
72 | }


--------------------------------------------------------------------------------
/ai/custom_func_vertex/Code.js:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Passes a prompt and a data range to Gemini AI.
 3 |  * 
 4 |  * @param {range} range The range of cells.
 5 |  * @param {string} prompt The text prompt as a string or single cell reference.
 6 |  * @return The Gemini response.
 7 |  * @customfunction
 8 |  */
 9 | function gemini(range,prompt) {
10 |   prompt = `For the table of data: ${range}, Answer the following: ${prompt}. Do not use formatting. Remove all markdown.`
11 |   return getAiSummary(prompt);
12 | }


--------------------------------------------------------------------------------
/ai/custom_func_vertex/README.md:
--------------------------------------------------------------------------------
 1 | # Google Sheets Custom Function with AI Studio
 2 | 
 3 | ## Project Description
 4 | 
 5 | Google Sheets Custom Function to be used as a bound Apps Script project with a Google Sheets Spreadsheet.
 6 | 
 7 | ## Prerequisites
 8 | 
 9 | * Google Cloud Project (aka Standard Cloud Project for Apps Script) with billing enabled
10 | 
11 | ## Set up your environment
12 | 
13 | 1. Create a Cloud Project
14 |    1. Enable the Vertex AI API
15 |    1. Create a Service Account and grant the role `Vertex AI User`
16 |    1. Create a private key with type JSON. This will download the JSON file for use in the next section.
17 | 1. Open an Apps Script Project bound to a Google Sheets Spreadsheet
18 |    1. From Project Settings, change project to GCP project number of Cloud Project from step 1
19 |    1. Add a Script Property. Enter `model_id` as the property name and `gemini-pro` as the value. 
20 |    1. Add a Script Property. Enter `project_location` as the property name and `us-central1` as the value. 
21 |    1. Add a Script Property. Enter `service_account_key` as the property name and paste the JSON key from the service account as the value. 
22 | 1. Add OAuth2 v43 Apps Script Library using the ID `1B7FSrk5Zi6L1rSxxTDgDEUsPzlukDsi4KGuTMorsTQHhGBzBkMun4iDF`.
23 | 1. Add the project code to Apps Script
24 | 
25 | ## Usage
26 | 
27 | Insert a custom function in Google Sheets, passing a range and a prompt as parameters
28 | 
29 | Example: 
30 | 
31 | ```
32 | =gemini(A1:A10,"Extract colors from the product description")
33 | ```
34 | 


--------------------------------------------------------------------------------
/ai/custom_func_vertex/aiVertex.js:
--------------------------------------------------------------------------------
  1 | /*
  2 | Copyright 2024 Google LLC
  3 | 
  4 | Licensed under the Apache License, Version 2.0 (the "License");
  5 | you may not use this file except in compliance with the License.
  6 | You may obtain a copy of the License at
  7 | 
  8 |     https://www.apache.org/licenses/LICENSE-2.0
  9 | 
 10 | Unless required by applicable law or agreed to in writing, software
 11 | distributed under the License is distributed on an "AS IS" BASIS,
 12 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 | See the License for the specific language governing permissions and
 14 | limitations under the License.
 15 | */
 16 | 
 17 | const VERTEX_AI_LOCATION = PropertiesService.getScriptProperties().getProperty('project_location');
 18 | const MODEL_ID = PropertiesService.getScriptProperties().getProperty('model_id');
 19 | const SERVICE_ACCOUNT_KEY = PropertiesService.getScriptProperties().getProperty('service_account_key');
 20 | 
 21 | /**
 22 |  * Packages prompt and necessary settings, then sends a request to
 23 |  * Vertex API. Returns the response as an JSON object extracted from the
 24 |  * Vertex API response object.
 25 |  *
 26 |  * @param prompt - String representing your prompt for Gemini AI.
 27 |  */
 28 | function getAiSummary(prompt) {
 29 | 
 30 |   const request = {
 31 |     "contents": [{
 32 |       "role": "user",
 33 |       "parts": [{
 34 |         "text": prompt
 35 |       }]
 36 |     }],
 37 |     "generationConfig": {
 38 |       "temperature": 0.1,
 39 |       "maxOutputTokens": 2048,
 40 |     },
 41 |     "safetySettings": [
 42 |       {
 43 |         "category": "HARM_CATEGORY_HARASSMENT",
 44 |         "threshold": "BLOCK_NONE"
 45 |       },
 46 |       {
 47 |         "category": "HARM_CATEGORY_HATE_SPEECH",
 48 |         "threshold": "BLOCK_NONE"
 49 |       },
 50 |       {
 51 |         "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
 52 |         "threshold": "BLOCK_NONE"
 53 |       },
 54 |       {
 55 |         "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
 56 |         "threshold": "BLOCK_NONE"
 57 |       }
 58 |     ]
 59 |   };
 60 | 
 61 |   const credentials = credentialsForVertexAI();
 62 | 
 63 |   const fetchOptions = {
 64 |     method: 'post',
 65 |     headers: {
 66 |       'Authorization': `Bearer ${credentials.accessToken}`
 67 |     },
 68 |     contentType: 'application/json',
 69 |     muteHttpExceptions: true,
 70 |     payload: JSON.stringify(request)
 71 |   }
 72 | 
 73 |   const url = `https://${VERTEX_AI_LOCATION}-aiplatform.googleapis.com/v1/projects/${credentials.projectId}/`
 74 |   + `locations/${VERTEX_AI_LOCATION}/publishers/google/models/${MODEL_ID}:generateContent`
 75 | 
 76 |   const response = UrlFetchApp.fetch(url, fetchOptions);
 77 | 
 78 |   const payload = JSON.parse(response);
 79 |   const text = payload.candidates[0].content.parts[0].text
 80 | 
 81 |   return text
 82 | }
 83 | 
 84 | /**
 85 |  * Gets credentials required to call Vertex API using a Service Account.
 86 |  * Requires use of Service Account Key stored with project
 87 |  * 
 88 |  * @return {!Object} Containing the Cloud Project Id and the access token.
 89 |  */
 90 | function credentialsForVertexAI() {
 91 |   const credentials = SERVICE_ACCOUNT_KEY;
 92 |   if (!credentials) {
 93 |     throw new Error("service_account_key script property must be set.");
 94 |   }
 95 | 
 96 |   const parsedCredentials = JSON.parse(credentials);
 97 | 
 98 |   const service = OAuth2.createService("Vertex")
 99 |     .setTokenUrl('https://oauth2.googleapis.com/token')
100 |     .setPrivateKey(parsedCredentials['private_key'])
101 |     .setIssuer(parsedCredentials['client_email'])
102 |     .setPropertyStore(PropertiesService.getScriptProperties())
103 |     .setScope("https://www.googleapis.com/auth/cloud-platform");
104 |   return {
105 |     projectId: parsedCredentials['project_id'],
106 |     accessToken: service.getAccessToken(),
107 |   }
108 | }
109 | 


--------------------------------------------------------------------------------
/ai/devdocs-link-preview/Cards.js:
--------------------------------------------------------------------------------
  1 | /*
  2 | Copyright 2024 Google LLC
  3 | 
  4 | Licensed under the Apache License, Version 2.0 (the "License");
  5 | you may not use this file except in compliance with the License.
  6 | You may obtain a copy of the License at
  7 | 
  8 |     https://www.apache.org/licenses/LICENSE-2.0
  9 | 
 10 | Unless required by applicable law or agreed to in writing, software
 11 | distributed under the License is distributed on an "AS IS" BASIS,
 12 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 | See the License for the specific language governing permissions and
 14 | limitations under the License.
 15 | */
 16 | 
 17 | /**
 18 |  * Creates the Card to display documentation summary to user.
 19 |  * 
 20 |  * @param {string} pageTitle Title of the page/card section.
 21 |  * @param {string} summary Page summary to display.
 22 |  * @return {!Card}
 23 |  */
 24 | function buildCard(pageTitle, summary, showRating = true) {
 25 | 
 26 |   let cardHeader = CardService.newCardHeader()
 27 |     .setTitle('About this page');
 28 | 
 29 |   let summarySection = CardService.newCardSection()
 30 |     .addWidget(CardService.newTextParagraph().setText(summary));
 31 | 
 32 |   let feedbackSection = CardService.newCardSection()
 33 |     .setHeader('Rate this summary');
 34 | 
 35 |   if (showRating) {
 36 |     let thumbsUpAction = CardService.newAction()
 37 |       .setFunctionName('onRatingClicked')
 38 |       .setParameters({
 39 |         'key': 'upVotes',
 40 |         'title': pageTitle,
 41 |         'pageSummary': summary
 42 |       });
 43 | 
 44 |     let thumbsDownAction = CardService.newAction()
 45 |       .setFunctionName('onRatingClicked')
 46 |       .setParameters({
 47 |         'key': 'downVotes',
 48 |         'title': pageTitle,
 49 |         'pageSummary': summary
 50 |       });
 51 | 
 52 |     let thumbsUpButton = CardService.newImageButton()
 53 |       .setIconUrl(
 54 |         'https://fonts.gstatic.com/s/i/googlematerialicons/thumb_up_alt/v11/gm_blue-24dp/1x/gm_thumb_up_alt_gm_blue_24dp.png'
 55 |       )
 56 |       .setAltText('Looks good')
 57 |       .setOnClickAction(thumbsUpAction);
 58 | 
 59 |     let thumbsDownButton = CardService.newImageButton()
 60 |       .setIconUrl(
 61 |         'https://fonts.gstatic.com/s/i/googlematerialicons/thumb_down_alt/v11/gm_blue-24dp/1x/gm_thumb_down_alt_gm_blue_24dp.png'
 62 |       )
 63 |       .setAltText('Not great')
 64 |       .setOnClickAction(thumbsDownAction);
 65 | 
 66 |     let ratingButtons = CardService.newButtonSet()
 67 |       .addButton(thumbsUpButton)
 68 |       .addButton(thumbsDownButton);
 69 |     feedbackSection.addWidget(ratingButtons)
 70 |   } else {
 71 |     feedbackSection.addWidget(CardService.newTextParagraph().setText("Thank you for your feedback."))
 72 |   }
 73 | 
 74 | 
 75 |   let card = CardService.newCardBuilder()
 76 |     .setHeader(cardHeader)
 77 |     .addSection(summarySection)
 78 |     .addSection(feedbackSection)
 79 |     .build();
 80 |   return card;
 81 | }
 82 | 
 83 | /**
 84 |  * Creates a Card to let user know an error has occurred.
 85 |  * 
 86 |  * @return {!Card}
 87 |  */
 88 | function buildErrorCard() {
 89 |   let cardHeader = CardService.newCardHeader()
 90 |     .setTitle('Uh oh! Something went wrong.')
 91 | 
 92 |   let errorMessage = CardService.newTextParagraph()
 93 |     .setText(
 94 |       'It looks like Gemini got stage fright.');
 95 | 
 96 |   let tryAgainButton = CardService.newTextButton()
 97 |     .setText('Try again')
 98 |     .setTextButtonStyle(CardService.TextButtonStyle.TEXT)
 99 |     .setOnClickAction( CardService.newAction()
100 |     .setFunctionName('onLinkPreview'));
101 | 
102 |   let buttonList = CardService.newButtonSet()
103 |     .addButton(tryAgainButton);
104 | 
105 |   let mainSection = CardService.newCardSection()
106 |     .addWidget(errorMessage)
107 |     .addWidget(buttonList);
108 | 
109 |   let errorCard = CardService.newCardBuilder()
110 |     .setHeader(cardHeader)
111 |     .addSection(mainSection)
112 |     .build();
113 | 
114 |   return errorCard;
115 | }


--------------------------------------------------------------------------------
/ai/devdocs-link-preview/Helpers.js:
--------------------------------------------------------------------------------
 1 | /*
 2 | Copyright 2024 Google LLC
 3 | 
 4 | Licensed under the Apache License, Version 2.0 (the "License");
 5 | you may not use this file except in compliance with the License.
 6 | You may obtain a copy of the License at
 7 | 
 8 |     https://www.apache.org/licenses/LICENSE-2.0
 9 | 
10 | Unless required by applicable law or agreed to in writing, software
11 | distributed under the License is distributed on an "AS IS" BASIS,
12 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 | See the License for the specific language governing permissions and
14 | limitations under the License.
15 | */
16 | 
17 | /**
18 |  * Wraper around script properties to allow for a default value if unset.
19 |  */
20 | function scriptPropertyWithDefault(key, defaultValue = undefined) {
21 |   const scriptProperties = PropertiesService.getScriptProperties();
22 |   const value = scriptProperties.getProperty(key);
23 |   if (value) {
24 |     return value;
25 |   }
26 |   return defaultValue;
27 | }
28 | 


--------------------------------------------------------------------------------
/ai/devdocs-link-preview/Main.js:
--------------------------------------------------------------------------------
 1 | /*
 2 | Copyright 2024 Google LLC
 3 | 
 4 | Licensed under the Apache License, Version 2.0 (the "License");
 5 | you may not use this file except in compliance with the License.
 6 | You may obtain a copy of the License at
 7 | 
 8 |     https://www.apache.org/licenses/LICENSE-2.0
 9 | 
10 | Unless required by applicable law or agreed to in writing, software
11 | distributed under the License is distributed on an "AS IS" BASIS,
12 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 | See the License for the specific language governing permissions and
14 | limitations under the License.
15 | */
16 | 
17 | /**
18 |  * Creates a link preview card for Google developer documentation links.
19 |  * 
20 |  * @param {!Object} event
21 |  * @return {!Card}
22 |  */
23 | function onLinkPreview(event) {
24 |   const hostApp = event.hostApp;
25 |   if (!event[hostApp].matchedUrl.url) {
26 |     return;
27 |   }
28 |   const url = event[hostApp].matchedUrl.url;
29 |   try {
30 |     const info = getPageSummary(url);
31 |     const card = buildCard(info.title, info.summary);
32 |     const linkPreview = CardService.newLinkPreview()
33 |       .setPreviewCard(card)
34 |       .setTitle(info.title)
35 |       .setLinkPreviewTitle(info.title);
36 |     return linkPreview;
37 |   } catch (error) {
38 |     // Log the error  
39 |     console.error("Error occurred:", error);
40 |     const errorCard = buildErrorCard();
41 |     return CardService.newActionResponseBuilder()
42 |     .setNavigation(CardService.newNavigation().updateCard(errorCard))
43 |     .build();
44 |   }
45 | }
46 | 
47 | /**
48 |  * Action handler for a good rating .
49 |  * 
50 |  * @param {!Object} e The event passed from click action.
51 |  * @return {!Card}
52 |  */
53 | function onRatingClicked(e) {
54 |   let key = e.parameters.key;
55 |   let title = e.parameters.title;
56 |   let pageSummary = e.parameters.pageSummary;
57 | 
58 |   const properties = PropertiesService.getScriptProperties();
59 |   let rating = Number(properties.getProperty(key) ?? 0);
60 |   properties.setProperty(key, ++rating);
61 | 
62 |   let card = buildCard(title, pageSummary, false);
63 |   let linkPreview = CardService.newLinkPreview()
64 |     .setPreviewCard(card)
65 |     .setTitle(title)
66 |     .setLinkPreviewTitle(title);
67 | 
68 |   return linkPreview;
69 | }
70 | 


--------------------------------------------------------------------------------
/ai/devdocs-link-preview/README.md:
--------------------------------------------------------------------------------
 1 | # Google Workspace Add-on - Developer Docs Link previews
 2 | 
 3 | 
 4 | ## Project Description
 5 | 
 6 | A Google Workspace Add-on that creates custom link previews for pages on the Google developer documentation site. The link preview uses AI to generate page summaries.
 7 | 
 8 | ## Prerequisites
 9 | 
10 | * Google Cloud Project (aka Standard Cloud Project for Apps Script) with billing enabled
11 | 
12 | ## Set up your environment
13 | 
14 | 1. Create a Cloud Project
15 |    1. Enable the Vertex AI API
16 |    1. Create a Service Account and grant the role `Vertex AI User`
17 |    1. Create a private key with type JSON. This will download the JSON file for use in the next section.
18 | 1. Open a stand alone Apps Script Project 
19 |    1. From Project Settings, change project to GCP project number of Cloud Project from step 1
20 |    1. Add a Script Property. Enter `service_account_key` as the property name and paste the JSON key from the service account as the value. 
21 | 1. Add OAuth2 v43 Apps Script Library using the ID `1B7FSrk5Zi6L1rSxxTDgDEUsPzlukDsi4KGuTMorsTQHhGBzBkMun4iDF`.
22 | 1. Add the project code to Apps Script
23 | 
24 | 


--------------------------------------------------------------------------------
/ai/devdocs-link-preview/Vertex.js:
--------------------------------------------------------------------------------
  1 | /*
  2 | Copyright 2024 Google LLC
  3 | 
  4 | Licensed under the Apache License, Version 2.0 (the "License");
  5 | you may not use this file except in compliance with the License.
  6 | You may obtain a copy of the License at
  7 | 
  8 |     https://www.apache.org/licenses/LICENSE-2.0
  9 | 
 10 | Unless required by applicable law or agreed to in writing, software
 11 | distributed under the License is distributed on an "AS IS" BASIS,
 12 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 | See the License for the specific language governing permissions and
 14 | limitations under the License.
 15 | */
 16 | 
 17 | const VERTEX_AI_LOCATION = scriptPropertyWithDefault('project_location', 'us-central1');
 18 | const MODEL_ID = scriptPropertyWithDefault('model_id', 'gemini-1.5-flash-preview-0514');
 19 | const SERVICE_ACCOUNT_KEY = scriptPropertyWithDefault('service_account_key');
 20 | 
 21 | /**
 22 |  * Invokes Gemini to extrac the title and summary of a given URL. Responses may be cached.
 23 |  */
 24 | function getPageSummary(targetUrl) {
 25 |   let cachedResponse = CacheService.getScriptCache().get(targetUrl);
 26 |   if (cachedResponse) {
 27 |     return JSON.parse(cachedResponse);
 28 |   }
 29 | 
 30 |   const request = {
 31 |     contents: [
 32 |       {
 33 |         role: "user",
 34 |         parts: [
 35 |           {
 36 |             text: targetUrl
 37 |           }
 38 |         ]
 39 |       }
 40 |     ],
 41 |     systemInstruction: {
 42 |       parts: [
 43 |         {
 44 |           text: `You are a Google Developers documentation expert. In 2-3 sentences, create a short description of what the following web page is about based on the snippet of HTML from the page. Make the summary scannable. Don't repeat the URL in the description. Use proper grammar. Make the description easy to read. Only include the description in your response, exclude any conversational parts of the response. Make sure you use the most recent Google product names. Output the response as JSON with the page title as "title" and the summary as "summary"`
 45 |         }
 46 |       ]
 47 |     },
 48 |     generationConfig: {
 49 |       temperature: .2,
 50 |       candidateCount: 1,
 51 |       maxOutputTokens: 2048
 52 |     }
 53 |   }
 54 | 
 55 |   const credentials = credentialsForVertexAI();
 56 | 
 57 |   const fetchOptions = {
 58 |     method: 'POST',
 59 |     headers: {
 60 |       'Authorization': `Bearer ${credentials.accessToken}`
 61 |     },
 62 |     contentType: 'application/json',
 63 |     muteHttpExceptions: true,
 64 |     payload: JSON.stringify(request)
 65 |   }
 66 | 
 67 |   const url = `https://${VERTEX_AI_LOCATION}-aiplatform.googleapis.com/v1/projects/${credentials.projectId}` +
 68 |     `/locations/${VERTEX_AI_LOCATION}/publishers/google/models/${MODEL_ID}:generateContent`
 69 |   const response = UrlFetchApp.fetch(url, fetchOptions);
 70 | 
 71 |   const responseText = response.getContentText();
 72 |   console.log(responseText);
 73 |   if (response.getResponseCode() >= 400) {
 74 |     console.log(responseText);
 75 |     throw new Error("Unable to generate preview,");
 76 |   }
 77 |   const parsedResponse = JSON.parse(responseText);
 78 |   let modelResponse = parsedResponse.candidates[0].content.parts[0].text;
 79 |   const jsonMatch = modelResponse.match(/(?<=^`{3}json$)([\s\S]*)(?=^`{3}$)/gm);
 80 |   if (!jsonMatch) {
 81 |     throw new Error("Unable to generate preview,");
 82 |   }
 83 |   CacheService.getScriptCache().put(targetUrl, jsonMatch);
 84 |   return JSON.parse(jsonMatch[0]);
 85 | }
 86 | 
 87 | 
 88 | 
 89 | /**
 90 |  * Gets credentials required to call Vertex API using a Service Account.
 91 |  * Requires use of Service Account Key stored with project
 92 |  * 
 93 |  * @return {!Object} Containing the Cloud Project Id and the access token.
 94 |  */
 95 | function credentialsForVertexAI() {
 96 |   const credentials = SERVICE_ACCOUNT_KEY;
 97 |   if (!credentials) {
 98 |     throw new Error("service_account_key script property must be set.");
 99 |   }
100 | 
101 |   const parsedCredentials = JSON.parse(credentials);
102 |   const service = OAuth2.createService("Vertex")
103 |     .setTokenUrl('https://oauth2.googleapis.com/token')
104 |     .setPrivateKey(parsedCredentials['private_key'])
105 |     .setIssuer(parsedCredentials['client_email'])
106 |     .setPropertyStore(PropertiesService.getScriptProperties())
107 |     .setScope("https://www.googleapis.com/auth/cloud-platform");
108 |   return {
109 |     projectId: parsedCredentials['project_id'],
110 |     accessToken: service.getAccessToken(),
111 |   }
112 | }
113 | 


--------------------------------------------------------------------------------
/ai/drive-rename/README.md:
--------------------------------------------------------------------------------
 1 | # Google Workspace Add-on Drive - Name with Intelligence
 2 | 
 3 | ## Project Description
 4 | 
 5 | Google Workspace Add-on for Google Drive, which uses AI to recommend new names for the selected Doc in Google Drive by passing the body of the document within the AI prompt for context.
 6 | 
 7 | ## Prerequisites
 8 | 
 9 | * Google Cloud Project (aka Standard Cloud Project for Apps Script) with billing enabled
10 | 
11 | ## Set up your environment
12 | 
13 | 1. Create a Cloud Project
14 |    1. Enable the Vertex AI API
15 |    1. Enable Google Drive API
16 |    1. Configure OAuth consent screen
17 |    1. Create a Service Account and grant the role Service `Vertex AI User` role
18 |    1. Create a private key with type JSON. This will download the JSON file for use in the next section.
19 | 1. Open a standalone Apps Script project.
20 |    1. From Project Settings, change project to GCP project number of Cloud Project from step 1
21 |    1. Add a Script Property. Enter `model_id` as the property name and `gemini-pro` as the value. 
22 |    1. Add a Script Property. Enter `project_location` as the property name and `us-central1` as the value. 
23 |    1. Add a Script Property. Enter `service_account_key` as the property name and paste the JSON key from the service account as the value. 
24 | 1. Add `Google Drive API v3` advanced service.
25 | 1. Add OAuth2 v43 Apps Script Library using the ID `1B7FSrk5Zi6L1rSxxTDgDEUsPzlukDsi4KGuTMorsTQHhGBzBkMun4iDF`.
26 | 1. Add the project code to Apps Script
27 | 
28 | 
29 | 


--------------------------------------------------------------------------------
/ai/drive-rename/ai.js:
--------------------------------------------------------------------------------
  1 | /*
  2 | Copyright 2024 Google LLC
  3 | 
  4 | Licensed under the Apache License, Version 2.0 (the "License");
  5 | you may not use this file except in compliance with the License.
  6 | You may obtain a copy of the License at
  7 | 
  8 |     https://www.apache.org/licenses/LICENSE-2.0
  9 | 
 10 | Unless required by applicable law or agreed to in writing, software
 11 | distributed under the License is distributed on an "AS IS" BASIS,
 12 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 | See the License for the specific language governing permissions and
 14 | limitations under the License.
 15 | */
 16 | 
 17 | const VERTEX_AI_LOCATION = PropertiesService.getScriptProperties().getProperty('project_location');
 18 | const MODEL_ID = PropertiesService.getScriptProperties().getProperty('model_id');
 19 | const SERVICE_ACCOUNT_KEY = PropertiesService.getScriptProperties().getProperty('service_account_key');
 20 | 
 21 | const STANDARD_PROMPT = `
 22 | 
 23 |  Your task is to create 3 potential document names for this content.
 24 | 
 25 |  Also, create a summary for this content, using 2 to 3 sentences, and don't include formatting.
 26 | 
 27 |  Format the response as a JSON object with the first field called names and the summary field called summary.
 28 | 
 29 |  The content is below:
 30 | 
 31 |  `;
 32 | 
 33 | /**
 34 |  * Packages prompt and necessary settings, then sends a request to
 35 |  * Vertex API. Returns the response as an JSON object extracted from the
 36 |  * Vertex API response object.
 37 |  *
 38 |  * @param prompt - String representing your prompt for Gemini AI.
 39 |  */
 40 | function getAiSummary(prompt) {
 41 | 
 42 |   const request = {
 43 |     "contents": [
 44 |       {
 45 |         "role": "user",
 46 |         "parts": [{
 47 |           text: STANDARD_PROMPT,
 48 |         },
 49 |         {
 50 |           "text": prompt
 51 |         }]
 52 |       }
 53 |     ],
 54 |     "generationConfig": {
 55 |       "temperature": .2,
 56 |       "maxOutputTokens": 2048,
 57 |       "response_mime_type": "application/json"
 58 |     }
 59 |   }
 60 | 
 61 |   const credentials = credentialsForVertexAI();
 62 | 
 63 |   const fetchOptions = {
 64 |     method: 'POST',
 65 |     headers: {
 66 |       'Authorization': `Bearer ${credentials.accessToken}`
 67 |     },
 68 |     contentType: 'application/json',
 69 |     payload: JSON.stringify(request)
 70 |   }
 71 | 
 72 |   const url = `https://${VERTEX_AI_LOCATION}-aiplatform.googleapis.com/v1/projects/${credentials.projectId}/locations/${VERTEX_AI_LOCATION}/publishers/google/models/${MODEL_ID}:generateContent`
 73 | 
 74 |   const response = UrlFetchApp.fetch(url, fetchOptions);
 75 | 
 76 |   const payload = JSON.parse(response.getContentText());
 77 |   const jsonPayload = JSON.parse(payload.candidates[0].content.parts[0].text)
 78 | 
 79 |   return jsonPayload
 80 | 
 81 | }
 82 | 
 83 | /**
 84 |  * Gets credentials required to call Vertex API using a Service Account.
 85 |  *
 86 |  * 
 87 |  */
 88 | function credentialsForVertexAI() {
 89 |   const credentials = SERVICE_ACCOUNT_KEY;
 90 |   if (!credentials) {
 91 |     throw new Error("service_account_key script property must be set.");
 92 |   }
 93 | 
 94 |   const parsedCredentials = JSON.parse(credentials);
 95 | 
 96 |   const service = OAuth2.createService("Vertex")
 97 |     .setTokenUrl('https://oauth2.googleapis.com/token')
 98 |     .setPrivateKey(parsedCredentials['private_key'])
 99 |     .setIssuer(parsedCredentials['client_email'])
100 |     .setPropertyStore(PropertiesService.getScriptProperties())
101 |     .setScope("https://www.googleapis.com/auth/cloud-platform");
102 |   return {
103 |     projectId: parsedCredentials['project_id'],
104 |     accessToken: service.getAccessToken(),
105 |   }
106 | }
107 | 


--------------------------------------------------------------------------------
/ai/drive-rename/drive.js:
--------------------------------------------------------------------------------
  1 | /*
  2 | Copyright 2024 Google LLC
  3 | 
  4 | Licensed under the Apache License, Version 2.0 (the "License");
  5 | you may not use this file except in compliance with the License.
  6 | You may obtain a copy of the License at
  7 | 
  8 |     https://www.apache.org/licenses/LICENSE-2.0
  9 | 
 10 | Unless required by applicable law or agreed to in writing, software
 11 | distributed under the License is distributed on an "AS IS" BASIS,
 12 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 | See the License for the specific language governing permissions and
 14 | limitations under the License.
 15 | */
 16 | 
 17 | /**
 18 |  * Renames a file based on user selection / updates card.
 19 |  * 
 20 |  * @param {!Event} e Add-on event context
 21 |  * @return {!Card}
 22 |  */
 23 | function renameFile(e) {
 24 | 
 25 |   const newName = e.formInput.names
 26 |   const id = e.drive.activeCursorItem.id
 27 |   DriveApp.getFileById(id).setName(newName)
 28 | 
 29 |   const eUpdated =
 30 |   {
 31 |     hostApp: 'drive',
 32 |     drive:
 33 |     {
 34 |       selectedItems: [[Object]],
 35 |       activeCursorItem:
 36 |       {
 37 |         title: newName,
 38 |         id: id,
 39 |         iconUrl: e.drive.activeCursorItem.iconUrl,
 40 |         mimeType: e.drive.activeCursorItem.mimeType
 41 |       },
 42 |       commonEventObject: { hostApp: 'DRIVE', platform: 'WEB' },
 43 |       clientPlatform: 'web'
 44 |     }
 45 |   }
 46 | 
 47 |   return onCardUpdate(eUpdated)
 48 | 
 49 | }
 50 | 
 51 | /**
 52 |  * Redraws the same card to force AI to refresh its data.
 53 |  * 
 54 |  * @param {!Event} e Add-on event context
 55 |  * @return {!Card}
 56 |  */
 57 | function updateCard(e) {
 58 | 
 59 |   const id = e.drive.activeCursorItem.id
 60 | 
 61 |   const eConverted =
 62 |   {
 63 |     hostApp: 'drive',
 64 |     drive:
 65 |     {
 66 |       selectedItems: [[Object]],
 67 |       activeCursorItem:
 68 |       {
 69 |         title: DriveApp.getFileById(id).getName(),
 70 |         id: id,
 71 |         iconUrl: e.drive.activeCursorItem.iconUrl,
 72 |         mimeType: e.drive.activeCursorItem.mimeType
 73 |       },
 74 |       commonEventObject: { hostApp: 'DRIVE', platform: 'WEB' },
 75 |       clientPlatform: 'web'
 76 |     }
 77 |   }
 78 | 
 79 |   return onCardUpdate(eConverted)
 80 | }
 81 | 
 82 | /**
 83 |  * Fetches the body of given document, using DocumentApp.
 84 |  * 
 85 |  * @param {string} id The Google Document file ID.
 86 |  * @return {string} The body of the Google Document.
 87 |  */
 88 | function getDocumentBody(id) {
 89 | 
 90 |   var doc = DocumentApp.openById(id);
 91 |   var body = doc.getBody();
 92 |   var text = body.getText();
 93 | 
 94 |   return text;
 95 | }
 96 | 
 97 | /**
 98 |  * Fetches the body of given document, using DocsApi.
 99 |  * 
100 |  * @param {string} id The Google Document file ID.
101 |  * @return {string} The body of the Google Document.
102 |  */
103 | function getDocAPIBody(id) {
104 | 
105 |   // Call DOC API REST endpoint to get the file
106 |   let url = `https://docs.googleapis.com/v1/documents/${id}`;
107 | 
108 |   var response = UrlFetchApp.fetch(url, {
109 |     method: 'GET',
110 |     headers: {
111 |       Authorization: 'Bearer ' + ScriptApp.getOAuthToken(),
112 |     },
113 |     muteHttpExceptions: true
114 |   });
115 | 
116 |   if (response.getResponseCode() !== 200) {
117 |     throw new Error(`Drive API returned error \
118 |     ${response.getResponseCode()} :\
119 |      ${response.getContentText()}`);
120 |   }
121 | 
122 |   let file = response.getContentText();
123 |   let data = JSON.parse(file);
124 | 
125 |   return data.body.content;
126 | }
127 | 
128 | /**
129 |  * Sends the given document to the trash folder.
130 |  * 
131 |  * @param {!Event} e Add-on event context
132 |  */
133 | function moveFileToTrash(e) {
134 | 
135 |   const id = e.drive.activeCursorItem.id
136 |   const file = DriveApp.getFileById(id);
137 |   file.setTrashed(true);
138 | }


--------------------------------------------------------------------------------
/ai/drive-rename/main.js:
--------------------------------------------------------------------------------
 1 | /*
 2 | Copyright 2024 Google LLC
 3 | 
 4 | Licensed under the Apache License, Version 2.0 (the "License");
 5 | you may not use this file except in compliance with the License.
 6 | You may obtain a copy of the License at
 7 | 
 8 |     https://www.apache.org/licenses/LICENSE-2.0
 9 | 
10 | Unless required by applicable law or agreed to in writing, software
11 | distributed under the License is distributed on an "AS IS" BASIS,
12 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 | See the License for the specific language governing permissions and
14 | limitations under the License.
15 | */
16 | 
17 | /**
18 |  * Main entry point for add-on when opened.
19 |  * 
20 |  * @param e - Add-on event context
21 |  */
22 | function onHomepageOpened(e) {
23 |   const card = buildHomePage();
24 | 
25 |   return {
26 |     action: {
27 |       navigations: [
28 |         {
29 |           pushCard: card
30 |         }
31 |       ]
32 |     }
33 |   };
34 | }
35 | 
36 | /**
37 |  * Handles selection of a file in Google Drive.
38 |  * 
39 |  * @param e - Add-on event context
40 |  */
41 | function onDriveItemsSelected(e) {
42 | 
43 |   return {
44 |     action: {
45 |       navigations: [
46 |         {
47 |           pushCard: buildSelectionPage(e)
48 |         }
49 |       ]
50 |     }
51 |   }
52 | }
53 | 
54 | 
55 | /**
56 |  * Handles the update of the card on demand.
57 |  * 
58 |  * @param e - (Modified) add-on event context
59 |  */
60 | function onCardUpdate(e) {
61 | 
62 |   return {
63 |     action: {
64 |       navigations: [
65 |         {
66 |           updateCard: buildSelectionPage(e)
67 |         }
68 |       ]
69 |     }
70 |   }
71 | }
72 | 


--------------------------------------------------------------------------------
/ai/drive-rename/ui.js:
--------------------------------------------------------------------------------
  1 | /*
  2 | Copyright 2024 Google LLC
  3 | 
  4 | Licensed under the Apache License, Version 2.0 (the "License");
  5 | you may not use this file except in compliance with the License.
  6 | You may obtain a copy of the License at
  7 | 
  8 |     https://www.apache.org/licenses/LICENSE-2.0
  9 | 
 10 | Unless required by applicable law or agreed to in writing, software
 11 | distributed under the License is distributed on an "AS IS" BASIS,
 12 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 | See the License for the specific language governing permissions and
 14 | limitations under the License.
 15 | */
 16 | 
 17 | const ICO_HEADER = "https://fonts.gstatic.com/s/i/googlematerialicons/drive_file_rename_outline/v12/googblue-48dp/2x/gm_drive_file_rename_outline_googblue_48dp.png"
 18 | const ICON_RENAME = "https://fonts.gstatic.com/s/i/googlematerialicons/drive_file_rename_outline/v12/googblue-18dp/2x/gm_drive_file_rename_outline_googblue_18dp.png"
 19 | const ICON_RETRY = "https://fonts.gstatic.com/s/i/googlematerialicons/refresh/v16/googblue-18dp/2x/gm_refresh_googblue_18dp.png"
 20 | const ICON_DELETE = "https://fonts.gstatic.com/s/i/googlematerialicons/delete/v17/black-18dp/2x/gm_delete_black_18dp.png" 
 21 | 
 22 | /**
 23 |  * Builds the card for the selected active item.
 24 |  * 
 25 |  * @param e - Add-on event context
 26 |  */
 27 | function buildSelectionPage(e) {
 28 | 
 29 |   const selected = e.drive.activeCursorItem
 30 | 
 31 |   // Check if Google Doc type, respond unsupported if not 
 32 |   if (selected.mimeType != "application/vnd.google-apps.document") {
 33 |     return {
 34 |       sections: [
 35 |         {
 36 |           widgets: [
 37 |             {
 38 |               textParagraph: {
 39 |                 text: "<b>Note</b>: currently only <i>Google Docs<i/> file types are supported."
 40 |               },
 41 |             }
 42 |           ]
 43 |         }
 44 |       ],
 45 |       "header": buildHeader()
 46 |     };
 47 |   }
 48 | 
 49 |   // Get document body 
 50 |   const docBody = getDocumentBody(selected.id);
 51 | 
 52 | 
 53 |   //  Create widgets starting with Title
 54 |   const widgets = [
 55 |     {
 56 |       textParagraph: {
 57 |         text: `<b>${selected.title}</b>`
 58 |       },
 59 |     }
 60 |   ];
 61 | 
 62 |   // Check if doc is empty before calling AI
 63 |   if (docBody.length > 1) {
 64 | 
 65 |     // Get AI data
 66 |     const aiResponse = getAiSummary(docBody);
 67 | 
 68 |     console.log('RESPONSE')
 69 | 
 70 |     console.log(aiResponse)
 71 | 
 72 | 
 73 |     //  Add the Summary text 
 74 |     widgets.push({
 75 |       "decoratedText": {
 76 |         "topLabel": "Summary",
 77 |         "text": aiResponse.summary,
 78 |         "wrapText": true
 79 |       }
 80 |     },
 81 |     )
 82 | 
 83 |     // Divider
 84 |     widgets.push({ "divider": {} },)
 85 | 
 86 |     // Create an object of items 
 87 |     const items = [];
 88 |     aiResponse.names.forEach(name => {
 89 |       items.push({
 90 |         "text": name,
 91 |         "value": name,
 92 |         "selected": false
 93 |       },)
 94 | 
 95 |     });
 96 | 
 97 |     // Set first item as selected 
 98 |     items[0].selected = true
 99 | 
100 | 
101 |     // Add the Radio button of 'names' as items
102 |     widgets.push(
103 |       {
104 |         "selectionInput": {
105 |           "name": "names",
106 |           "label": "Select a new name",
107 |           "type": "RADIO_BUTTON",
108 |           "items": items
109 |         }
110 |       },
111 |     )
112 | 
113 |     // Create the 'Rename' button
114 |     widgets.push(
115 |       {
116 |         "buttonList": {
117 |           "buttons": [
118 |             {
119 |               "text": "Rename",
120 |               "icon": {
121 |                 "iconUrl": ICON_RENAME,
122 |                 "altText": "Rename"
123 |               },
124 |               "onClick": {
125 |                 "action": {
126 |                   "function": "renameFile",
127 |                   "parameters": [
128 |                     {
129 |                       "key": "id",
130 |                       "value": selected.id
131 |                     }
132 |                   ],
133 |                   "loadIndicator": "SPINNER"
134 |                 }
135 |               }
136 |             },           {
137 |               "text": "",
138 |               "icon": {
139 |                 "iconUrl": ICON_RETRY,
140 |                 "altText": "Retry"
141 |               },
142 |               "onClick": {
143 |                 "action": {
144 |                   "function": "updateCard",
145 |                   "parameters": [
146 |                     {
147 |                       "key": "id",
148 |                       "value": selected.id
149 |                     }
150 |                   ],
151 |                   "loadIndicator": "SPINNER"
152 |                 }
153 |               }
154 |             }
155 |           ]
156 |         },
157 |         "horizontalAlignment": "CENTER",
158 |       }
159 |     )
160 | 
161 |   } // end if
162 | 
163 |   // Don't call AI, but offer to delete
164 |   else {
165 | 
166 |     //  Add the Summary text 
167 |     widgets.push({
168 |       "decoratedText": {
169 |         "topLabel": "Summary",
170 |         "text": "Empty document",
171 |         "wrapText": true
172 |       }
173 |     },
174 |     )
175 | 
176 |     // Divider
177 |     widgets.push({ "divider": {} },)
178 | 
179 |     // Create the 'Delete' button
180 |     widgets.push(
181 |       {
182 |         "buttonList": {
183 |           "buttons": [
184 |             {
185 |               "text": "Move to trash",
186 |               "icon": {
187 |                 "iconUrl": ICON_DELETE,
188 |                 "altText": "Move to trash"
189 |               },
190 |               "onClick": {
191 |                 "action": {
192 |                   "function": "moveFileToTrash",
193 |                   "parameters": [
194 |                     {
195 |                       "key": "id",
196 |                       "value": selected.id
197 |                     }
198 |                   ],
199 |                   "loadIndicator": "SPINNER"
200 |                 }
201 |               },
202 |               "color": {
203 |                 "red": 0.961,
204 |                 "green": 0.6,
205 |                 "blue": 0.667,
206 |                 "alpha": 1
207 |               }
208 |             }
209 |           ]
210 |         },
211 |         "horizontalAlignment": "CENTER",
212 |       }
213 |     )
214 |   } // end else
215 | 
216 | 
217 |   return {
218 |     sections: [
219 |       {
220 |         widgets
221 |       },
222 |     ],
223 |     "header": buildHeader()
224 |   };
225 | }
226 | 
227 | 
228 | 
229 | /**
230 |  * Builds the header for the Add-on Cards.
231 |  */
232 | function buildHeader() {
233 | 
234 |   const header = {
235 |     "title": "Name with Intelligence",
236 |     "subtitle": `"<i>Untitled documents</i>" no more!`, // Better Doc names w/ Gemini AI",
237 |     "imageUrl": ICO_HEADER,
238 |     "imageType": "SQUARE"
239 |   };
240 |   return header
241 | }
242 | 
243 | /**
244 |  * Builds the home page card.
245 |  */
246 | function buildHomePage() {
247 | 
248 |   const widgets = [
249 |     {
250 |       textParagraph: {
251 |         text: "<b>Name with Intelligence</b> enables you to quickly rename any Google Doc using suggestions provided via Google Gemini."
252 |       },
253 |     },
254 |     { "divider": {} },
255 |     {
256 |       textParagraph: {
257 |         text: "👉 To use, select a Google Doc to rename. Then choose a new name from the list of AI generated names provided for you. A quick summary of the file is also provided by Google Gemini to help you make your decision.",
258 |       },
259 |     },
260 |     { "divider": {} },
261 |     {
262 |       textParagraph: {
263 |         text: "<b>Note</b>: currently only <i>Google Docs<i/> file types are supported.",
264 |       },
265 |     }
266 |   ];
267 | 
268 |   return {
269 |     sections: [
270 |       {
271 |         widgets
272 |       },
273 |     ],
274 |     "header": buildHeader()
275 |   };
276 | }


--------------------------------------------------------------------------------
/ai/gmail-sentiment-analysis/Cards.gs:
--------------------------------------------------------------------------------
 1 | /*
 2 | Copyright 2024 Google LLC
 3 | 
 4 | Licensed under the Apache License, Version 2.0 (the "License");
 5 | you may not use this file except in compliance with the License.
 6 | You may obtain a copy of the License at
 7 | 
 8 |     https://www.apache.org/licenses/LICENSE-2.0
 9 | 
10 | Unless required by applicable law or agreed to in writing, software
11 | distributed under the License is distributed on an "AS IS" BASIS,
12 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 | See the License for the specific language governing permissions and
14 | limitations under the License.
15 | */
16 | 
17 | 
18 | /**
19 |  * Builds the card for to display in the sidepanel of gmail.
20 |  * @return {CardService.Card} The card to show to the user.
21 |  */
22 | 
23 | function buildCard_GmailHome(notifyOk=false){
24 |   const imageUrl ='https://icons.iconarchive.com/icons/roundicons/100-free-solid/48/spy-icon.png'; 
25 |   const image = CardService.newImage()
26 |     .setImageUrl(imageUrl);
27 | 
28 |   const cardHeader = CardService.newCardHeader()
29 |     .setImageUrl(imageUrl)
30 |     .setImageStyle(CardService.ImageStyle.CIRCLE)
31 |     .setTitle("Analyze your GMail");
32 |   
33 |   const action = CardService.newAction()
34 |     .setFunctionName('analyzeSentiment');
35 |   const button = CardService.newTextButton()
36 |     .setText('Identify angry customers')
37 |     .setOnClickAction(action)
38 |     .setTextButtonStyle(CardService.TextButtonStyle.FILLED);
39 |   const buttonSet = CardService.newButtonSet()
40 |     .addButton(button);
41 | 
42 |   const section = CardService.newCardSection()
43 |     .setHeader("Emails sentiment analysis")
44 |     .addWidget(buttonSet);
45 | 
46 |   const card = CardService.newCardBuilder()
47 |     .setHeader(cardHeader)
48 |     .addSection(section);
49 | 
50 | /**
51 |  * This builds the card that contains the footer that informs
52 |  * the user about the successful execution of the Add-on.
53 |  */
54 | 
55 | if(notifyOk==true){
56 |   let fixedFooter = CardService.newFixedFooter()
57 |     .setPrimaryButton(
58 |       CardService.newTextButton()
59 |         .setText("Analysis complete")
60 |         .setOnClickAction(
61 |           CardService.newAction()
62 |             .setFunctionName(
63 |               "buildCard_GmailHome")));
64 |     card.setFixedFooter(fixedFooter);  
65 | }
66 |   return card.build();
67 | }


--------------------------------------------------------------------------------
/ai/gmail-sentiment-analysis/Code.gs:
--------------------------------------------------------------------------------
 1 | /*
 2 | Copyright 2024 Google LLC
 3 | 
 4 | Licensed under the Apache License, Version 2.0 (the "License");
 5 | you may not use this file except in compliance with the License.
 6 | You may obtain a copy of the License at
 7 | 
 8 |     https://www.apache.org/licenses/LICENSE-2.0
 9 | 
10 | Unless required by applicable law or agreed to in writing, software
11 | distributed under the License is distributed on an "AS IS" BASIS,
12 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 | See the License for the specific language governing permissions and
14 | limitations under the License.
15 | */
16 | 
17 | /**
18 |  * Callback for rendering the homepage card.
19 |  * @return {CardService.Card} The card to show to the user.
20 |  */
21 | function onHomepage(e) {
22 |   return buildCard_GmailHome();
23 | }
24 | 
25 | 


--------------------------------------------------------------------------------
/ai/gmail-sentiment-analysis/Gmail.gs:
--------------------------------------------------------------------------------
 1 | /*
 2 | Copyright 2024 Google LLC
 3 | 
 4 | Licensed under the Apache License, Version 2.0 (the "License");
 5 | you may not use this file except in compliance with the License.
 6 | You may obtain a copy of the License at
 7 | 
 8 |     https://www.apache.org/licenses/LICENSE-2.0
 9 | 
10 | Unless required by applicable law or agreed to in writing, software
11 | distributed under the License is distributed on an "AS IS" BASIS,
12 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 | See the License for the specific language governing permissions and
14 | limitations under the License.
15 | */
16 | 
17 | /**
18 |  * Callback for initiating the sentiment analysis.
19 |  * @return {CardService.Card} The card to show to the user.
20 |  */
21 | 
22 | function analyzeSentiment(){
23 |   emailSentiment();
24 |   return buildCard_GmailHome(true);
25 | }
26 | 
27 | /**
28 |  * Gets the last 10 threads in the inbox and the corresponding messages.
29 |  * Fetches the label that should be applied to negative messages.
30 |  * The processSentiment is called on each message 
31 |  * and tested with RegExp to check for a negative answer from the model
32 |  */
33 | 
34 | function emailSentiment() {
35 |   const threads = GmailApp.getInboxThreads(0, 10);
36 |   const msgs = GmailApp.getMessagesForThreads(threads);
37 |   const label_upset = GmailApp.getUserLabelByName("UPSET TONE 😡");
38 |   let currentPrediction;
39 | 
40 |   for (let i = 0 ; i < msgs.length; i++) {
41 |     for (let j = 0; j < msgs[i].length; j++) {
42 |       let emailText = msgs[i][j].getPlainBody();
43 |       currentPrediction = processSentiment(emailText);
44 |       if(currentPrediction === true){
45 |         label_upset.addToThread(msgs[i][j].getThread());
46 |       }
47 |     }
48 |   }
49 | }


--------------------------------------------------------------------------------
/ai/gmail-sentiment-analysis/README.md:
--------------------------------------------------------------------------------
 1 | # Gmail sentiment analysis with Vertex AI
 2 | 
 3 | ## Project Description
 4 | 
 5 | Google Workspace Add-on that extends Gmail and adds sentiment analysis capabilities.
 6 | 
 7 | ## Prerequisites
 8 | 
 9 | * Google Cloud Project (aka Standard Cloud Project for Apps Script) with billing enabled
10 | 
11 | ## Set up your environment
12 | 
13 | 1. Create a Cloud Project
14 |    1. Enable the Vertex AI API
15 |    1. Create a Service Account and grant the role `Vertex AI User`
16 |    1. Create a private key with type JSON. This will download the JSON file for use in the next section.
17 | 1. Open an Apps Script Project bound to a Google Sheets Spreadsheet
18 |    1. From Project Settings, change project to GCP project number of Cloud Project from step 1
19 |    1. Add a Script Property. Enter `service_account_key` as the property name and paste the JSON key from the service account as the value. 
20 | 1. Add OAuth2 v43 Apps Script Library using the ID `1B7FSrk5Zi6L1rSxxTDgDEUsPzlukDsi4KGuTMorsTQHhGBzBkMun4iDF`.
21 | 1. Add the project code to Apps Script
22 | 
23 | ## Usage
24 | 
25 | 1. Create a label in Gmail with this exact text and emojy (case sensitive!): UPSET TONE 😡
26 | 1. In Gmail, click on the Productivity toolbox icon (icon of a spy) in the sidepanel.
27 | 1. The sidepanel will open up. Grant the Add-on autorization to run.
28 | 1. The Add-on will load. Click on the blue button "Identify angry customers."
29 | 1. Close the Add-on by clicking on the X in the top right corner.
30 | 1. It can take a couple of minutes until the label is applied to the messages that have a negative tone.
31 | 1. If you don't want to wait until the labels are added, you can refresh the browser.


--------------------------------------------------------------------------------
/ai/gmail-sentiment-analysis/Vertex.gs:
--------------------------------------------------------------------------------
 1 | /*
 2 | Copyright 2024 Google LLC
 3 | 
 4 | Licensed under the Apache License, Version 2.0 (the "License");
 5 | you may not use this file except in compliance with the License.
 6 | You may obtain a copy of the License at
 7 | 
 8 |     https://www.apache.org/licenses/LICENSE-2.0
 9 | 
10 | Unless required by applicable law or agreed to in writing, software
11 | distributed under the License is distributed on an "AS IS" BASIS,
12 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 | See the License for the specific language governing permissions and
14 | limitations under the License.
15 | */
16 | 
17 | const PROJECT_ID = [ADD YOUR GCP PROJECT ID HERE];
18 | const VERTEX_AI_LOCATION = 'europe-west2';
19 | const MODEL_ID = 'gemini-1.5-pro-002';
20 | const SERVICE_ACCOUNT_KEY = PropertiesService.getScriptProperties().getProperty('service_account_key');
21 | 
22 | /**
23 |  * Packages prompt and necessary settings, then sends a request to
24 |  * Vertex API. 
25 |  * A check is performed to see if the response from Vertex AI contains FALSE as a value.
26 |  * Returns the outcome of that check which is a boolean. 
27 |  *
28 |  * @param emailText - Email message that is sent to the model.
29 |  */
30 | 
31 | function processSentiment(emailText) {
32 |   const prompt = `Analyze the following message: ${emailText}. If the sentiment of this message is negative, answer with FALSE. If the sentiment of this message is neutral or positive, answer with TRUE. Do not use any other words than the ones requested in this prompt as a response!`;
33 | 
34 |   const request = {
35 |     "contents": [{
36 |       "role": "user",
37 |       "parts": [{
38 |         "text": prompt
39 |       }]
40 |     }],
41 |     "generationConfig": {
42 |       "temperature": 0.9,
43 |       "maxOutputTokens": 1024,
44 |       
45 |     }
46 |   };
47 | 
48 |   const credentials = credentialsForVertexAI();
49 | 
50 |   const fetchOptions = {
51 |     method: 'POST',
52 |     headers: {
53 |       'Authorization': `Bearer ${credentials.accessToken}`
54 |     },
55 |     contentType: 'application/json',
56 |     muteHttpExceptions: true,
57 |     payload: JSON.stringify(request)
58 |   }
59 | 
60 |   const url = `https://${VERTEX_AI_LOCATION}-aiplatform.googleapis.com/v1/projects/${PROJECT_ID}/`
61 |   + `locations/${VERTEX_AI_LOCATION}/publishers/google/models/${MODEL_ID}:generateContent`
62 | 
63 |   const response = UrlFetchApp.fetch(url, fetchOptions);
64 |   const payload = JSON.parse(response.getContentText());
65 | 
66 |   const regex = /FALSE/;
67 | 
68 |   return regex.test(payload.candidates[0].content.parts[0].text);
69 | 
70 | }
71 | 
72 | /**
73 |  * Gets credentials required to call Vertex API using a Service Account.
74 |  * Requires use of Service Account Key stored with project
75 |  * 
76 |  * @return {!Object} Containing the Cloud Project Id and the access token.
77 |  */
78 | 
79 | function credentialsForVertexAI() {
80 |   const credentials = SERVICE_ACCOUNT_KEY;
81 |   if (!credentials) {
82 |     throw new Error("service_account_key script property must be set.");
83 |   }
84 | 
85 |   const parsedCredentials = JSON.parse(credentials);
86 | 
87 |   const service = OAuth2.createService("Vertex")
88 |     .setTokenUrl('https://oauth2.googleapis.com/token')
89 |     .setPrivateKey(parsedCredentials['private_key'])
90 |     .setIssuer(parsedCredentials['client_email'])
91 |     .setPropertyStore(PropertiesService.getScriptProperties())
92 |     .setScope("https://www.googleapis.com/auth/cloud-platform");
93 |   return {
94 |     projectId: parsedCredentials['project_id'],
95 |     accessToken: service.getAccessToken(),
96 |   }
97 | }


--------------------------------------------------------------------------------
/ai/standup-chat-app/README.md:
--------------------------------------------------------------------------------
 1 | # Chat API - Stand up with AI
 2 | 
 3 | ## Project Description
 4 | 
 5 | Google Chat application that creates AI summaries of a consolidation Chat threads and posts them back within the top-level Chat message. Use case is using AI to streamline Stand up content within Google Chat.
 6 | 
 7 | ## Prerequisites
 8 | 
 9 | * Google Cloud Project (aka Standard Cloud Project for Apps Script) with billing enabled
10 | 
11 | ## Set up your environment
12 | 
13 | 1. Create a Cloud Project
14 |    1. Configure OAuth consent screen
15 |    1. Enable the Admin SDK API
16 |    1. Enable the Generative Language API
17 |    1. Enable and configure the Google Chat API with the following values:
18 |       1. App status: Live - available to users
19 |       1. App name: “Standup”
20 |       1. Avatar URL: “https://www.gstatic.com/images/branding/productlogos/chat_2020q4/v8/web-24dp/logo_chat_2020q4_color_2x_web_24dp.png”
21 |       1. Description: “Standup App”
22 |       1. Enable Interactive features: Disabled
23 | 1. Create a Google Gemini API Key 
24 |    1. Navigate to https://aistudio.google.com/app/apikey 
25 |    1. Create API key for existing project from step 1
26 |    1. Copy the generated key 
27 | 1. Create and open a standalone Apps Script project
28 |    1. From Project Settings, change project to GCP project number of Cloud Project from step 1
29 |    1. Add the following script properties:
30 |       1. Set `API_KEY` with the API key previously generated as the value.
31 |       1. Set `SPREADSHEET_ID` with the file ID of a blank spreadsheet. 
32 |       1. Set `SPACE_NAME` to the resource name of a Chat space (e.g. `spaces/AAAXYZ`)
33 |    1. Enable the Google Chat advanced service
34 |    1. Enable the AdminDirectory advanced service 
35 | 1. Add the project code to Apps Script
36 | 1. Enable triggers:
37 |    1. Add Time-driven to run function `standup` at the desired interval frequency (e.g. Week timer)
38 |    1. Add Time-driven to run function `summarize` at the desired interval frequency (e.g. Hour timer)
39 | 


--------------------------------------------------------------------------------
/ai/standup-chat-app/db.js:
--------------------------------------------------------------------------------
 1 | /*
 2 | Copyright 2024 Google LLC
 3 | 
 4 | Licensed under the Apache License, Version 2.0 (the "License");
 5 | you may not use this file except in compliance with the License.
 6 | You may obtain a copy of the License at
 7 | 
 8 |     https://www.apache.org/licenses/LICENSE-2.0
 9 | 
10 | Unless required by applicable law or agreed to in writing, software
11 | distributed under the License is distributed on an "AS IS" BASIS,
12 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 | See the License for the specific language governing permissions and
14 | limitations under the License.
15 | */
16 | 
17 | /** @typedef {object} Message
18 |  * @property {string} name
19 |  * @property {string} text
20 |  * @property {object} sender
21 |  * @property {string} sender.type
22 |  * @property {string} sender.name
23 |  * @property {object[]} annotations
24 |  * @property {number} annotations.startIndex
25 |  * @property {string} annotations.type
26 |  * @property {object} annotations.userMention
27 |  * @property {number} annotations.length
28 |  * @property {string} formattedText
29 |  * @property {string} createTime
30 |  * @property {string} argumentText
31 |  * @property {object} thread
32 |  * @property {string} thread.name
33 |  * @property {object} space
34 |  * @property {string} space.name
35 |  */
36 | 
37 | 
38 | class DB {
39 |   /**
40 |    * params {String} spreadsheetId
41 |    */
42 |   constructor(spreadsheetId) {
43 |     this.spreadsheetId = spreadsheetId;
44 |     this.sheetName = "Messages";
45 | 
46 |   }
47 | 
48 |   /**
49 |    * @returns {SpreadsheetApp.Sheet}
50 |    */
51 |   get sheet() {
52 |     const spreadsheet = SpreadsheetApp.openById(this.spreadsheetId);
53 |     let sheet = spreadsheet.getSheetByName(this.sheetName);
54 | 
55 |     // create if it does not exist
56 |     if (sheet == undefined) {
57 |       sheet = spreadsheet.insertSheet();
58 |       sheet.setName(this.sheetName)
59 |     }
60 | 
61 |     return sheet;
62 |   }
63 | 
64 |   /**
65 |    * @returns {Message|undefined}
66 |    */
67 |   get last() {
68 |     const lastRow = this.sheet.getLastRow()
69 |     if (lastRow === 0) return;
70 |     return JSON.parse(this.sheet.getSheetValues(lastRow, 1, 1, 2)[0][1]);
71 |   }
72 | 
73 | 
74 |   /**
75 |    * @params {Chat_v1.Chat.V1.Schema.Message} message
76 |    */
77 |   append(message) {
78 |     this.sheet.appendRow([message.name, JSON.stringify(message, null, 2)]);
79 |   }
80 | 
81 | }
82 | 
83 | 
84 | /**
85 |  * Test function for DB Object
86 |  */
87 | function testDB() {
88 |   const db = new DB(SPREADSHEET_ID);
89 | 
90 |   let thread = db.last;
91 |   if (thread == undefined) return;
92 |   console.log(thread)
93 | 
94 |   db.rowOffset = 1;
95 |   thread = db.last;
96 |   if (thread == undefined) return;
97 |   console.log(thread)
98 | }
99 | 


--------------------------------------------------------------------------------
/ai/standup-chat-app/gemini.js:
--------------------------------------------------------------------------------
 1 | /*
 2 | Copyright 2024 Google LLC
 3 | 
 4 | Licensed under the Apache License, Version 2.0 (the "License");
 5 | you may not use this file except in compliance with the License.
 6 | You may obtain a copy of the License at
 7 | 
 8 |     https://www.apache.org/licenses/LICENSE-2.0
 9 | 
10 | Unless required by applicable law or agreed to in writing, software
11 | distributed under the License is distributed on an "AS IS" BASIS,
12 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 | See the License for the specific language governing permissions and
14 | limitations under the License.
15 | */
16 | 
17 | /**
18 |  * Makes a simple content-only call to Gemini AI.
19 |  * 
20 |  * @param {string} text Prompt to pass to Gemini API.
21 |  * @param {string} API_KEY Developer API Key enabled to call Gemini.
22 |  * 
23 |  * @return {string} Response from AI call. 
24 |  */
25 | function generateContent(text, API_KEY) {
26 |   const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${API_KEY}`;
27 | 
28 |   return JSON.parse(UrlFetchApp.fetch(url, {
29 |     method: "POST",
30 |     headers: {
31 |       "content-type": "application/json"
32 |     },
33 |     payload: JSON.stringify({
34 |       contents: [{
35 |         parts: [
36 |           {text}
37 |         ]
38 |       }]
39 |     }),
40 |   }).getContentText())
41 | }


--------------------------------------------------------------------------------
/ai/standup-chat-app/main.js:
--------------------------------------------------------------------------------
  1 | /*
  2 | Copyright 2024 Google LLC
  3 | 
  4 | Licensed under the Apache License, Version 2.0 (the "License");
  5 | you may not use this file except in compliance with the License.
  6 | You may obtain a copy of the License at
  7 | 
  8 |     https://www.apache.org/licenses/LICENSE-2.0
  9 | 
 10 | Unless required by applicable law or agreed to in writing, software
 11 | distributed under the License is distributed on an "AS IS" BASIS,
 12 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 | See the License for the specific language governing permissions and
 14 | limitations under the License.
 15 | */
 16 | 
 17 | /** TODO
 18 |  * Update global variables for your project settings
 19 |  * */
 20 | const API_KEY = PropertiesService.getScriptProperties().getProperty("API_KEY");
 21 | const SPREADSHEET_ID = PropertiesService.getScriptProperties().getProperty("SPREADSHEET_ID"); // e.g. "1O0IW7fW1QeFLa7tIrv_h7_PlSUTB6kd0miQO_sXo7p0"
 22 | const SPACE_NAME = PropertiesService.getScriptProperties().getProperty("SPACE_NAME"); // e.g. "spaces/AAAABCa12Cc"
 23 | 
 24 | const SUMMARY_HEADER = `\n\n*Gemini Generated Summary*\n\n`;
 25 | 
 26 | 
 27 | /**
 28 |  * Sends the message to create new standup instance. 
 29 |  * Called by trigger on interval of standup, e.g. Weekly
 30 |  * 
 31 |  * @return {string} The thread name of the message sent.
 32 |  */
 33 | function standup() {
 34 |   const db = new DB(SPREADSHEET_ID);
 35 | 
 36 |   const last = db.last;
 37 | 
 38 |   let text = `<users/all> Please share your weekly update here.\n\n*Source Code*: <https://script.google.com/corp/home/projects/${ScriptApp.getScriptId()}/edit|Apps Script>`;
 39 | 
 40 |   if (last) {
 41 |     text += `\n*Last Week*: <${linkToThread(last)}|View thread>`;
 42 |   }
 43 | 
 44 |   const message = Chat.Spaces.Messages.create({
 45 |     text,
 46 |   }, PropertiesService.getScriptProperties().getProperty("spaceName") // Demo replaces => SPACE_NAME
 47 |   );
 48 | 
 49 |   db.append(message);
 50 | 
 51 |   console.log(`Thread Name: ${message.thread.name}`)
 52 |   return message.thread.name
 53 | }
 54 | 
 55 | /**
 56 |  * Uses AI to create a summary of messages for a stand up period.
 57 |  * Called by trigger on interval required to summarize, e.g. Hourly 
 58 |  * 
 59 |  * @return n/a
 60 |  */
 61 | function summarize() {
 62 |   const db = new DB(SPREADSHEET_ID);
 63 |   const last = db.last;
 64 | 
 65 |   if (last == undefined) return;
 66 | 
 67 |   const filter = `thread.name=${last.thread.name}`;
 68 |   let { messages } = Chat.Spaces.Messages.list(PropertiesService.getScriptProperties().getProperty("spaceName"), { filter });  // Demo replaces => SPACE_NAME
 69 | 
 70 |   messages = (messages ?? [])
 71 |     .slice(1)
 72 |     .filter(message => message.slashCommand === undefined)
 73 | 
 74 |   if (messages.length === 0) {
 75 |     return;
 76 |   }
 77 | 
 78 |   const history = messages
 79 |     .map(({ sender, text }) => `${cachedGetSenderDisplayName(sender)}: ${text}`)
 80 |     .join('/n');
 81 | 
 82 |   const response = generateContent(
 83 |     `Summarize the following weekly tasks and discussion per team member in a single concise sentence for each individual with an extra newline between members, but without using markdown or any special character except for newlines: ${history}`,
 84 |     API_KEY);
 85 |   const summary = response.candidates[0].content?.parts[0].text;
 86 | 
 87 |   if (summary == undefined) {
 88 |     return;
 89 |   }
 90 | 
 91 |   Chat.Spaces.Messages.update({
 92 |     text: last.formattedText + SUMMARY_HEADER + summary.replace("**", "*")
 93 |   },
 94 |     last.name,
 95 |     { update_mask: "text" }
 96 |   );
 97 | 
 98 | }
 99 | 
100 | /**
101 |  * Gets the display name from AdminDirectory Services.
102 |  * 
103 |  * @param {!Object} sender 
104 |  * @return {string} User name on success | 'Unknown' if not.
105 |  */
106 | function getSenderDisplayName(sender) {
107 |   try {
108 |     const user = AdminDirectory.Users.get(
109 |       sender.name.replace("users/", ""),
110 |       { projection: 'BASIC', viewType: 'domain_public' });
111 |     return user.name.displayName ?? user.name.fullName;
112 |   } catch (e) {
113 |     console.error("Unable to get display name");
114 |     return "Unknown"
115 |   };
116 | }
117 | 
118 | const cachedGetSenderDisplayName = memoize(getSenderDisplayName);
119 | 
120 | /**
121 |  * @params {Chat_v1.Chat.V1.Schema.Message|Message} message
122 |  * @returns {String}
123 |  */
124 | function linkToThread(message) {
125 |   // https://chat.google.com/room/SPACE/THREAD/
126 |   return `https://chat.google.com/room/${message.space.name.split("/").pop()}/${message.thread.name.split("/").pop()}`;
127 | }
128 | 


--------------------------------------------------------------------------------
/ai/standup-chat-app/memoize.js:
--------------------------------------------------------------------------------
 1 | /*
 2 | Copyright 2024 Google LLC
 3 | 
 4 | Licensed under the Apache License, Version 2.0 (the "License");
 5 | you may not use this file except in compliance with the License.
 6 | You may obtain a copy of the License at
 7 | 
 8 |     https://www.apache.org/licenses/LICENSE-2.0
 9 | 
10 | Unless required by applicable law or agreed to in writing, software
11 | distributed under the License is distributed on an "AS IS" BASIS,
12 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 | See the License for the specific language governing permissions and
14 | limitations under the License.
15 | */
16 | 
17 | /**
18 |  * A generic hash function that takes a string and computes a hash using the
19 |  * specified algorithm.
20 |  *
21 |  * @param {string} str - The string to hash.
22 |  * @param {Utilities.DigestAlgorithm} algorithm - The algorithm to use to
23 |  *  compute the hash. Defaults to MD5.
24 |  * @returns {string} The base64 encoded hash of the string.
25 |  */
26 | function hash(str, algorithm = Utilities.DigestAlgorithm.MD5) {
27 |   const digest = Utilities.computeDigest(algorithm, str);
28 | 
29 |   return Utilities.base64Encode(digest);
30 | }
31 | 
32 | /**
33 |  * Memoizes a function by caching its results based on the arguments passed.
34 |  *
35 |  * @param {Function} func - The function to be memoized.
36 |  * @param {number} [ttl=600] - The time to live in seconds for the cached
37 |  *  result. The maximum value is 600.
38 |  * @param {Cache} [cache=CacheService.getScriptCache()] - The cache to store the
39 |  *  memoized results.
40 |  * @returns {Function} - The memoized function.
41 |  *
42 |  * @example
43 |  *
44 |  * const cached = memoize(myFunction);
45 |  * cached(1, 2, 3); // The result will be cached
46 |  * cached(1, 2, 3); // The cached result will be returned
47 |  * cached(4, 5, 6); // A new result will be calculated and cached
48 |  */
49 | function memoize(func, ttl = 600, cache = CacheService.getScriptCache()) {
50 |   return (...args) => {
51 | 
52 |     // consider a more robust input to the hash function to handler complex
53 |     // types such as functions, dates, and regex
54 |     const key = hash(JSON.stringify([func.toString(), ...args]));
55 | 
56 |     const cached = cache.get(key);
57 | 
58 |     if (cached != null) {
59 |       return JSON.parse(cached);
60 |     } else {
61 |       const result = func(...args);
62 |       cache.put(key, JSON.stringify(result), ttl);
63 |       return result;
64 |     }
65 |   };
66 | }


--------------------------------------------------------------------------------
/apps-script/execute/target.js:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | // [START apps_script_api_execute]
17 | /**
18 |  * Return the set of folder names contained in the user's root folder as an
19 |  * object (with folder IDs as keys).
20 |  * @return {Object} A set of folder names keyed by folder ID.
21 |  */
22 | function getFoldersUnderRoot() {
23 |   const root = DriveApp.getRootFolder();
24 |   const folders = root.getFolders();
25 |   const folderSet = {};
26 |   while (folders.hasNext()) {
27 |     const folder = folders.next();
28 |     folderSet[folder.getId()] = folder.getName();
29 |   }
30 |   return folderSet;
31 | }
32 | // [END apps_script_api_execute]
33 | 


--------------------------------------------------------------------------------
/calendar/quickstart/quickstart.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | // [START calendar_quickstart]
17 | /**
18 |  * Lists 10 upcoming events in the user's calendar.
19 |  * @see https://developers.google.com/calendar/api/v3/reference/events/list
20 |  */
21 | function listUpcomingEvents() {
22 |   const calendarId = 'primary';
23 |   // Add query parameters in optionalArgs
24 |   const optionalArgs = {
25 |     timeMin: (new Date()).toISOString(),
26 |     showDeleted: false,
27 |     singleEvents: true,
28 |     maxResults: 10,
29 |     orderBy: 'startTime'
30 |     // use other optional query parameter here as needed.
31 |   };
32 |   try {
33 |     // call Events.list method to list the calendar events using calendarId optional query parameter
34 |     const response = Calendar.Events.list(calendarId, optionalArgs);
35 |     const events = response.items;
36 |     if (events.length === 0) {
37 |       console.log('No upcoming events found');
38 |       return;
39 |     }
40 |     // Print the calendar events
41 |     for (const event of events) {
42 |       let when = event.start.dateTime;
43 |       if (!when) {
44 |         when = event.start.date;
45 |       }
46 |       console.log('%s (%s)', event.summary, when);
47 |     }
48 |   } catch (err) {
49 |     // TODO (developer) - Handle exception from Calendar API
50 |     console.log('Failed with error %s', err.message);
51 |   }
52 | }
53 | // [END calendar_quickstart]
54 | 


--------------------------------------------------------------------------------
/chat/advanced-service/AppAuthenticationUtils.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright 2024 Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | // [START chat_authentication_utils]
18 | 
19 | // This script provides configuration and helper functions for app authentication.
20 | // It may require modifications to work in your environment.
21 | 
22 | // For more information on app authentication, see
23 | // https://developers.google.com/workspace/chat/authenticate-authorize-chat-app
24 | 
25 | const APP_AUTH_OAUTH_SCOPES = ['https://www.googleapis.com/auth/chat.bot'];
26 | // Warning: This example uses a service account private key, it should always be stored in a
27 | // secure location.
28 | const SERVICE_ACCOUNT = {
29 |   // TODO(developer): Replace with the Google Chat credentials to use for app authentication,
30 |   // the service account private key's JSON.
31 | };
32 | 
33 | /**
34 |  * Authenticates the app service by using the OAuth2 library.
35 |  *
36 |  * @return {Object} the authenticated app service
37 |  */
38 | function getService_() {
39 |   return OAuth2.createService(SERVICE_ACCOUNT.client_email)
40 |     .setTokenUrl(SERVICE_ACCOUNT.token_uri)
41 |     .setPrivateKey(SERVICE_ACCOUNT.private_key)
42 |     .setIssuer(SERVICE_ACCOUNT.client_email)
43 |     .setSubject(SERVICE_ACCOUNT.client_email)
44 |     .setScope(APP_AUTH_OAUTH_SCOPES)
45 |     .setCache(CacheService.getUserCache())
46 |     .setLock(LockService.getUserLock())
47 |     .setPropertyStore(PropertiesService.getScriptProperties());
48 | }
49 | 
50 | /**
51 |  * Generates headers with the app credentials to use to make Google Chat API calls.
52 |  *
53 |  * @return {Object} the header with credentials
54 |  */
55 | function getHeaderWithAppCredentials() {
56 |   return {
57 |     'Authorization': `Bearer ${getService_().getAccessToken()}`
58 |   };
59 | }
60 | 
61 | // [END chat_authentication_utils]
62 | 


--------------------------------------------------------------------------------
/chat/advanced-service/Main.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright 2024 Google LLC
  3 |  * 
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  * 
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  * 
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | 
 17 | // This script provides each code sample in a separate function.
 18 | // It may require modifications to work in your environment.
 19 | 
 20 | // For more information on user authentication, see
 21 | // https://developers.google.com/workspace/chat/authenticate-authorize-chat-user
 22 | 
 23 | // For more information on app authentication, see
 24 | // https://developers.google.com/workspace/chat/authenticate-authorize-chat-app
 25 | 
 26 | // [START chat_create_membership_user_cred]
 27 | /**
 28 |  * This sample shows how to create membership with user credential for a human user
 29 |  * 
 30 |  * It relies on the OAuth2 scope 'https://www.googleapis.com/auth/chat.memberships'
 31 |  * referenced in the manifest file (appsscript.json).
 32 |  */
 33 | function createMembershipUserCred() {
 34 |   // Initialize request argument(s)
 35 |   // TODO(developer): Replace SPACE_NAME here.
 36 |   const parent = 'spaces/SPACE_NAME';
 37 |   const membership = {
 38 |     member: {
 39 |       // TODO(developer): Replace USER_NAME here
 40 |       name: 'users/USER_NAME',
 41 |       // User type for the membership
 42 |       type: 'HUMAN'
 43 |     }
 44 |   };
 45 | 
 46 |   // Make the request
 47 |   const response = Chat.Spaces.Members.create(membership, parent);
 48 | 
 49 |   // Handle the response
 50 |   console.log(response);
 51 | }
 52 | // [END chat_create_membership_user_cred]
 53 | 
 54 | // [START chat_create_membership_user_cred_for_app]
 55 | /**
 56 |  * This sample shows how to create membership with app credential for an app
 57 |  * 
 58 |  * It relies on the OAuth2 scope 'https://www.googleapis.com/auth/chat.memberships.app'
 59 |  * referenced in the manifest file (appsscript.json).
 60 |  */
 61 | function createMembershipUserCredForApp() {
 62 |   // Initialize request argument(s)
 63 |   // TODO(developer): Replace SPACE_NAME here.
 64 |   const parent = 'spaces/SPACE_NAME';
 65 |   const membership = {
 66 |     member: {
 67 |       // Member name for app membership, do not change this
 68 |       name: 'users/app',
 69 |       // User type for the membership
 70 |       type: 'BOT'
 71 |     }
 72 |   };
 73 | 
 74 |   // Make the request
 75 |   const response = Chat.Spaces.Members.create(membership, parent);
 76 | 
 77 |   // Handle the response
 78 |   console.log(response);
 79 | }
 80 | // [END chat_create_membership_user_cred_for_app]
 81 | 
 82 | // [START chat_create_membership_user_cred_for_group]
 83 | /**
 84 |  * This sample shows how to create membership with user credential for a group
 85 |  * 
 86 |  * It relies on the OAuth2 scope 'https://www.googleapis.com/auth/chat.memberships'
 87 |  * referenced in the manifest file (appsscript.json).
 88 |  */
 89 | function createMembershipUserCredForGroup() {
 90 |   // Initialize request argument(s)
 91 |   // TODO(developer): Replace SPACE_NAME here.
 92 |   const parent = 'spaces/SPACE_NAME';
 93 |   const membership = {
 94 |     groupMember: {
 95 |       // TODO(developer): Replace GROUP_NAME here
 96 |       name: 'groups/GROUP_NAME'
 97 |     }
 98 |   };
 99 | 
100 |   // Make the request
101 |   const response = Chat.Spaces.Members.create(membership, parent);
102 | 
103 |   // Handle the response
104 |   console.log(response);
105 | }
106 | // [END chat_create_membership_user_cred_for_group]
107 | 
108 | 
109 | // [START chat_create_message_app_cred]
110 | /**
111 |  * This sample shows how to create message with app credential
112 |  * 
113 |  * It relies on the OAuth2 scope 'https://www.googleapis.com/auth/chat.bot'
114 |  * used by service accounts.
115 |  */
116 | function createMessageAppCred() {
117 |   // Initialize request argument(s)
118 |   // TODO(developer): Replace SPACE_NAME here.
119 |   const parent = 'spaces/SPACE_NAME';
120 |   const message = {
121 |     text: '👋🌎 Hello world! I created this message by calling ' +
122 |           'the Chat API\'s `messages.create()` method.',
123 |     cardsV2 : [{ card: {
124 |       header: {
125 |         title: 'About this message',
126 |         imageUrl: 'https://fonts.gstatic.com/s/i/short-term/release/googlesymbols/info/default/24px.svg'
127 |       },
128 |       sections: [{
129 |         header: 'Contents',
130 |         widgets: [{ textParagraph: {
131 |             text: '🔡 <b>Text</b> which can include ' +
132 |                   'hyperlinks 🔗, emojis 😄🎉, and @mentions 🗣️.'
133 |           }}, { textParagraph: {
134 |             text: '🖼️ A <b>card</b> to display visual elements' +
135 |                   'and request information such as text 🔤, ' +
136 |                   'dates and times 📅, and selections ☑️.'
137 |           }}, { textParagraph: {
138 |             text: '👉🔘 An <b>accessory widget</b> which adds ' +
139 |                   'a button to the bottom of a message.'
140 |           }}
141 |         ]}, {
142 |           header: "What's next",
143 |           collapsible: true,
144 |           widgets: [{ textParagraph: {
145 |               text: "❤️ <a href='https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.messages.reactions/create'>Add a reaction</a>."
146 |             }}, { textParagraph: {
147 |               text: "🔄 <a href='https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.messages/patch'>Update</a> " +
148 |                     "or ❌ <a href='https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.messages/delete'>delete</a> " +
149 |                     "the message."
150 |             }
151 |           }]
152 |         }
153 |       ]
154 |     }}],
155 |     accessoryWidgets: [{ buttonList: { buttons: [{
156 |       text: 'View documentation',
157 |       icon: { materialIcon: { name: 'link' }},
158 |       onClick: { openLink: {
159 |         url: 'https://developers.google.com/workspace/chat/create-messages'
160 |       }}
161 |     }]}}]
162 |   };
163 |   const parameters = {};
164 | 
165 |   // Make the request
166 |   const response = Chat.Spaces.Messages.create(
167 |     message, parent, parameters, getHeaderWithAppCredentials()
168 |   );
169 | 
170 |   // Handle the response
171 |   console.log(response);
172 | }
173 | // [END chat_create_message_app_cred]
174 | 
175 | // [START chat_create_message_user_cred]
176 | /**
177 |  * This sample shows how to create message with user credential
178 |  * 
179 |  * It relies on the OAuth2 scope 'https://www.googleapis.com/auth/chat.messages.create'
180 |  * referenced in the manifest file (appsscript.json).
181 |  */
182 | function createMessageUserCred() {
183 |   // Initialize request argument(s)
184 |   // TODO(developer): Replace SPACE_NAME here.
185 |   const parent = 'spaces/SPACE_NAME';
186 |   const message = {
187 |     text: '👋🌎 Hello world!' +
188 |           'Text messages can contain things like:\n\n' +
189 |           '* Hyperlinks 🔗\n' +
190 |           '* Emojis 😄🎉\n' +
191 |           '* Mentions of other Chat users `@` \n\n' +
192 |           'For details, see the ' +
193 |           '<https://developers.google.com/workspace/chat/format-messages' +
194 |           '|Chat API developer documentation>.'
195 |   };
196 | 
197 |   // Make the request
198 |   const response = Chat.Spaces.Messages.create(message, parent);
199 | 
200 |   // Handle the response
201 |   console.log(response);
202 | }
203 | // [END chat_create_message_user_cred]
204 | 
205 | // [START chat_create_message_user_cred_at_mention]
206 | /**
207 |  * This sample shows how to create message with user credential with a user mention
208 |  * 
209 |  * It relies on the OAuth2 scope 'https://www.googleapis.com/auth/chat.messages.create'
210 |  * referenced in the manifest file (appsscript.json).
211 |  */
212 | function createMessageUserCredAtMention() {
213 |   // Initialize request argument(s)
214 |   // TODO(developer): Replace SPACE_NAME here.
215 |   const parent = 'spaces/SPACE_NAME';
216 |   const message = {
217 |     // The user with USER_NAME will be mentioned if they are in the space
218 |     // TODO(developer): Replace USER_NAME here
219 |     text: 'Hello <users/USER_NAME>!'
220 |   };
221 | 
222 |   // Make the request
223 |   const response = Chat.Spaces.Messages.create(message, parent);
224 | 
225 |   // Handle the response
226 |   console.log(response);
227 | }
228 | // [END chat_create_message_user_cred_at_mention]
229 | 
230 | // [START chat_create_message_user_cred_message_id]
231 | /**
232 |  * This sample shows how to create message with user credential with message id
233 |  * 
234 |  * It relies on the OAuth2 scope 'https://www.googleapis.com/auth/chat.messages.create'
235 |  * referenced in the manifest file (appsscript.json).
236 |  */
237 | function createMessageUserCredMessageId() {
238 |   // Initialize request argument(s)
239 |   // TODO(developer): Replace SPACE_NAME here.
240 |   const parent = 'spaces/SPACE_NAME';
241 |   // Message id lets chat apps get, update or delete a message without needing
242 |   // to store the system assigned ID in the message's resource name
243 |   const messageId = 'client-MESSAGE-ID';
244 |   const message = { text: 'Hello with user credential!' };
245 | 
246 |   // Make the request
247 |   const response = Chat.Spaces.Messages.create(message, parent, {
248 |     messageId: messageId
249 |   });
250 | 
251 |   // Handle the response
252 |   console.log(response);
253 | }
254 | // [END chat_create_message_user_cred_message_id]
255 | 
256 | // [START chat_create_message_user_cred_request_id]
257 | /**
258 |  * This sample shows how to create message with user credential with request id
259 |  * 
260 |  * It relies on the OAuth2 scope 'https://www.googleapis.com/auth/chat.messages.create'
261 |  * referenced in the manifest file (appsscript.json).
262 |  */
263 | function createMessageUserCredRequestId() {
264 |   // Initialize request argument(s)
265 |   // TODO(developer): Replace SPACE_NAME here.
266 |   const parent = 'spaces/SPACE_NAME';
267 |   // Specifying an existing request ID returns the message created with
268 |   // that ID instead of creating a new message
269 |   const requestId = 'REQUEST_ID';
270 |   const message = { text: 'Hello with user credential!' };
271 | 
272 |   // Make the request
273 |   const response = Chat.Spaces.Messages.create(message, parent, {
274 |     requestId: requestId
275 |   });
276 | 
277 |   // Handle the response
278 |   console.log(response);
279 | }
280 | // [END chat_create_message_user_cred_request_id]
281 | 
282 | // [START chat_create_message_user_cred_thread_key]
283 | /**
284 |  * This sample shows how to create message with user credential with thread key
285 |  * 
286 |  * It relies on the OAuth2 scope 'https://www.googleapis.com/auth/chat.messages.create'
287 |  * referenced in the manifest file (appsscript.json).
288 |  */
289 | function createMessageUserCredThreadKey() {
290 |   // Initialize request argument(s)
291 |   // TODO(developer): Replace SPACE_NAME here.
292 |   const parent = 'spaces/SPACE_NAME';
293 |   // Creates the message as a reply to the thread specified by thread_key
294 |   // If it fails, the message starts a new thread instead
295 |   const messageReplyOption = 'REPLY_MESSAGE_FALLBACK_TO_NEW_THREAD';
296 |   const message = {
297 |     text: 'Hello with user credential!',
298 |     thread: {
299 |       // Thread key specifies a thread and is unique to the chat app
300 |       // that sets it
301 |       threadKey: 'THREAD_KEY'
302 |     }
303 |   };
304 | 
305 |   // Make the request
306 |   const response = Chat.Spaces.Messages.create(message, parent, {
307 |     messageReplyOption: messageReplyOption
308 |   });
309 | 
310 |   // Handle the response
311 |   console.log(response);
312 | }
313 | // [END chat_create_message_user_cred_thread_key]
314 | 
315 | // [START chat_create_message_user_cred_thread_name]
316 | /**
317 |  * This sample shows how to create message with user credential with thread name
318 |  * 
319 |  * It relies on the OAuth2 scope 'https://www.googleapis.com/auth/chat.messages.create'
320 |  * referenced in the manifest file (appsscript.json).
321 |  */
322 | function createMessageUserCredThreadName() {
323 |   // Initialize request argument(s)
324 |   // TODO(developer): Replace SPACE_NAME here.
325 |   const parent = 'spaces/SPACE_NAME';
326 |   // Creates the message as a reply to the thread specified by thread.name
327 |   // If it fails, the message starts a new thread instead
328 |   const messageReplyOption = 'REPLY_MESSAGE_FALLBACK_TO_NEW_THREAD';
329 |   const message = {
330 |     text: 'Hello with user credential!',
331 |     thread: {
332 |       // Resource name of a thread that uniquely identify a thread
333 |       // TODO(developer): Replace SPACE_NAME and THREAD_NAME here
334 |       name: 'spaces/SPACE_NAME/threads/THREAD_NAME'
335 |     }
336 |   };
337 | 
338 |   // Make the request
339 |   const response = Chat.Spaces.Messages.create(message, parent, {
340 |     messageReplyOption: messageReplyOption
341 |   });
342 | 
343 |   // Handle the response
344 |   console.log(response);
345 | }
346 | // [END chat_create_message_user_cred_thread_name]
347 | 
348 | // [START chat_create_space_user_cred]
349 | /**
350 |  * This sample shows how to create space with user credential
351 |  * 
352 |  * It relies on the OAuth2 scope 'https://www.googleapis.com/auth/chat.spaces.create'
353 |  * referenced in the manifest file (appsscript.json).
354 |  */
355 | function createSpaceUserCred() {
356 |   // Initialize request argument(s)
357 |   const space = {
358 |     spaceType: 'SPACE',
359 |     // TODO(developer): Replace DISPLAY_NAME here
360 |     displayName: 'DISPLAY_NAME'
361 |   };
362 | 
363 |   // Make the request
364 |   const response = Chat.Spaces.create(space);
365 | 
366 |   // Handle the response
367 |   console.log(response);
368 | }
369 | // [END chat_create_space_user_cred]
370 | 
371 | // [START chat_delete_message_app_cred]
372 | /**
373 |  * This sample shows how to delete a message with app credential
374 |  * 
375 |  * It relies on the OAuth2 scope 'https://www.googleapis.com/auth/chat.bot'
376 |  * used by service accounts.
377 |  */
378 | function deleteMessageAppCred() {
379 |   // Initialize request argument(s)
380 |   // TODO(developer): Replace SPACE_NAME and MESSAGE_NAME here
381 |   const name = 'spaces/SPACE_NAME/messages/MESSAGE_NAME';
382 |   const parameters = {};
383 | 
384 |   // Make the request
385 |   const response = Chat.Spaces.Messages.remove(name, parameters, getHeaderWithAppCredentials());
386 | 
387 |   // Handle the response
388 |   console.log(response);
389 | }
390 | // [END chat_delete_message_app_cred]
391 | 
392 | // [START chat_delete_message_user_cred]
393 | /**
394 |  * This sample shows how to delete a message with user credential
395 |  * 
396 |  * It relies on the OAuth2 scope 'https://www.googleapis.com/auth/chat.messages'
397 |  * referenced in the manifest file (appsscript.json).
398 |  */
399 | function deleteMessageUserCred() {
400 |   // Initialize request argument(s)
401 |   // TODO(developer): Replace SPACE_NAME and MESSAGE_NAME here
402 |   const name = 'spaces/SPACE_NAME/messages/MESSAGE_NAME';
403 | 
404 |   // Make the request
405 |   const response = Chat.Spaces.Messages.remove(name);
406 | 
407 |   // Handle the response
408 |   console.log(response);
409 | }
410 | // [END chat_delete_message_user_cred]
411 | 
412 | // [START chat_get_membership_app_cred]
413 | /**
414 |  * This sample shows how to get membership with app credential
415 |  * 
416 |  * It relies on the OAuth2 scope 'https://www.googleapis.com/auth/chat.bot'
417 |  * used by service accounts.
418 |  */
419 | function getMembershipAppCred() {
420 |   // Initialize request argument(s)
421 |   // TODO(developer): Replace SPACE_NAME and MEMBER_NAME here
422 |   const name = 'spaces/SPACE_NAME/members/MEMBER_NAME';
423 |   const parameters = {};
424 | 
425 |   // Make the request
426 |   const response = Chat.Spaces.Members.get(name, parameters, getHeaderWithAppCredentials());
427 | 
428 |   // Handle the response
429 |   console.log(response);
430 | }
431 | // [END chat_get_membership_app_cred]
432 | 
433 | // [START chat_get_membership_user_cred]
434 | /**
435 |  * This sample shows how to get membership with user credential
436 |  * 
437 |  * It relies on the OAuth2 scope 'https://www.googleapis.com/auth/chat.memberships.readonly'
438 |  * referenced in the manifest file (appsscript.json).
439 |  */
440 | function getMembershipUserCred() {
441 |   // Initialize request argument(s)
442 |   // TODO(developer): Replace SPACE_NAME and MEMBER_NAME here
443 |   const name = 'spaces/SPACE_NAME/members/MEMBER_NAME';
444 | 
445 |   // Make the request
446 |   const response = Chat.Spaces.Members.get(name);
447 | 
448 |   // Handle the response
449 |   console.log(response);
450 | }
451 | // [END chat_get_membership_user_cred]
452 | 
453 | // [START chat_get_message_app_cred]
454 | /**
455 |  * This sample shows how to get message with app credential
456 |  * 
457 |  * It relies on the OAuth2 scope 'https://www.googleapis.com/auth/chat.bot'
458 |  * used by service accounts.
459 |  */
460 | function getMessageAppCred() {
461 |   // Initialize request argument(s)
462 |   // TODO(developer): Replace SPACE_NAME and MESSAGE_NAME here
463 |   const name = 'spaces/SPACE_NAME/messages/MESSAGE_NAME';
464 |   const parameters = {};
465 | 
466 |   // Make the request
467 |   const response = Chat.Spaces.Messages.get(name, parameters, getHeaderWithAppCredentials());
468 | 
469 |   // Handle the response
470 |   console.log(response);
471 | }
472 | // [END chat_get_message_app_cred]
473 | 
474 | // [START chat_get_message_user_cred]
475 | /**
476 |  * This sample shows how to get message with user credential
477 |  * 
478 |  * It relies on the OAuth2 scope 'https://www.googleapis.com/auth/chat.messages.readonly'
479 |  * referenced in the manifest file (appsscript.json).
480 |  */
481 | function getMessageUserCred() {
482 |   // Initialize request argument(s)
483 |   // TODO(developer): Replace SPACE_NAME and MESSAGE_NAME here
484 |   const name = 'spaces/SPACE_NAME/messages/MESSAGE_NAME';
485 | 
486 |   // Make the request
487 |   const response = Chat.Spaces.Messages.get(name);
488 | 
489 |   // Handle the response
490 |   console.log(response);
491 | }
492 | // [END chat_get_message_user_cred]
493 | 
494 | // [START chat_get_space_app_cred]
495 | /**
496 |  * This sample shows how to get space with app credential
497 |  * 
498 |  * It relies on the OAuth2 scope 'https://www.googleapis.com/auth/chat.bot'
499 |  * used by service accounts.
500 |  */
501 | function getSpaceAppCred() {
502 |   // Initialize request argument(s)
503 |   // TODO(developer): Replace SPACE_NAME here
504 |   const name = 'spaces/SPACE_NAME';
505 |   const parameters = {};
506 | 
507 |   // Make the request
508 |   const response = Chat.Spaces.get(name, parameters, getHeaderWithAppCredentials());
509 | 
510 |   // Handle the response
511 |   console.log(response);
512 | }
513 | // [END chat_get_space_app_cred]
514 | 
515 | // [START chat_get_space_user_cred]
516 | /**
517 |  * This sample shows how to get space with user credential
518 |  * 
519 |  * It relies on the OAuth2 scope 'https://www.googleapis.com/auth/chat.spaces.readonly'
520 |  * referenced in the manifest file (appsscript.json).
521 |  */
522 | function getSpaceUserCred() {
523 |   // Initialize request argument(s)
524 |   // TODO(developer): Replace SPACE_NAME here
525 |   const name = 'spaces/SPACE_NAME';
526 | 
527 |   // Make the request
528 |   const response = Chat.Spaces.get(name);
529 | 
530 |   // Handle the response
531 |   console.log(response);
532 | }
533 | // [END chat_get_space_user_cred]
534 | 
535 | // [START chat_list_memberships_app_cred]
536 | /**
537 |  * This sample shows how to list memberships with app credential
538 |  * 
539 |  * It relies on the OAuth2 scope 'https://www.googleapis.com/auth/chat.bot'
540 |  * used by service accounts.
541 |  */
542 | function listMembershipsAppCred() {
543 | // Initialize request argument(s)
544 |   // TODO(developer): Replace SPACE_NAME here
545 |   const parent = 'spaces/SPACE_NAME';
546 |   // Filter membership by type (HUMAN or BOT) or role (ROLE_MEMBER or
547 |   // ROLE_MANAGER)
548 |   const filter = 'member.type = "HUMAN"';
549 | 
550 |   // Iterate through the response pages using page tokens
551 |   let responsePage;
552 |   let pageToken = null;
553 |   do {
554 |     // Request response pages
555 |     responsePage = Chat.Spaces.Members.list(parent, {
556 |       filter: filter,
557 |       pageSize: 10,
558 |       pageToken: pageToken
559 |     }, getHeaderWithAppCredentials());
560 |     // Handle response pages
561 |     if (responsePage.memberships) {
562 |       responsePage.memberships.forEach((membership) => console.log(membership));
563 |     }
564 |     // Update the page token to the next one
565 |     pageToken = responsePage.nextPageToken;
566 |   } while (pageToken);
567 | }
568 | // [END chat_list_memberships_app_cred]
569 | 
570 | // [START chat_list_memberships_user_cred]
571 | /**
572 |  * This sample shows how to list memberships with user credential
573 |  * 
574 |  * It relies on the OAuth2 scope 'https://www.googleapis.com/auth/chat.memberships.readonly'
575 |  * referenced in the manifest file (appsscript.json).
576 |  */
577 | function listMembershipsUserCred() {
578 |   // Initialize request argument(s)
579 |   // TODO(developer): Replace SPACE_NAME here
580 |   const parent = 'spaces/SPACE_NAME';
581 |   // Filter membership by type (HUMAN or BOT) or role (ROLE_MEMBER or
582 |   // ROLE_MANAGER)
583 |   const filter = 'member.type = "HUMAN"';
584 | 
585 |   // Iterate through the response pages using page tokens
586 |   let responsePage;
587 |   let pageToken = null;
588 |   do {
589 |     // Request response pages
590 |     responsePage = Chat.Spaces.Members.list(parent, {
591 |       filter: filter,
592 |       pageSize: 10,
593 |       pageToken: pageToken
594 |     });
595 |     // Handle response pages
596 |     if (responsePage.memberships) {
597 |       responsePage.memberships.forEach((membership) => console.log(membership));
598 |     }
599 |     // Update the page token to the next one
600 |     pageToken = responsePage.nextPageToken;
601 |   } while (pageToken);
602 | }
603 | // [END chat_list_memberships_user_cred]
604 | 
605 | // [START chat_list_messages_user_cred]
606 | /**
607 |  * This sample shows how to list messages with user credential
608 |  * 
609 |  * It relies on the OAuth2 scope 'https://www.googleapis.com/auth/chat.messages.readonly'
610 |  * referenced in the manifest file (appsscript.json).
611 |  */
612 | function listMessagesUserCred() {
613 |   // Initialize request argument(s)
614 |   // TODO(developer): Replace SPACE_NAME here
615 |   const parent = 'spaces/SPACE_NAME';
616 | 
617 |   // Iterate through the response pages using page tokens
618 |   let responsePage;
619 |   let pageToken = null;
620 |   do {
621 |     // Request response pages
622 |     responsePage = Chat.Spaces.Messages.list(parent, {
623 |       pageSize: 10,
624 |       pageToken: pageToken
625 |     });
626 |     // Handle response pages
627 |     if (responsePage.messages) {
628 |       responsePage.messages.forEach((message) => console.log(message));
629 |     }
630 |     // Update the page token to the next one
631 |     pageToken = responsePage.nextPageToken;
632 |   } while (pageToken);
633 | }
634 | // [END chat_list_messages_user_cred]
635 | 
636 | // [START chat_list_spaces_app_cred]
637 | /**
638 |  * This sample shows how to list spaces with app credential
639 |  * 
640 |  * It relies on the OAuth2 scope 'https://www.googleapis.com/auth/chat.bot'
641 |  * used by service accounts.
642 |  */
643 | function listSpacesAppCred() {
644 |   // Initialize request argument(s)
645 |   // Filter spaces by space type (SPACE or GROUP_CHAT or DIRECT_MESSAGE)
646 |   const filter = 'space_type = "SPACE"';
647 | 
648 |   // Iterate through the response pages using page tokens
649 |   let responsePage;
650 |   let pageToken = null;
651 |   do {
652 |     // Request response pages
653 |     responsePage = Chat.Spaces.list({
654 |       filter: filter,
655 |       pageSize: 10,
656 |       pageToken: pageToken
657 |     }, getHeaderWithAppCredentials());
658 |     // Handle response pages
659 |     if (responsePage.spaces) {
660 |       responsePage.spaces.forEach((space) => console.log(space));
661 |     }
662 |     // Update the page token to the next one
663 |     pageToken = responsePage.nextPageToken;
664 |   } while (pageToken);
665 | }
666 | // [END chat_list_spaces_app_cred]
667 | 
668 | // [START chat_list_spaces_user_cred]
669 | /**
670 |  * This sample shows how to list spaces with user credential
671 |  * 
672 |  * It relies on the OAuth2 scope 'https://www.googleapis.com/auth/chat.spaces.readonly'
673 |  * referenced in the manifest file (appsscript.json).
674 |  */
675 | function listSpacesUserCred() {
676 |   // Initialize request argument(s)
677 |   // Filter spaces by space type (SPACE or GROUP_CHAT or DIRECT_MESSAGE)
678 |   const filter = 'space_type = "SPACE"';
679 | 
680 |   // Iterate through the response pages using page tokens
681 |   let responsePage;
682 |   let pageToken = null;
683 |   do {
684 |     // Request response pages
685 |     responsePage = Chat.Spaces.list({
686 |       filter: filter,
687 |       pageSize: 10,
688 |       pageToken: pageToken
689 |     });
690 |     // Handle response pages
691 |     if (responsePage.spaces) {
692 |       responsePage.spaces.forEach((space) => console.log(space));
693 |     }
694 |     // Update the page token to the next one
695 |     pageToken = responsePage.nextPageToken;
696 |   } while (pageToken);
697 | }
698 | // [END chat_list_spaces_user_cred]
699 | 
700 | // [START chat_set_up_space_user_cred]
701 | /**
702 |  * This sample shows how to set up a named space with one initial member with
703 |  * user credential.
704 |  * 
705 |  * It relies on the OAuth2 scope 'https://www.googleapis.com/auth/chat.spaces.create'
706 |  * referenced in the manifest file (appsscript.json).
707 |  */
708 | function setUpSpaceUserCred() {
709 |   // Initialize request argument(s)
710 |   const space = {
711 |     spaceType: 'SPACE',
712 |     // TODO(developer): Replace DISPLAY_NAME here
713 |     displayName: 'DISPLAY_NAME'
714 |   };
715 |   const memberships = [{
716 |     member: {
717 |       // TODO(developer): Replace USER_NAME here
718 |       name: 'users/USER_NAME',
719 |       // User type for the membership
720 |       type: 'HUMAN'
721 |     }
722 |   }];
723 | 
724 |   // Make the request
725 |   const response = Chat.Spaces.setup({ space: space, memberships: memberships });
726 | 
727 |   // Handle the response
728 |   console.log(response);
729 | }
730 | // [END chat_set_up_space_user_cred]
731 | 
732 | // [START chat_update_message_app_cred]
733 | /**
734 |  * This sample shows how to update a message with app credential
735 |  * 
736 |  * It relies on the OAuth2 scope 'https://www.googleapis.com/auth/chat.bot'
737 |  * used by service accounts.
738 |  */
739 | function updateMessageAppCred() {
740 |   // Initialize request argument(s)
741 |   // TODO(developer): Replace SPACE_NAME and MESSAGE_NAME here
742 |   const name = 'spaces/SPACE_NAME/messages/MESSAGE_NAME';
743 |   const message = {
744 |     text: 'Text updated with app credential!',
745 |     cardsV2 : [{ card: { header: {
746 |       title: 'Card updated with app credential!',
747 |       imageUrl: 'https://fonts.gstatic.com/s/i/short-term/release/googlesymbols/info/default/24px.svg'
748 |     }}}]
749 |   };
750 |   // The field paths to update. Separate multiple values with commas or use
751 |   // `*` to update all field paths.
752 |   const updateMask = 'text,cardsV2';
753 | 
754 |   // Make the request
755 |   const response = Chat.Spaces.Messages.patch(message, name, {
756 |     updateMask: updateMask
757 |   }, getHeaderWithAppCredentials());
758 | 
759 |   // Handle the response
760 |   console.log(response);
761 | }
762 | // [END chat_update_message_app_cred]
763 | 
764 | // [START chat_update_message_user_cred]
765 | /**
766 |  * This sample shows how to update a message with user credential
767 |  * 
768 |  * It relies on the OAuth2 scope 'https://www.googleapis.com/auth/chat.messages'
769 |  * referenced in the manifest file (appsscript.json).
770 |  */
771 | function updateMessageUserCred() {
772 |   // Initialize request argument(s)
773 |   // TODO(developer): Replace SPACE_NAME and MESSAGE_NAME here
774 |   const name = 'spaces/SPACE_NAME/messages/MESSAGE_NAME';
775 |   const message = {
776 |     text: 'Updated with user credential!'
777 |   };
778 |   // The field paths to update. Separate multiple values with commas or use
779 |   // `*` to update all field paths.
780 |   const updateMask = 'text';
781 | 
782 |   // Make the request
783 |   const response = Chat.Spaces.Messages.patch(message, name, {
784 |     updateMask: updateMask
785 |   });
786 | 
787 |   // Handle the response
788 |   console.log(response);
789 | }
790 | // [END chat_update_message_user_cred]
791 | 
792 | // [START chat_update_space_user_cred]
793 | /**
794 |  * This sample shows how to update a space with user credential
795 |  * 
796 |  * It relies on the OAuth2 scope 'https://www.googleapis.com/auth/chat.spaces'
797 |  * referenced in the manifest file (appsscript.json).
798 |  */
799 | function updateSpaceUserCred() {
800 |   // Initialize request argument(s)
801 |   // TODO(developer): Replace SPACE_NAME here
802 |   const name = 'spaces/SPACE_NAME';
803 |   const space = {
804 |     displayName: 'New space display name'
805 |   };
806 |   // The field paths to update. Separate multiple values with commas or use
807 |   // `*` to update all field paths.
808 |   const updateMask = 'displayName';
809 | 
810 |   // Make the request
811 |   const response = Chat.Spaces.patch(space, name, {
812 |     updateMask: updateMask
813 |   });
814 | 
815 |   // Handle the response
816 |   console.log(response);
817 | }
818 | // [END chat_update_space_user_cred]
819 | 


--------------------------------------------------------------------------------
/chat/advanced-service/README.md:
--------------------------------------------------------------------------------
 1 | # Google Chat API - Advanced Service samples
 2 | 
 3 | ## Set up
 4 | 
 5 | 1. Follow the Google Chat app quickstart for Apps Script
 6 |    https://developers.google.com/workspace/chat/quickstart/apps-script-app and
 7 |    open the resulting Apps Script project in a web browser.
 8 | 
 9 | 1. Override the Apps Script project contents with the files `appsscript.json`,
10 |    `AppAuthenticationUtils.gs`, and `Main.gs` from this code sample directory.
11 | 
12 | 1. To run samples that use app credentials:
13 | 
14 |    1. Create a service account. For steps, see
15 |       [Authenticate as a Google Chat app](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app).
16 | 
17 |    1. Open `AppAuthenticationUtils.gs` and set the value of the constant `SERVICE_ACCOUNT` to
18 |       the private key's JSON of the service account that you created in the previous step.
19 | 
20 | ## Run
21 | 
22 | In the `Main.gs` file, each function contains a sample that calls a Chat API method
23 | using either app or user authentication. To run one of the samples, select the name
24 | of the function from the dropdown menu and click `Run`.
25 | 


--------------------------------------------------------------------------------
/chat/quickstart/Code.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright 2024 Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | // [START chat_quickstart]
18 | /**
19 |  * This quickstart sample shows how to list spaces with user credential
20 |  *
21 |  * It relies on the OAuth2 scope 'https://www.googleapis.com/auth/chat.spaces.readonly'
22 |  * referenced in the manifest file (appsscript.json).
23 |  */
24 | function listSpaces() {
25 |   // Initialize request argument(s)
26 |   // Filter spaces by space type (SPACE or GROUP_CHAT or DIRECT_MESSAGE)
27 |   const filter = 'space_type = "SPACE"';
28 | 
29 |   // Iterate through the response pages using page tokens
30 |   let responsePage;
31 |   let pageToken = null;
32 |   do {
33 |     // Request response pages
34 |     responsePage = Chat.Spaces.list({
35 |       filter: filter,
36 |       pageToken: pageToken
37 |     });
38 |     // Handle response pages
39 |     if (responsePage.spaces) {
40 |       responsePage.spaces.forEach((space) => console.log(space));
41 |     }
42 |     // Update the page token to the next one
43 |     pageToken = responsePage.nextPageToken;
44 |   } while (pageToken);
45 | }
46 | // [END chat_quickstart]
47 | 


--------------------------------------------------------------------------------
/chat/quickstart/README.md:
--------------------------------------------------------------------------------
 1 | # Google Chat Apps Script Quickstart
 2 | 
 3 | Complete the steps described in the [quickstart instructions](
 4 | https://developers.google.com/workspace/chat/api/guides/quickstart/apps-script),
 5 | and in about five minutes you'll have a simple Apps Script application
 6 | that makes requests to the Google Chat API.
 7 | 
 8 | ## Run
 9 | 
10 | After following the quickstart setup instructions, execute the function `listSpaces`
11 | from the Apps Script console.
12 | 


--------------------------------------------------------------------------------
/classroom/quickstart/quickstart.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | // [START classroom_quickstart]
17 | /**
18 |  * Lists 10 course names and ids.
19 |  */
20 | function listCourses() {
21 |   /**  here pass pageSize Query parameter as argument to get maximum number of result
22 |    * @see https://developers.google.com/classroom/reference/rest/v1/courses/list
23 |    */
24 |   const optionalArgs = {
25 |     pageSize: 10
26 |     // Use other parameter here if needed
27 |   };
28 |   try {
29 |     // call courses.list() method to list the courses in classroom
30 |     const response = Classroom.Courses.list(optionalArgs);
31 |     const courses = response.courses;
32 |     if (!courses || courses.length === 0) {
33 |       console.log('No courses found.');
34 |       return;
35 |     }
36 |     // Print the course names and IDs of the courses
37 |     for (const course of courses) {
38 |       console.log('%s (%s)', course.name, course.id);
39 |     }
40 |   } catch (err) {
41 |     // TODO (developer)- Handle Courses.list() exception from Classroom API
42 |     // get errors like PERMISSION_DENIED/INVALID_ARGUMENT/NOT_FOUND
43 |     console.log('Failed with error %s', err.message);
44 |   }
45 | }
46 | // [END classroom_quickstart]
47 | 


--------------------------------------------------------------------------------
/classroom/snippets/addAlias.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | // [START classroom_add_alias]
17 | /**
18 |  * Updates the section and room of Google Classroom.
19 |  * @param {string} course_id
20 |  * @see https://developers.google.com/classroom/reference/rest/v1/courses.aliases/create
21 |  */
22 | function addAlias(course_id) {
23 |   const alias = {
24 |     'alias': 'p:bio_101'
25 |   };
26 |   try {
27 |     const course_alias = Classroom.Courses.Aliases.create(resource=alias, courseId=course_id);
28 |     console.log('%s successfully added as an alias!', course_alias.alias);
29 |   } catch (err) {
30 |     // TODO (developer) - Handle exception
31 |     console.log('Request to add alias %s failed with error %s.', alias.alias, err.message);
32 |   }
33 | }
34 | // [END classroom_add_alias]
35 | 


--------------------------------------------------------------------------------
/classroom/snippets/courseUpdate.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | // [START classroom_update_course]
17 | /**
18 |  * Updates the section and room of Google Classroom.
19 |  * @param {string} courseId
20 |  * @see https://developers.google.com/classroom/reference/rest/v1/courses/update
21 |  */
22 | function courseUpdate(courseId) {
23 |   try {
24 |     // Get the course using course ID
25 |     let course = Classroom.Courses.get(courseId);
26 |     course.section = 'Period 3';
27 |     course.room = '302';
28 |     // Update the course
29 |     course = Classroom.Courses.update(course, courseId);
30 |     console.log('Course "%s" updated.', course.name);
31 |   } catch (e) {
32 |     // TODO (developer) - Handle exception
33 |     console.log('Failed to update the course with error %s', e.message);
34 |   }
35 | }
36 | // [END classroom_update_course]
37 | 


--------------------------------------------------------------------------------
/classroom/snippets/createAlias.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | // [START classroom_create_alias]
17 | /**
18 |  * Creates Course with an alias specified
19 |  */
20 | function createAlias() {
21 |   let course = {
22 |     id: 'p:bio_101',
23 |     name: '10th Grade Biology',
24 |     section: 'Period 2',
25 |     descriptionHeading: 'Welcome to 10th Grade Biology',
26 |     description: 'We\'ll be learning about the structure of living creatures from a combination ' +
27 |       'of textbooks, guest lectures, and lab work. Expect to be excited!',
28 |     room: '301',
29 |     ownerId: 'me',
30 |     courseState: 'PROVISIONED'
31 |   };
32 |   try {
33 |     // Create the course using course details.
34 |     course = Classroom.Courses.create(course);
35 |     console.log('Course created: %s (%s)', course.name, course.id);
36 |   } catch (err) {
37 |     // TODO (developer) - Handle Courses.create() exception
38 |     console.log('Failed to create course %s with an error %s', course.name, err.message);
39 |   }
40 | }
41 | // [END classroom_create_alias]
42 | 


--------------------------------------------------------------------------------
/classroom/snippets/createCourse.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | // [START classroom_create_course]
17 | /**
18 |  * Creates 10th Grade Biology Course.
19 |  * @see https://developers.google.com/classroom/reference/rest/v1/courses/create
20 |  * return {string} Id of created course
21 |  */
22 | function createCourse() {
23 |   let course = {
24 |     name: '10th Grade Biology',
25 |     section: 'Period 2',
26 |     descriptionHeading: 'Welcome to 10th Grade Biology',
27 |     description: 'We\'ll be learning about the structure of living creatures from a combination ' +
28 |       'of textbooks, guest lectures, and lab work. Expect to be excited!',
29 |     room: '301',
30 |     ownerId: 'me',
31 |     courseState: 'PROVISIONED'
32 |   };
33 |   try {
34 |     // Create the course using course details.
35 |     course = Classroom.Courses.create(course);
36 |     console.log('Course created: %s (%s)', course.name, course.id);
37 |     return course.id;
38 |   } catch (err) {
39 |     // TODO (developer) - Handle Courses.create() exception
40 |     console.log('Failed to create course %s with an error %s', course.name, err.message);
41 |   }
42 | }
43 | // [END classroom_create_course]
44 | 


--------------------------------------------------------------------------------
/classroom/snippets/getCourse.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | // [START classroom_get_course]
17 | /**
18 |  * Retrieves course by id.
19 |  * @param {string} courseId
20 |  * @see https://developers.google.com/classroom/reference/rest/v1/courses/get
21 |  */
22 | function getCourse(courseId) {
23 |   try {
24 |     // Get the course details using course id
25 |     const course = Classroom.Courses.get(courseId);
26 |     console.log('Course "%s" found. ', course.name);
27 |   } catch (err) {
28 |     // TODO (developer) - Handle Courses.get() exception of Handle Classroom API
29 |     console.log('Failed to found course %s with error %s ', courseId, err.message);
30 |   }
31 | }
32 | // [END classroom_get_course]
33 | 


--------------------------------------------------------------------------------
/classroom/snippets/listCourses.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | // [START classroom_list_courses]
17 | /**
18 |  * Lists all course names and ids.
19 |  * @see https://developers.google.com/classroom/reference/rest/v1/courses/list
20 |  */
21 | function listCourses() {
22 |   let courses = [];
23 |   const pageToken = null;
24 |   const optionalArgs = {
25 |     pageToken: pageToken,
26 |     pageSize: 100
27 |   };
28 |   try {
29 |     const response = Classroom.Courses.list(optionalArgs);
30 |     courses = response.courses;
31 |     if (courses.length === 0) {
32 |       console.log('No courses found.');
33 |       return;
34 |     }
35 |     // Print the courses available in classroom
36 |     console.log('Courses:');
37 |     for ( const course in courses) {
38 |       console.log('%s (%s)', courses[course].name, courses[course].id);
39 |     }
40 |   } catch (err) {
41 |     // TODO (developer) - Handle exception
42 |     console.log('Failed with error %s', err.message);
43 |   }
44 | }
45 | // [END classroom_list_courses]
46 | 


--------------------------------------------------------------------------------
/classroom/snippets/patchCourse.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | // [START classroom_patch_course]
17 | /**
18 |  * Updates the section and room of Google Classroom.
19 |  * @param {string} courseId
20 |  * @see https://developers.google.com/classroom/reference/rest/v1/courses/patch
21 |  */
22 | function coursePatch(courseId) {
23 |   let course = {
24 |     'section': 'Period 3',
25 |     'room': '302'
26 |   };
27 |   const mask = {
28 |     updateMask: 'section,room'
29 |   };
30 |   try {
31 |     // Update section and room in course.
32 |     course = Classroom.Courses.patch(body=course, id=courseId, updateMask=mask);
33 |     console.log('Course "%s" updated.', course.name);
34 |   } catch (err) {
35 |     // TODO (developer) - Handle Courses.patch() exception
36 |     console.log('Failed to update the course. Error message: %s', err.message);
37 |   }
38 | }
39 | // [END classroom_patch_course]
40 | 


--------------------------------------------------------------------------------
/classroom/snippets/test_classroom_snippets.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | /**
18 |  * Tests createCourse function of createCourse.gs
19 |  * @return {string} courseId course id of created course
20 |  */
21 | function itShouldCreateCourse() {
22 |   console.log('> itShouldCreateCourse');
23 |   const courseId = createCourse();
24 |   return courseId;
25 | }
26 | 
27 | /**
28 |  * Tests getCourse function of getCourse.gs
29 |  * @param {string} courseId course id
30 |  */
31 | function itShouldGetCourse(courseId) {
32 |   console.log('> itShouldGetCourse');
33 |   getCourse(courseId);
34 | }
35 | 
36 | /**
37 |  * Tests createAlias function of createAlias.gs
38 |  */
39 | function itShouldCreateAlias() {
40 |   console.log('> itShouldCreateAlias');
41 |   createAlias();
42 | }
43 | 
44 | /**
45 |  * Tests addAlias function of addAlias.gs
46 |  * @param {string} courseId course id
47 |  */
48 | function itShouldAddAlias(courseId) {
49 |   console.log('> itShouldAddAlias');
50 |   addAlias(courseId);
51 | }
52 | 
53 | /**
54 |  * Tests courseUpdate function of courseUpdate.gs
55 |  * @param {string} courseId course id
56 |  */
57 | function itShouldUpdateCourse(courseId) {
58 |   console.log('> itShouldUpdateCourse');
59 |   courseUpdate(courseId);
60 | }
61 | 
62 | /**
63 |  * Tests coursePatch function of patchCourse.gs
64 |  * @param {string} courseId course id
65 |  */
66 | function itShouldPatchCourse(courseId) {
67 |   console.log('> itShouldPatchCourse');
68 |   coursePatch(courseId);
69 | }
70 | 
71 | /**
72 |  * Tests listCourses function of listCourses.gs
73 |  */
74 | function itShouldListCourses() {
75 |   console.log('> itShouldListCourses');
76 |   listCourses();
77 | }
78 | 
79 | /**
80 |  * Runs all the tests
81 |  */
82 | function RUN_ALL_TESTS() {
83 |   const courseId = itShouldCreateCourse();
84 |   itShouldGetCourse(courseId);
85 |   itShouldCreateAlias();
86 |   itShouldAddAlias(courseId);
87 |   itShouldUpdateCourse(courseId);
88 |   itShouldPatchCourse(courseId);
89 |   itShouldListCourses();
90 | }
91 | 


--------------------------------------------------------------------------------
/data-studio/auth.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | 
 17 | // [START apps_script_data_studio_get_auth_type_oauth2]
 18 | /**
 19 |  * Returns the Auth Type of this connector.
 20 |  * @return {object} The Auth type.
 21 |  */
 22 | function getAuthType() {
 23 |   var cc = DataStudioApp.createCommunityConnector();
 24 |   return cc.newAuthTypeResponse()
 25 |       .setAuthType(cc.AuthType.OAUTH2)
 26 |       .build();
 27 | }
 28 | // [END apps_script_data_studio_get_auth_type_oauth2]
 29 | 
 30 | // [START apps_script_data_studio_get_auth_type_path_user_pass]
 31 | /**
 32 |  * Returns the Auth Type of this connector.
 33 |  * @return {object} The Auth type.
 34 |  */
 35 | function getAuthType() {
 36 |   var cc = DataStudioApp.createCommunityConnector();
 37 |   return cc.newAuthTypeResponse()
 38 |       .setAuthType(cc.AuthType.PATH_USER_PASS)
 39 |       .setHelpUrl('https://www.example.org/connector-auth-help')
 40 |       .build();
 41 | }
 42 | // [END apps_script_data_studio_get_auth_type_path_user_pass]
 43 | 
 44 | // [START apps_script_data_studio_get_auth_type_user_pass]
 45 | /**
 46 |  * Returns the Auth Type of this connector.
 47 |  * @return {object} The Auth type.
 48 |  */
 49 | function getAuthType() {
 50 |   var cc = DataStudioApp.createCommunityConnector();
 51 |   return cc.newAuthTypeResponse()
 52 |       .setAuthType(cc.AuthType.USER_PASS)
 53 |       .setHelpUrl('https://www.example.org/connector-auth-help')
 54 |       .build();
 55 | }
 56 | // [END apps_script_data_studio_get_auth_type_user_pass]
 57 | 
 58 | // [START apps_script_data_studio_get_auth_type_user_token]
 59 | /**
 60 |  * Returns the Auth Type of this connector.
 61 |  * @return {object} The Auth type.
 62 |  */
 63 | function getAuthType() {
 64 |   var cc = DataStudioApp.createCommunityConnector();
 65 |   return cc.newAuthTypeResponse()
 66 |       .setAuthType(cc.AuthType.USER_TOKEN)
 67 |       .setHelpUrl('https://www.example.org/connector-auth-help')
 68 |       .build();
 69 | }
 70 | // [END apps_script_data_studio_get_auth_type_user_token]
 71 | 
 72 | // [START apps_script_data_studio_get_auth_type_key]
 73 | /**
 74 |  * Returns the Auth Type of this connector.
 75 |  * @return {object} The Auth type.
 76 |  */
 77 | function getAuthType() {
 78 |   var cc = DataStudioApp.createCommunityConnector();
 79 |   return cc.newAuthTypeResponse()
 80 |       .setAuthType(cc.AuthType.KEY)
 81 |       .setHelpUrl('https://www.example.org/connector-auth-help')
 82 |       .build();
 83 | }
 84 | // [END apps_script_data_studio_get_auth_type_key]
 85 | 
 86 | // [START apps_script_data_studio_get_auth_type_none]
 87 | /**
 88 |  * Returns the Auth Type of this connector.
 89 |  * @return {object} The Auth type.
 90 |  */
 91 | function getAuthType() {
 92 |   var cc = DataStudioApp.createCommunityConnector();
 93 |   return cc.newAuthTypeResponse()
 94 |       .setAuthType(cc.AuthType.NONE)
 95 |       .build();
 96 | }
 97 | // [END apps_script_data_studio_get_auth_type_none]
 98 | 
 99 | // [START apps_script_data_studio_auth_reset_oauth2]
100 | /**
101 |  * Resets the auth service.
102 |  */
103 | function resetAuth() {
104 |   getOAuthService().reset();
105 | }
106 | // [END apps_script_data_studio_auth_reset_oauth2]
107 | 
108 | // [START apps_script_data_studio_auth_reset_path_user]
109 | /**
110 |  * Resets the auth service.
111 |  */
112 | function resetAuth() {
113 |   var userProperties = PropertiesService.getUserProperties();
114 |   userProperties.deleteProperty('dscc.path');
115 |   userProperties.deleteProperty('dscc.username');
116 |   userProperties.deleteProperty('dscc.password');
117 | }
118 | // [END apps_script_data_studio_auth_reset_path_user]
119 | 
120 | // [START apps_script_data_studio_auth_reset_user]
121 | /**
122 |  * Resets the auth service.
123 |  */
124 | function resetAuth() {
125 |   var userProperties = PropertiesService.getUserProperties();
126 |   userProperties.deleteProperty('dscc.username');
127 |   userProperties.deleteProperty('dscc.password');
128 | }
129 | // [END apps_script_data_studio_auth_reset_user]
130 | 
131 | // [START apps_script_data_studio_auth_reset_user_token]
132 | /**
133 |  * Resets the auth service.
134 |  */
135 | function resetAuth() {
136 |   var userTokenProperties = PropertiesService.getUserProperties();
137 |   userTokenProperties.deleteProperty('dscc.username');
138 |   userTokenProperties.deleteProperty('dscc.password');
139 | }
140 | // [END apps_script_data_studio_auth_reset_user_token]
141 | 
142 | // [START apps_script_data_studio_auth_reset_key]
143 | /**
144 |  * Resets the auth service.
145 |  */
146 | function resetAuth() {
147 |   var userProperties = PropertiesService.getUserProperties();
148 |   userProperties.deleteProperty('dscc.key');
149 | }
150 | // [END apps_script_data_studio_auth_reset_key]
151 | 
152 | // [START apps_script_data_studio_auth_valid_oauth2]
153 | /**
154 |  * Returns true if the auth service has access.
155 |  * @return {boolean} True if the auth service has access.
156 |  */
157 | function isAuthValid() {
158 |   return getOAuthService().hasAccess();
159 | }
160 | // [END apps_script_data_studio_auth_valid_oauth2]
161 | 
162 | // [START apps_script_data_studio_auth_valid_path_user_pass]
163 | /**
164 |  * Returns true if the auth service has access.
165 |  * @return {boolean} True if the auth service has access.
166 |  */
167 | function isAuthValid() {
168 |   var userProperties = PropertiesService.getUserProperties();
169 |   var path = userProperties.getProperty('dscc.path');
170 |   var userName = userProperties.getProperty('dscc.username');
171 |   var password = userProperties.getProperty('dscc.password');
172 |   // This assumes you have a validateCredentials function that
173 |   // can validate if the userName and password are correct.
174 |   return validateCredentials(path, userName, password);
175 | }
176 | // [END apps_script_data_studio_auth_valid_path_user_pass]
177 | 
178 | // [START apps_script_data_studio_auth_valid_user_pass]
179 | /**
180 |  * Returns true if the auth service has access.
181 |  * @return {boolean} True if the auth service has access.
182 |  */
183 | function isAuthValid() {
184 |   var userProperties = PropertiesService.getUserProperties();
185 |   var userName = userProperties.getProperty('dscc.username');
186 |   var password = userProperties.getProperty('dscc.password');
187 |   // This assumes you have a validateCredentials function that
188 |   // can validate if the userName and password are correct.
189 |   return validateCredentials(userName, password);
190 | }
191 | // [END apps_script_data_studio_auth_valid_user_pass]
192 | 
193 | // [START apps_script_data_studio_auth_valid_user_token]
194 | /**
195 |  * Returns true if the auth service has access.
196 |  * @return {boolean} True if the auth service has access.
197 |  */
198 | function isAuthValid() {
199 |   var userProperties = PropertiesService.getUserProperties();
200 |   var userName = userProperties.getProperty('dscc.username');
201 |   var token = userProperties.getProperty('dscc.token');
202 |   // This assumes you have a validateCredentials function that
203 |   // can validate if the userName and token are correct.
204 |   return validateCredentials(userName, token);
205 | }
206 | // [END apps_script_data_studio_auth_valid_user_token]
207 | 
208 | // [START apps_script_data_studio_auth_valid_key]
209 | /**
210 |  * Returns true if the auth service has access.
211 |  * @return {boolean} True if the auth service has access.
212 |  */
213 | function isAuthValid() {
214 |   var userProperties = PropertiesService.getUserProperties();
215 |   var key = userProperties.getProperty('dscc.key');
216 |   // This assumes you have a validateKey function that can validate
217 |   // if the key is valid.
218 |   return validateKey(key);
219 | }
220 | // [END apps_script_data_studio_auth_valid_key]
221 | 
222 | // [START apps_script_data_studio_auth_library]
223 | /**
224 |  * Returns the configured OAuth Service.
225 |  * @return {Service} The OAuth Service
226 |  */
227 | function getOAuthService() {
228 |   return OAuth2.createService('exampleService')
229 |       .setAuthorizationBaseUrl('...')
230 |       .setTokenUrl('...')
231 |       .setClientId('...')
232 |       .setClientSecret('...')
233 |       .setPropertyStore(PropertiesService.getUserProperties())
234 |       .setCallbackFunction('authCallback')
235 |       .setScope('...');
236 | };
237 | // [END apps_script_data_studio_auth_library]
238 | 
239 | // [START apps_script_data_studio_auth_callback]
240 | /**
241 |  * The OAuth callback.
242 |  * @param {object} request The request data received from the OAuth flow.
243 |  * @return {HtmlOutput} The HTML output to show to the user.
244 |  */
245 | function authCallback(request) {
246 |   var authorized = getOAuthService().handleCallback(request);
247 |   if (authorized) {
248 |     return HtmlService.createHtmlOutput('Success! You can close this tab.');
249 |   } else {
250 |     return HtmlService.createHtmlOutput('Denied. You can close this tab');
251 |   };
252 | };
253 | // [END apps_script_data_studio_auth_callback]
254 | 
255 | // [START apps_script_data_studio_auth_urls]
256 | /**
257 |  * Gets the 3P authorization URL.
258 |  * @return {string} The authorization URL.
259 |  * @see https://developers.google.com/apps-script/reference/script/authorization-info
260 |  */
261 | function get3PAuthorizationUrls() {
262 |   return getOAuthService().getAuthorizationUrl();
263 | }
264 | // [END apps_script_data_studio_auth_urls]
265 | 
266 | // [START apps_script_data_studio_auth_set_credentials_path_user_pass]
267 | /**
268 |  * Sets the credentials.
269 |  * @param {Request} request The set credentials request.
270 |  * @return {object} An object with an errorCode.
271 |  */
272 | function setCredentials(request) {
273 |   var creds = request.userPass;
274 |   var path = creds.path;
275 |   var username = creds.username;
276 |   var password = creds.password;
277 | 
278 |   // Optional
279 |   // Check if the provided path, username and password are valid through
280 |   // a call to your service. You would have to have a `checkForValidCreds`
281 |   // function defined for this to work.
282 |   var validCreds = checkForValidCreds(path, username, password);
283 |   if (!validCreds) {
284 |     return {
285 |       errorCode: 'INVALID_CREDENTIALS'
286 |     };
287 |   }
288 |   var userProperties = PropertiesService.getUserProperties();
289 |   userProperties.setProperty('dscc.path', path);
290 |   userProperties.setProperty('dscc.username', username);
291 |   userProperties.setProperty('dscc.password', password);
292 |   return {
293 |     errorCode: 'NONE'
294 |   };
295 | }
296 | // [END apps_script_data_studio_auth_set_credentials_path_user_pass]
297 | 
298 | // [START apps_script_data_studio_auth_set_credentials_user_pass]
299 | /**
300 |  * Sets the credentials.
301 |  * @param {Request} request The set credentials request.
302 |  * @return {object} An object with an errorCode.
303 |  */
304 | function setCredentials(request) {
305 |   var creds = request.userPass;
306 |   var username = creds.username;
307 |   var password = creds.password;
308 | 
309 |   // Optional
310 |   // Check if the provided username and password are valid through a
311 |   // call to your service. You would have to have a `checkForValidCreds`
312 |   // function defined for this to work.
313 |   var validCreds = checkForValidCreds(username, password);
314 |   if (!validCreds) {
315 |     return {
316 |       errorCode: 'INVALID_CREDENTIALS'
317 |     };
318 |   }
319 |   var userProperties = PropertiesService.getUserProperties();
320 |   userProperties.setProperty('dscc.username', username);
321 |   userProperties.setProperty('dscc.password', password);
322 |   return {
323 |     errorCode: 'NONE'
324 |   };
325 | }
326 | // [END apps_script_data_studio_auth_set_credentials_user_pass]
327 | 
328 | // [START apps_script_data_studio_auth_set_credentials_user_token]
329 | /**
330 |  * Sets the credentials.
331 |  * @param {Request} request The set credentials request.
332 |  * @return {object} An object with an errorCode.
333 |  */
334 | function setCredentials(request) {
335 |   var creds = request.userToken;
336 |   var username = creds.username;
337 |   var token = creds.token;
338 | 
339 |   // Optional
340 |   // Check if the provided username and token are valid through a
341 |   // call to your service. You would have to have a `checkForValidCreds`
342 |   // function defined for this to work.
343 |   var validCreds = checkForValidCreds(username, token);
344 |   if (!validCreds) {
345 |     return {
346 |       errorCode: 'INVALID_CREDENTIALS'
347 |     };
348 |   }
349 |   var userProperties = PropertiesService.getUserProperties();
350 |   userProperties.setProperty('dscc.username', username);
351 |   userProperties.setProperty('dscc.token', token);
352 |   return {
353 |     errorCode: 'NONE'
354 |   };
355 | }
356 | // [END apps_script_data_studio_auth_set_credentials_user_token]
357 | 
358 | // [START apps_script_data_studio_auth_set_credentials_key]
359 | /**
360 |  * Sets the credentials.
361 |  * @param {Request} request The set credentials request.
362 |  * @return {object} An object with an errorCode.
363 |  */
364 | function setCredentials(request) {
365 |   var key = request.key;
366 | 
367 |   // Optional
368 |   // Check if the provided key is valid through a call to your service.
369 |   // You would have to have a `checkForValidKey` function defined for
370 |   // this to work.
371 |   var validKey = checkForValidKey(key);
372 |   if (!validKey) {
373 |     return {
374 |       errorCode: 'INVALID_CREDENTIALS'
375 |     };
376 |   }
377 |   var userProperties = PropertiesService.getUserProperties();
378 |   userProperties.setProperty('dscc.key', key);
379 |   return {
380 |     errorCode: 'NONE'
381 |   };
382 | }
383 | // [END apps_script_data_studio_auth_set_credentials_key]
384 | 


--------------------------------------------------------------------------------
/data-studio/build.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | 
 17 | // [START apps_script_data_studio_build_get_config]
 18 | /**
 19 |  * Builds the Community Connector config.
 20 |  * @return {Config} The Community Connector config.
 21 |  * @see https://developers.google.com/apps-script/reference/data-studio/config
 22 |  */
 23 | function getConfig() {
 24 |   var cc = DataStudioApp.createCommunityConnector();
 25 |   var config = cc.getConfig();
 26 | 
 27 |   config.newInfo()
 28 |       .setId('instructions')
 29 |       .setText('Enter npm package names to fetch their download count.');
 30 | 
 31 |   config.newTextInput()
 32 |       .setId('package')
 33 |       .setName('Enter a single package name.')
 34 |       .setHelpText('for example, googleapis or lighthouse')
 35 |       .setPlaceholder('googleapis')
 36 |       .setAllowOverride(true);
 37 | 
 38 |   config.setDateRangeRequired(true);
 39 | 
 40 |   return config.build();
 41 | }
 42 | // [END apps_script_data_studio_build_get_config]
 43 | 
 44 | // [START apps_script_data_studio_build_get_fields]
 45 | /**
 46 |  * Builds the Community Connector fields object.
 47 |  * @return {Fields} The Community Connector fields.
 48 |  * @see https://developers.google.com/apps-script/reference/data-studio/fields
 49 |  */
 50 | function getFields() {
 51 |   var cc = DataStudioApp.createCommunityConnector();
 52 |   var fields = cc.getFields();
 53 |   var types = cc.FieldType;
 54 |   var aggregations = cc.AggregationType;
 55 | 
 56 |   fields.newDimension()
 57 |       .setId('packageName')
 58 |       .setName('Package Name')
 59 |       .setType(types.TEXT);
 60 | 
 61 |   fields.newDimension()
 62 |       .setId('day')
 63 |       .setName('Day')
 64 |       .setType(types.YEAR_MONTH_DAY);
 65 | 
 66 |   fields.newMetric()
 67 |       .setId('downloads')
 68 |       .setName('Downloads')
 69 |       .setType(types.NUMBER)
 70 |       .setAggregation(aggregations.SUM);
 71 | 
 72 |   return fields;
 73 | }
 74 | 
 75 | /**
 76 |  * Builds the Community Connector schema.
 77 |  * @param {object} request The request.
 78 |  * @return {object} The schema.
 79 |  */
 80 | function getSchema(request) {
 81 |   var fields = getFields().build();
 82 |   return {'schema': fields};
 83 | }
 84 | // [END apps_script_data_studio_build_get_fields]
 85 | 
 86 | // [START apps_script_data_studio_build_get_data]
 87 | /**
 88 |  * Constructs an object with values as rows.
 89 |  * @param {Fields} requestedFields The requested fields.
 90 |  * @param {object[]} response The response.
 91 |  * @param {string} packageName The package name.
 92 |  * @return {object} An object containing rows with values.
 93 |  */
 94 | function responseToRows(requestedFields, response, packageName) {
 95 |   // Transform parsed data and filter for requested fields
 96 |   return response.map(function(dailyDownload) {
 97 |     var row = [];
 98 |     requestedFields.asArray().forEach(function(field) {
 99 |       switch (field.getId()) {
100 |         case 'day':
101 |           return row.push(dailyDownload.day.replace(/-/g, ''));
102 |         case 'downloads':
103 |           return row.push(dailyDownload.downloads);
104 |         case 'packageName':
105 |           return row.push(packageName);
106 |         default:
107 |           return row.push('');
108 |       }
109 |     });
110 |     return {values: row};
111 |   });
112 | }
113 | 
114 | /**
115 |  * Gets the data for the community connector
116 |  * @param {object} request The request.
117 |  * @return {object} The data.
118 |  */
119 | function getData(request) {
120 |   var requestedFieldIds = request.fields.map(function(field) {
121 |     return field.name;
122 |   });
123 |   var requestedFields = getFields().forIds(requestedFieldIds);
124 | 
125 |   // Fetch and parse data from API
126 |   var url = [
127 |     'https://api.npmjs.org/downloads/range/',
128 |     request.dateRange.startDate,
129 |     ':',
130 |     request.dateRange.endDate,
131 |     '/',
132 |     request.configParams.package
133 |   ];
134 |   var response = UrlFetchApp.fetch(url.join(''));
135 |   var parsedResponse = JSON.parse(response).downloads;
136 |   var rows = responseToRows(requestedFields, parsedResponse, request.configParams.package);
137 | 
138 |   return {
139 |     schema: requestedFields.build(),
140 |     rows: rows
141 |   };
142 | }
143 | // [END apps_script_data_studio_build_get_data]
144 | 
145 | // [START apps_script_data_studio_build_get_auth_type]
146 | /**
147 |  * Gets the Auth type.
148 |  * @return {object} The auth type.
149 |  */
150 | function getAuthType() {
151 |   var cc = DataStudioApp.createCommunityConnector();
152 |   return cc.newAuthTypeResponse()
153 |       .setAuthType(cc.AuthType.NONE)
154 |       .build();
155 | }
156 | // [END apps_script_data_studio_build_get_auth_type]
157 | 


--------------------------------------------------------------------------------
/data-studio/caas.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | 
 17 | // [START apps_script_data_studio_caas_example]
 18 | var sqlString = '' +
 19 |     'SELECT ' +
 20 |     '  _TABLE_SUFFIX AS yyyymm, ' +
 21 |     '  ROUND(SUM(IF(fcp.start < @fast_fcp, fcp.density, 0)), 4) AS fast_fcp, ' +
 22 |     '  ROUND(SUM(IF(fcp.start >= 1000 AND fcp.start < 3000, fcp.density, 0)), 4) AS avg_fcp, ' +
 23 |     '  ROUND(SUM(IF(fcp.start >= 3000, fcp.density, 0)), 4) AS slow_fcp ' +
 24 |     'FROM ' +
 25 |     '  `chrome-ux-report.all.*`, ' +
 26 |     '  UNNEST(first_contentful_paint.histogram.bin) AS fcp ' +
 27 |     'WHERE ' +
 28 |     '  origin = @url ' +
 29 |     'GROUP BY ' +
 30 |     '  yyyymm ' +
 31 |     'ORDER BY ' +
 32 |     '  yyyymm ';
 33 | 
 34 | /**
 35 |  * Gets the config.
 36 |  * @param {object} request The request.
 37 |  * @return {Config} The Community Connector config.
 38 |  */
 39 | function getConfig(request) {
 40 |   var cc = DataStudioApp.createCommunityConnector();
 41 |   var config = cc.getConfig();
 42 | 
 43 |   config.newTextInput()
 44 |       .setId('projectId')
 45 |       .setName('BigQuery Billing Project ID')
 46 |       .setPlaceholder('556727765207');
 47 | 
 48 |   config.newTextInput()
 49 |       .setId('url')
 50 |       .setName('Enter your url')
 51 |       .setAllowOverride(true)
 52 |       .setPlaceholder('www.example.com');
 53 | 
 54 |   config.setDateRangeRequired(true);
 55 | 
 56 |   return config.build();
 57 | }
 58 | 
 59 | /**
 60 |  * Gets the fields.
 61 |  * @param {object} request The request.
 62 |  * @return {Fields} The Community Connector fields.
 63 |  */
 64 | function getFields() {
 65 |   var cc = DataStudioApp.createCommunityConnector();
 66 |   var fields = cc.getFields();
 67 |   var types = cc.FieldType;
 68 | 
 69 |   fields.newDimension()
 70 |       .setId('yyyymm')
 71 |       .setName('yyyymm')
 72 |       .setType(types.YEAR_MONTH);
 73 | 
 74 |   fields.newMetric()
 75 |       .setId('fast_fcp')
 76 |       .setName('fast_fcp')
 77 |       .setType(types.NUMBER);
 78 | 
 79 |   fields.newMetric()
 80 |       .setId('avg_fcp')
 81 |       .setName('avg_fcp')
 82 |       .setType(types.NUMBER);
 83 | 
 84 |   fields.newMetric()
 85 |       .setId('slow_fcp')
 86 |       .setName('slow_fcp')
 87 |       .setType(types.NUMBER);
 88 | 
 89 |   return fields;
 90 | }
 91 | 
 92 | /**
 93 |  * Gets the schema.
 94 |  * @param {object} request
 95 |  * @return {object} The connector's schema.
 96 |  */
 97 | function getSchema(request) {
 98 |   return {
 99 |     schema: getFields().build()
100 |   };
101 | }
102 | 
103 | /**
104 |  * Gets the connector's data.
105 |  * @param {object} request The request.
106 |  * @return {object} The data response.
107 |  */
108 | function getData(request) {
109 |   var url = (request.configParams && request.configParams.url);
110 |   var projectId = (request.configParams && request.configParams.projectId);
111 |   var authToken = ScriptApp.getOAuthToken();
112 |   var response = {
113 |     dataConfig: {
114 |       type: 'BIGQUERY',
115 |       bigQueryConnectorConfig: {
116 |         billingProjectId: projectId,
117 |         query: sqlString,
118 |         useStandardSql: true,
119 |         queryParameters: [{
120 |           name: 'url',
121 |           parameterType: {
122 |             type: 'STRING'
123 |           },
124 |           parameterValue: {
125 |             value: url
126 |           }
127 |         }, {
128 |           name: 'fast_fcp',
129 |           parameterType: {
130 |             type: 'INT64'
131 |           },
132 |           parameterValue: {
133 |             value: '' + 1000
134 |           }
135 |         }]
136 |       }
137 |     },
138 |     authConfig: {
139 |       accessToken: authToken
140 |     }
141 |   };
142 |   return response;
143 | }
144 | 
145 | /**
146 |  * Gets the auth type.
147 |  * @return {object} The auth type.
148 |  */
149 | function getAuthType() {
150 |   var cc = DataStudioApp.createCommunityConnector();
151 |   return cc.newAuthTypeResponse()
152 |       .setAuthType(cc.AuthType.NONE)
153 |       .build();
154 | }
155 | // [END apps_script_data_studio_caas_example]
156 | 


--------------------------------------------------------------------------------
/data-studio/data-source.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | // [START apps_script_data_studio_params]
18 | var configParams = [
19 |   {
20 |     type: 'TEXTINPUT',
21 |     name: 'ZipCode',
22 |     displayName: 'ZIP Code',
23 |     parameterControl: {
24 |       allowOverride: true
25 |     }
26 |   },
27 |   {
28 |     type: 'SELECT_SINGLE',
29 |     name: 'units',
30 |     displayName: 'Units',
31 |     parameterControl: {
32 |       allowOverride: true
33 |     },
34 |     options: [
35 |       {
36 |         label: 'Metric',
37 |         value: 'metric'
38 |       },
39 |       {
40 |         label: 'Imperial',
41 |         value: 'imperial'
42 |       },
43 |       {
44 |         label: 'Kelvin',
45 |         value: 'kelvin'
46 |       }
47 |     ]
48 |   },
49 |   {
50 |     type: 'TEXTINPUT',
51 |     name: 'Days',
52 |     displayName: 'Days to forecast'
53 |   }
54 | ];
55 | // [END apps_script_data_studio_params]
56 | 


--------------------------------------------------------------------------------
/data-studio/errors.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | // [START apps_script_data_studio_error_ds_user]
18 | // Admin and non-admin users will see the following error.
19 | try {
20 |   // Code that might fail.
21 | } catch (e) {
22 |   throw new Error('DS_USER:This will be shown to admin & non-admin.');
23 | }
24 | 
25 | // Only admin users will see the following error.
26 | try {
27 |   // Code that might fail.
28 | } catch (e) {
29 |   throw new Error('This message will only be shown to admin users');
30 | }
31 | // [END apps_script_data_studio_error_ds_user]
32 | 
33 | // [START apps_script_data_studio_error_helper]
34 | /**
35 |  * Throws an error that complies with the community connector spec.
36 |  * @param {string} message The error message.
37 |  * @param {boolean} userSafe Determines whether this message is safe to show
38 |  *     to non-admin users of the connector. true to show the message, false
39 |  *     otherwise. false by default.
40 |  */
41 | function throwConnectorError(message, userSafe) {
42 |   userSafe = (typeof userSafe !== 'undefined' &&
43 |               typeof userSafe === 'boolean') ? userSafe : false;
44 |   if (userSafe) {
45 |     message = 'DS_USER:' + message;
46 |   }
47 | 
48 |   throw new Error(message);
49 | }
50 | // [END apps_script_data_studio_error_helper]
51 | 
52 | // [START apps_script_data_studio_error_logging]
53 | /**
54 |  * Log an error that complies with the community connector spec.
55 |  * @param {Error} originalError The original error that occurred.
56 |  * @param {string} message Additional details about the error to include in
57 |  *    the log entry.
58 |  */
59 | function logConnectorError(originalError, message) {
60 |   var logEntry = [
61 |     'Original error (Message): ',
62 |     originalError,
63 |     '(', message, ')'
64 |   ];
65 |   console.error(logEntry.join('')); // Log to Stackdriver.
66 | }
67 | // [END apps_script_data_studio_error_logging]
68 | 
69 | // [START apps_script_data_studio_error_error]
70 | // Error message that will be shown to a non-admin users.
71 | try {
72 |   // Code that might fail.
73 | } catch (e) {
74 |   logConnectorError(e, 'quota_hour_exceeded'); // Log to Stackdriver.
75 |   throwConnectorError('You\'ve exceeded the hourly quota. Try again later.', true);
76 | }
77 | // [END apps_script_data_studio_error_error]
78 | 


--------------------------------------------------------------------------------
/data-studio/links.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | // [START apps_script_data_studio_links]
18 | // These variables should be filled in as necessary for your connector.
19 | var configJSON;
20 | var templateId;
21 | var deploymentId;
22 | 
23 | var params = [];
24 | 
25 | const jsonString = JSON.stringify(configJSON);
26 | const encoded = encodeURIComponent(jsonString);
27 | params.push('connectorConfig=' + encoded);
28 | 
29 | params.push('reportTemplateId=' + templateId);
30 | 
31 | params.push('connectorId=' + deploymentId);
32 | 
33 | const joinedParams = params.join('&');
34 | const URL = 'https://datastudio.google.com/datasources/create?' + joinedParams;
35 | // [END apps_script_data_studio_links]
36 | 


--------------------------------------------------------------------------------
/data-studio/manifest.gs:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/googleworkspace/apps-script-samples/c9b7745b900b8e03057def3dbe8891f228f62451/data-studio/manifest.gs


--------------------------------------------------------------------------------
/data-studio/semantics.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | // [START apps_script_data_studio_manual]
18 | var schema = [
19 |   {
20 |     'name': 'Income',
21 |     'label': 'Income (in USD)',
22 |     'dataType': 'NUMBER',
23 |     'semantics': {
24 |       'conceptType': 'METRIC',
25 |       'semanticGroup': 'CURRENCY',
26 |       'semanticType': 'CURRENCY_USD'
27 |     }
28 |   }, {
29 |     'name': 'Filing Year',
30 |     'label': 'Year in which you filed the taxes.',
31 |     'dataType': 'STRING',
32 |     'semantics': {
33 |       'conceptType': 'METRIC',
34 |       'semanticGroup': 'DATE_OR_TIME',
35 |       'semanticType': 'YEAR'
36 |     }
37 |   }
38 | ];
39 | // [END apps_script_data_studio_manual]
40 | 


--------------------------------------------------------------------------------
/docs/README.md:
--------------------------------------------------------------------------------
 1 | # Google Docs Add-ons
 2 | 
 3 | ## Cursor Inspector
 4 | 
 5 | This add-on allows you to inspect the current state of the cursor or selection within a document. The information is presented in a sidebar and updates automatically every few seconds.
 6 | 
 7 | ## Translate
 8 | 
 9 | This add-on allows you to translate selected text from a set of source languages to a set of destination languages.
10 | 


--------------------------------------------------------------------------------
/docs/cursorInspector/README.md:
--------------------------------------------------------------------------------
 1 | # Cursor Inspector
 2 | 
 3 | Cursor Inspector is a sample script for Google Docs that allows you to inspect
 4 | the current state of the cursor or selection within a document. The information
 5 | is presented in a sidebar and updates automatically every few seconds. The data
 6 | presented corresponds with the
 7 | [`Cursor`](https://developers.google.com/apps-script/reference/document/cursor)
 8 | and
 9 | [`Selection`](https://developers.google.com/apps-script/reference/document/selection)
10 | classes of the API.
11 | 
12 | ![Cursor Inspector screenshot](screenshot.png)
13 | 
14 | ## Try it out
15 | 
16 | For your convience we have deployed the script into a Google Docs
17 | [document](https://docs.google.com/document/d/1v6S7IkDL_YIaVn1rBcVbqFr3rbNUX9_kLfFc00WTtx8/view)
18 | that you can copy and use. Follow the instructions in the document to get
19 | started.
20 | 


--------------------------------------------------------------------------------
/docs/cursorInspector/cursorInspector.gs:
--------------------------------------------------------------------------------
 1 | // Copyright 2013 Google Inc. All Rights Reserved.
 2 | //
 3 | // Licensed under the Apache License, Version 2.0 (the "License");
 4 | // you may not use this file except in compliance with the License.
 5 | // You may obtain a copy of the License at
 6 | //
 7 | //     http://www.apache.org/licenses/LICENSE-2.0
 8 | //
 9 | // Unless required by applicable law or agreed to in writing, software
10 | // distributed under the License is distributed on an "AS IS" BASIS,
11 | // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12 | // See the License for the specific language governing permissions and
13 | // limitations under the License.
14 | 
15 | /**
16 |  * Runs when the document is opened.
17 |  */
18 | function onOpen() {
19 |   DocumentApp.getUi().createMenu('Inspector')
20 |     .addItem('Show sidebar', 'showSidebar')
21 |     .addToUi();
22 | }
23 | 
24 | /**
25 |  * Show the sidebar.
26 |  */
27 | function showSidebar() {
28 |   DocumentApp.getUi().showSidebar(
29 |     HtmlService.createTemplateFromFile('Sidebar').evaluate()
30 |       .setTitle('Cursor Inspector')
31 |       .setWidth(350));
32 | }
33 | 
34 | /**
35 |  * Returns the contents of an HTML file.
36 |  * @param {string} file The name of the file to retrieve.
37 |  * @return {string} The content of the file.
38 |  */
39 | function include(file) {
40 |   return HtmlService.createTemplateFromFile(file).evaluate().getContent();
41 | }
42 | 
43 | /**
44 |  * Gets the current cursor and selector information for the document.
45 |  * @return {Object} The infomration.
46 |  */
47 | function getDocumentInfo() {
48 |   var document = DocumentApp.getActiveDocument();
49 |   var cursor = document.getCursor();
50 |   var selection = document.getSelection();
51 |   var result = {};
52 |   if (cursor) {
53 |     result.cursor = {
54 |       element: getElementInfo(cursor.getElement()),
55 |       offset: cursor.getOffset(),
56 |       surroundingText: cursor.getSurroundingText().getText(),
57 |       surroundingTextOffset: cursor.getSurroundingTextOffset()
58 |     };
59 |   }
60 |   if (selection) {
61 |     result.selection = {
62 |       selectedElements: selection.getSelectedElements().map(function(selectedElement) {
63 |         return {
64 |           element: getElementInfo(selectedElement.getElement()),
65 |           partial: selectedElement.isPartial(),
66 |           startOffset: selectedElement.getStartOffset(),
67 |           endOffsetInclusive: selectedElement.getEndOffsetInclusive()
68 |         };
69 |       })
70 |     };
71 |   }
72 |   return result;
73 | }
74 | 
75 | /**
76 |  * Gets information about a given element.
77 |  * @param {Element} element The element.
78 |  * @return {Object} The information.
79 |  */
80 | function getElementInfo(element) {
81 |   return {
82 |     type: String(element.getType())
83 |   };
84 | }
85 | 


--------------------------------------------------------------------------------
/docs/dialog2sidebar/Code.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | /**
18 |  * Runs when the document opens, populating the menu.
19 |  */
20 | function onOpen() {
21 |   DocumentApp.getUi().createMenu('Sidebar')
22 |       .addItem('Show', 'showSidebar')
23 |       .addToUi();
24 | }
25 | 
26 | /**
27 |  * Shows the sidebar in the document.
28 |  */
29 | function showSidebar() {
30 |   var page = HtmlService.createTemplateFromFile('Sidebar')
31 |       .evaluate()
32 |       .setTitle('Sidebar');
33 |   DocumentApp.getUi().showSidebar(page);
34 | }
35 | 
36 | /**
37 |  * Open a dialog in the document.
38 |  * @return {string} The dialog ID.
39 |  */
40 | function openDialog() {
41 |   var dialogId = Utilities.base64Encode(Math.random());
42 |   var template = HtmlService.createTemplateFromFile('Dialog');
43 |   template.dialogId = dialogId;
44 |   var page = template.evaluate()
45 |       .setTitle('Dialog');
46 |   DocumentApp.getUi().showDialog(page);
47 |   return dialogId;
48 | }
49 | 
50 | /**
51 |  * Include the contents of the given file into the HTML content.
52 |  * @param {string} filename The filename
53 |  * @return {string} The content of the rendered file.
54 |  */
55 | function include(filename) {
56 |   return HtmlService.createHtmlOutputFromFile(filename).getContent();
57 | }
58 | 


--------------------------------------------------------------------------------
/docs/dialog2sidebar/README.md:
--------------------------------------------------------------------------------
 1 | # Dialog to Sidebar Communication in Apps Script
 2 | 
 3 | This script demonstrates a method of setting up a communication channel between
 4 | a dialog and a sidebar in Apps Script. This helps solve the common problem
 5 | of having your sidebar know when a dialog is opened, is submitted, closed, etc.
 6 | 
 7 | With the introduction of the IFRAME sandbox mode, HtmlService UIs can take
 8 | advantage of the
 9 | [HTML5 localStorage API](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage).
10 | The open source library [intercom.js](https://github.com/diy/intercom.js/)
11 | builds a messaging system on top of this API, allowing for dialogs and sidebars
12 | in the same browser to communicate with each other.
13 | 
14 | An overview of the process is as follows:
15 | 
16 | * The sidebar requests a new dialog to be opened.
17 | * The backend generates a new ID for the dialog, opens the dialog (passing in
18 |   that ID as a template parameter), and sends the ID back to the sidebar.
19 | * The sidebar listens for events on the dialog's intercom.js channel.
20 | * The dialog regularly "checks in" with the sidebar, resetting a
21 |   [timer](https://developer.mozilla.org/en-US/Add-ons/Code_snippets/Timers).
22 | * When the user completes the dialog (by clicking either the "OK" or "Cancel"
23 |   button) it sends this status change to the sidebar.
24 | * If the sidebar's timer actually fires, that means the dialog hasn't checked in
25 |   recently, and it is considered "lost".
26 | 


--------------------------------------------------------------------------------
/docs/quickstart/quickstart.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | // [START docs_quickstart]
17 | /**
18 |  * Prints the title of the sample document:
19 |  * https://docs.google.com/document/d/195j9eDD3ccgjQRttHhJPymLJUCOUjs-jmwTrekvdjFE/edit
20 |  * @see https://developers.google.com/docs/api/reference/rest/v1/documents/get
21 |  */
22 | function printDocTitle() {
23 |   const documentId = '195j9eDD3ccgjQRttHhJPymLJUCOUjs-jmwTrekvdjFE';
24 |   const doc = Docs.Documents.get(documentId, {'includeTabsContent': true});
25 |   console.log(`The title of the doc is: ${doc.title}`);
26 | }
27 | // [END docs_quickstart]
28 | 


--------------------------------------------------------------------------------
/docs/translate/README.md:
--------------------------------------------------------------------------------
 1 | # Translate
 2 | 
 3 | Translate is a sample script for Google Docs that allows you to translate
 4 | selected text from a set of source languages to a set of destination languages.
 5 | The resulting translation can then be inserted back into the Google Document.
 6 | This sample was originally designed as a
 7 | [quickstart](https://developers.google.com/apps-script/quickstart/docs).
 8 | 
 9 | ![Google Docs Translate Quickstart](https://developers.google.com/apps-script/images/quickstart-translate.png)
10 | 


--------------------------------------------------------------------------------
/docs/translate/translate.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | // [START apps_script_docs_translate_quickstart]
 17 | /**
 18 |  * @OnlyCurrentDoc
 19 |  *
 20 |  * The above comment directs Apps Script to limit the scope of file
 21 |  * access for this add-on. It specifies that this add-on will only
 22 |  * attempt to read or modify the files in which the add-on is used,
 23 |  * and not all of the user's files. The authorization request message
 24 |  * presented to users will reflect this limited scope.
 25 |  */
 26 | 
 27 | /**
 28 |  * Creates a menu entry in the Google Docs UI when the document is opened.
 29 |  * This method is only used by the regular add-on, and is never called by
 30 |  * the mobile add-on version.
 31 |  *
 32 |  * @param {object} e The event parameter for a simple onOpen trigger. To
 33 |  *     determine which authorization mode (ScriptApp.AuthMode) the trigger is
 34 |  *     running in, inspect e.authMode.
 35 |  */
 36 | function onOpen(e) {
 37 |   DocumentApp.getUi().createAddonMenu()
 38 |       .addItem('Start', 'showSidebar')
 39 |       .addToUi();
 40 | }
 41 | 
 42 | /**
 43 |  * Runs when the add-on is installed.
 44 |  * This method is only used by the regular add-on, and is never called by
 45 |  * the mobile add-on version.
 46 |  *
 47 |  * @param {object} e The event parameter for a simple onInstall trigger. To
 48 |  *     determine which authorization mode (ScriptApp.AuthMode) the trigger is
 49 |  *     running in, inspect e.authMode. (In practice, onInstall triggers always
 50 |  *     run in AuthMode.FULL, but onOpen triggers may be AuthMode.LIMITED or
 51 |  *     AuthMode.NONE.)
 52 |  */
 53 | function onInstall(e) {
 54 |   onOpen(e);
 55 | }
 56 | 
 57 | /**
 58 |  * Opens a sidebar in the document containing the add-on's user interface.
 59 |  * This method is only used by the regular add-on, and is never called by
 60 |  * the mobile add-on version.
 61 |  */
 62 | function showSidebar() {
 63 |   const ui = HtmlService.createHtmlOutputFromFile('sidebar')
 64 |       .setTitle('Translate');
 65 |   DocumentApp.getUi().showSidebar(ui);
 66 | }
 67 | 
 68 | /**
 69 |  * Gets the text the user has selected. If there is no selection,
 70 |  * this function displays an error message.
 71 |  *
 72 |  * @return {Array.<string>} The selected text.
 73 |  */
 74 | function getSelectedText() {
 75 |   const selection = DocumentApp.getActiveDocument().getSelection();
 76 |   const text = [];
 77 |   if (selection) {
 78 |     const elements = selection.getSelectedElements();
 79 |     for (let i = 0; i < elements.length; ++i) {
 80 |       if (elements[i].isPartial()) {
 81 |         const element = elements[i].getElement().asText();
 82 |         const startIndex = elements[i].getStartOffset();
 83 |         const endIndex = elements[i].getEndOffsetInclusive();
 84 | 
 85 |         text.push(element.getText().substring(startIndex, endIndex + 1));
 86 |       } else {
 87 |         const element = elements[i].getElement();
 88 |         // Only translate elements that can be edited as text; skip images and
 89 |         // other non-text elements.
 90 |         if (element.editAsText) {
 91 |           const elementText = element.asText().getText();
 92 |           // This check is necessary to exclude images, which return a blank
 93 |           // text element.
 94 |           if (elementText) {
 95 |             text.push(elementText);
 96 |           }
 97 |         }
 98 |       }
 99 |     }
100 |   }
101 |   if (!text.length) throw new Error('Please select some text.');
102 |   return text;
103 | }
104 | 
105 | /**
106 |  * Gets the stored user preferences for the origin and destination languages,
107 |  * if they exist.
108 |  * This method is only used by the regular add-on, and is never called by
109 |  * the mobile add-on version.
110 |  *
111 |  * @return {Object} The user's origin and destination language preferences, if
112 |  *     they exist.
113 |  */
114 | function getPreferences() {
115 |   const userProperties = PropertiesService.getUserProperties();
116 |   return {
117 |     originLang: userProperties.getProperty('originLang'),
118 |     destLang: userProperties.getProperty('destLang')
119 |   };
120 | }
121 | 
122 | /**
123 |  * Gets the user-selected text and translates it from the origin language to the
124 |  * destination language. The languages are notated by their two-letter short
125 |  * form. For example, English is 'en', and Spanish is 'es'. The origin language
126 |  * may be specified as an empty string to indicate that Google Translate should
127 |  * auto-detect the language.
128 |  *
129 |  * @param {string} origin The two-letter short form for the origin language.
130 |  * @param {string} dest The two-letter short form for the destination language.
131 |  * @param {boolean} savePrefs Whether to save the origin and destination
132 |  *     language preferences.
133 |  * @return {Object} Object containing the original text and the result of the
134 |  *     translation.
135 |  */
136 | function getTextAndTranslation(origin, dest, savePrefs) {
137 |   if (savePrefs) {
138 |     PropertiesService.getUserProperties()
139 |         .setProperty('originLang', origin)
140 |         .setProperty('destLang', dest);
141 |   }
142 |   const text = getSelectedText().join('\n');
143 |   return {
144 |     text: text,
145 |     translation: translateText(text, origin, dest)
146 |   };
147 | }
148 | 
149 | /**
150 |  * Replaces the text of the current selection with the provided text, or
151 |  * inserts text at the current cursor location. (There will always be either
152 |  * a selection or a cursor.) If multiple elements are selected, only inserts the
153 |  * translated text in the first element that can contain text and removes the
154 |  * other elements.
155 |  *
156 |  * @param {string} newText The text with which to replace the current selection.
157 |  */
158 | function insertText(newText) {
159 |   const selection = DocumentApp.getActiveDocument().getSelection();
160 |   if (selection) {
161 |     let replaced = false;
162 |     const elements = selection.getSelectedElements();
163 |     if (elements.length === 1 && elements[0].getElement().getType() ===
164 |       DocumentApp.ElementType.INLINE_IMAGE) {
165 |       throw new Error('Can\'t insert text into an image.');
166 |     }
167 |     for (let i = 0; i < elements.length; ++i) {
168 |       if (elements[i].isPartial()) {
169 |         const element = elements[i].getElement().asText();
170 |         const startIndex = elements[i].getStartOffset();
171 |         const endIndex = elements[i].getEndOffsetInclusive();
172 |         element.deleteText(startIndex, endIndex);
173 |         if (!replaced) {
174 |           element.insertText(startIndex, newText);
175 |           replaced = true;
176 |         } else {
177 |           // This block handles a selection that ends with a partial element. We
178 |           // want to copy this partial text to the previous element so we don't
179 |           // have a line-break before the last partial.
180 |           const parent = element.getParent();
181 |           const remainingText = element.getText().substring(endIndex + 1);
182 |           parent.getPreviousSibling().asText().appendText(remainingText);
183 |           // We cannot remove the last paragraph of a doc. If this is the case,
184 |           // just remove the text within the last paragraph instead.
185 |           if (parent.getNextSibling()) {
186 |             parent.removeFromParent();
187 |           } else {
188 |             element.removeFromParent();
189 |           }
190 |         }
191 |       } else {
192 |         const element = elements[i].getElement();
193 |         if (!replaced && element.editAsText) {
194 |           // Only translate elements that can be edited as text, removing other
195 |           // elements.
196 |           element.clear();
197 |           element.asText().setText(newText);
198 |           replaced = true;
199 |         } else {
200 |           // We cannot remove the last paragraph of a doc. If this is the case,
201 |           // just clear the element.
202 |           if (element.getNextSibling()) {
203 |             element.removeFromParent();
204 |           } else {
205 |             element.clear();
206 |           }
207 |         }
208 |       }
209 |     }
210 |   } else {
211 |     const cursor = DocumentApp.getActiveDocument().getCursor();
212 |     const surroundingText = cursor.getSurroundingText().getText();
213 |     const surroundingTextOffset = cursor.getSurroundingTextOffset();
214 | 
215 |     // If the cursor follows or preceds a non-space character, insert a space
216 |     // between the character and the translation. Otherwise, just insert the
217 |     // translation.
218 |     if (surroundingTextOffset > 0) {
219 |       if (surroundingText.charAt(surroundingTextOffset - 1) !== ' ') {
220 |         newText = ' ' + newText;
221 |       }
222 |     }
223 |     if (surroundingTextOffset < surroundingText.length) {
224 |       if (surroundingText.charAt(surroundingTextOffset) !== ' ') {
225 |         newText += ' ';
226 |       }
227 |     }
228 |     cursor.insertText(newText);
229 |   }
230 | }
231 | 
232 | /**
233 |  * Given text, translate it from the origin language to the destination
234 |  * language. The languages are notated by their two-letter short form. For
235 |  * example, English is 'en', and Spanish is 'es'. The origin language may be
236 |  * specified as an empty string to indicate that Google Translate should
237 |  * auto-detect the language.
238 |  *
239 |  * @param {string} text text to translate.
240 |  * @param {string} origin The two-letter short form for the origin language.
241 |  * @param {string} dest The two-letter short form for the destination language.
242 |  * @return {string} The result of the translation, or the original text if
243 |  *     origin and dest languages are the same.
244 |  */
245 | function translateText(text, origin, dest) {
246 |   if (origin === dest) return text;
247 |   return LanguageApp.translate(text, origin, dest);
248 | }
249 | // [END apps_script_docs_translate_quickstart]
250 | 


--------------------------------------------------------------------------------
/drive/activity-v2/quickstart.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | // [START drive_activity_v2_quickstart]
 17 | /**
 18 |  * Lists 10 activity for a Drive user.
 19 |  * @see https://developers.google.com/drive/activity/v2/reference/rest/v2/activity/query
 20 |  */
 21 | function listDriveActivity() {
 22 |   const request = {
 23 |     pageSize: 10
 24 |     // Use other parameter here if needed.
 25 |   };
 26 |   try {
 27 |     // Activity.query method is used Query past activity in Google Drive.
 28 |     const response = DriveActivity.Activity.query(request);
 29 |     const activities = response.activities;
 30 |     if (!activities || activities.length === 0) {
 31 |       console.log('No activity.');
 32 |       return;
 33 |     }
 34 |     console.log('Recent activity:');
 35 |     for (const activity of activities) {
 36 |       // get time information of activity.
 37 |       const time = getTimeInfo(activity);
 38 |       // get the action details/information
 39 |       const action = getActionInfo(activity.primaryActionDetail);
 40 |       // get the actor's details of activity
 41 |       const actors = activity.actors.map(getActorInfo);
 42 |       // get target information of activity.
 43 |       const targets = activity.targets.map(getTargetInfo);
 44 |       // print the time,actor,action and targets of drive activity.
 45 |       console.log('%s: %s, %s, %s', time, actors, action, targets);
 46 |     }
 47 |   } catch (err) {
 48 |     // TODO (developer) - Handle error from drive activity API
 49 |     console.log('Failed with an error %s', err.message);
 50 |   }
 51 | }
 52 | 
 53 | /**
 54 |  * @param {object} object
 55 |  * @return {string}  Returns the name of a set property in an object, or else "unknown".
 56 |  */
 57 | function getOneOf(object) {
 58 |   for (const key in object) {
 59 |     return key;
 60 |   }
 61 |   return 'unknown';
 62 | }
 63 | 
 64 | /**
 65 |  * @param {object} activity Activity object.
 66 |  * @return {string} Returns a time associated with an activity.
 67 |  */
 68 | function getTimeInfo(activity) {
 69 |   if ('timestamp' in activity) {
 70 |     return activity.timestamp;
 71 |   }
 72 |   if ('timeRange' in activity) {
 73 |     return activity.timeRange.endTime;
 74 |   }
 75 |   return 'unknown';
 76 | }
 77 | 
 78 | /**
 79 |  * @param {object} actionDetail The primary action details of the activity.
 80 |  * @return {string} Returns the type of action.
 81 |  */
 82 | function getActionInfo(actionDetail) {
 83 |   return getOneOf(actionDetail);
 84 | }
 85 | 
 86 | /**
 87 |  * @param {object} user The User object.
 88 |  * @return {string}  Returns user information, or the type of user if not a known user.
 89 |  */
 90 | function getUserInfo(user) {
 91 |   if ('knownUser' in user) {
 92 |     const knownUser = user.knownUser;
 93 |     const isMe = knownUser.isCurrentUser || false;
 94 |     return isMe ? 'people/me' : knownUser.personName;
 95 |   }
 96 |   return getOneOf(user);
 97 | }
 98 | 
 99 | /**
100 |  * @param {object} actor The Actor object.
101 |  * @return {string} Returns actor information, or the type of actor if not a user.
102 |  */
103 | function getActorInfo(actor) {
104 |   if ('user' in actor) {
105 |     return getUserInfo(actor.user);
106 |   }
107 |   return getOneOf(actor);
108 | }
109 | 
110 | /**
111 |  * @param {object} target The Target object.
112 |  * @return {string} Returns the type of a target and an associated title.
113 |  */
114 | function getTargetInfo(target) {
115 |   if ('driveItem' in target) {
116 |     const title = target.driveItem.title || 'unknown';
117 |     return 'driveItem:"' + title + '"';
118 |   }
119 |   if ('drive' in target) {
120 |     const title = target.drive.title || 'unknown';
121 |     return 'drive:"' + title + '"';
122 |   }
123 |   if ('fileComment' in target) {
124 |     const parent = target.fileComment.parent || {};
125 |     const title = parent.title || 'unknown';
126 |     return 'fileComment:"' + title + '"';
127 |   }
128 |   return getOneOf(target) + ':unknown';
129 | }
130 | // [END drive_activity_v2_quickstart]
131 | 


--------------------------------------------------------------------------------
/drive/activity/quickstart.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | // [START drive_activity_quickstart]
17 | /**
18 |  * Lists activity for a Drive user.
19 |  */
20 | function listActivity() {
21 |   var optionalArgs = {
22 |     'source': 'drive.google.com',
23 |     'drive.ancestorId': 'root',
24 |     'pageSize': 10
25 |   };
26 |   var response = AppsActivity.Activities.list(optionalArgs);
27 |   var activities = response.activities;
28 |   if (activities && activities.length > 0) {
29 |     console.log('Recent activity:');
30 |     for (i = 0; i < activities.length; i++) {
31 |       var activity = activities[i];
32 |       var event = activity.combinedEvent;
33 |       var user = event.user;
34 |       var target = event.target;
35 |       if (user == null || target == null) {
36 |         continue;
37 |       } else {
38 |         var time = new Date(Number(event.eventTimeMillis));
39 |         console.log('%s: %s, %s, %s (%s)', time, user.name,
40 |               event.primaryEventType, target.name, target.mimeType);
41 |       }
42 |     }
43 |   } else {
44 |     console.log('No recent activity');
45 |   }
46 | }
47 | // [END drive_activity_quickstart]
48 | 


--------------------------------------------------------------------------------
/drive/quickstart/quickstart.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | // [START drive_quickstart]
17 | /**
18 |  * Lists the names and IDs of up to 10 files.
19 |  */
20 | function listFiles() {
21 |   try {
22 |     // Files.list method returns the list of files in drive.
23 |     const files = Drive.Files.list({
24 |       fields: 'nextPageToken, items(id, title)',
25 |       maxResults: 10
26 |     }).items;
27 |     // Print the title and id of files available in drive
28 |     for (const file of files) {
29 |       console.log('%s (%s)', file.title, file.id);
30 |     }
31 |   } catch (err) {
32 |     // TODO(developer)-Handle Files.list() exception
33 |     console.log('failed with error %s', err.message);
34 |   }
35 | }
36 | // [END drive_quickstart]
37 | 


--------------------------------------------------------------------------------
/forms-api/demos/AppsScriptFormsAPIWebApp/Code.gs:
--------------------------------------------------------------------------------
 1 | // Copyright 2021 Google LLC
 2 | //
 3 | // Licensed under the Apache License, Version 2.0 (the "License");
 4 | // you may not use this file except in compliance with the License.
 5 | // You may obtain a copy of the License at
 6 | //
 7 | //     https://www.apache.org/licenses/LICENSE-2.0
 8 | //
 9 | // Unless required by applicable law or agreed to in writing, software
10 | // distributed under the License is distributed on an "AS IS" BASIS,
11 | // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12 | // See the License for the specific language governing permissions and
13 | // limitations under the License.
14 | 
15 | function doGet() {
16 |   return HtmlService.createTemplateFromFile('Main').evaluate();
17 | }


--------------------------------------------------------------------------------
/forms-api/demos/AppsScriptFormsAPIWebApp/FormsAPI.gs:
--------------------------------------------------------------------------------
  1 | // Copyright 2021 Google LLC
  2 | //
  3 | // Licensed under the Apache License, Version 2.0 (the "License");
  4 | // you may not use this file except in compliance with the License.
  5 | // You may obtain a copy of the License at
  6 | //
  7 | //     https://www.apache.org/licenses/LICENSE-2.0
  8 | //
  9 | // Unless required by applicable law or agreed to in writing, software
 10 | // distributed under the License is distributed on an "AS IS" BASIS,
 11 | // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 12 | // See the License for the specific language governing permissions and
 13 | // limitations under the License.
 14 | 
 15 | // Global constants. Customize as needed.
 16 | const formsAPIUrl = 'https://forms.googleapis.com/v1/forms/';
 17 | const formId = '<YOUR_FORM_ID>';
 18 | const topicName = 'projects/<YOUR_TOPIC_PATH>';
 19 | 
 20 | // To setup pub/sub topics, see: 
 21 | //   https://cloud.google.com/pubsub/docs/building-pubsub-messaging-system
 22 | 
 23 | /**
 24 |  * Forms API Method: forms.create
 25 |  * POST https://forms.googleapis.com/v1/forms
 26 |  */
 27 | function create(title) {
 28 |   const accessToken = ScriptApp.getOAuthToken();
 29 |   const jsonTitle = JSON.stringify({
 30 |     info: {
 31 |       title: title
 32 |     }
 33 |   });
 34 | 
 35 |   const options = {
 36 |     'headers': {
 37 |       Authorization: 'Bearer ' + accessToken
 38 |     },
 39 |     'method': 'post',
 40 |     'contentType': 'application/json',
 41 |     'payload': jsonTitle
 42 |   };
 43 | 
 44 |   console.log('Forms API POST options was: ' + JSON.stringify(options));
 45 |   let response = UrlFetchApp.fetch(formsAPIUrl, options);
 46 |   console.log('Response from Forms API was: ' + JSON.stringify(response));
 47 | 
 48 |   return ('' + response);
 49 | }
 50 | 
 51 | /**
 52 |  * Forms API Method: forms.get
 53 |  * GET https://forms.googleapis.com/v1/forms/{formId}/responses/{responseId}
 54 |  */
 55 | function get(formId) {
 56 |   const accessToken = ScriptApp.getOAuthToken();
 57 | 
 58 |   const options = {
 59 |     'headers': {
 60 |       Authorization: 'Bearer ' + accessToken,
 61 |       Accept: 'application/json'
 62 |     },
 63 |     'method': 'get'
 64 |   };
 65 | 
 66 |   try {
 67 |     let response = UrlFetchApp.fetch(formsAPIUrl + formId, options);
 68 |     console.log('Response from Forms API was: ' + response);
 69 |     return ('' + response);
 70 |   } catch (e) {
 71 |     console.log(JSON.stringify(e));
 72 |     return ('Error:' + JSON.stringify(e) +
 73 |       '<br/><br/>Unable to find Form with formId:<br/>' + formId);
 74 |   }
 75 | }
 76 | 
 77 | /**
 78 |  * Forms API Method: forms.batchUpdate
 79 |  * POST https://forms.googleapis.com/v1/forms/{formId}:batchUpdate
 80 |  */
 81 | function batchUpdate(formId) {
 82 |   const accessToken = ScriptApp.getOAuthToken();
 83 | 
 84 |   // Request body to add a description to a Form
 85 |   const update = {
 86 |     'requests': [{
 87 |       'updateFormInfo': {
 88 |         'info': {
 89 |           'description': 'Please complete this quiz based on this week\'s readings for class.'
 90 |         },
 91 |         'updateMask': 'description'
 92 |       }
 93 |     }]
 94 |   }
 95 | 
 96 |   const options = {
 97 |     'headers': {
 98 |       Authorization: 'Bearer ' + accessToken
 99 |     },
100 |     'method': 'post',
101 |     'contentType': 'application/json',
102 |     'payload': JSON.stringify(update),
103 |     'muteHttpExceptions': true,
104 |   };
105 | 
106 |   let response = UrlFetchApp.fetch(formsAPIUrl + formId + ':batchUpdate',
107 |     options);
108 |   console.log('Response code from API: ' + response.getResponseCode());
109 |   return (response.getResponseCode());
110 | }
111 | 
112 | /**
113 |  * Forms API Method: forms.responses.get
114 |  * GET https://forms.googleapis.com/v1/forms/{formId}/responses/{responseId}
115 |  */
116 | function responsesGet(formId, responseId) {
117 |   const accessToken = ScriptApp.getOAuthToken();
118 | 
119 |   var options = {
120 |     'headers': {
121 |       Authorization: 'Bearer ' + accessToken,
122 |       Accept: 'application/json'
123 |     },
124 |     'method': 'get'
125 |   };
126 | 
127 |   try {
128 |     var response = UrlFetchApp.fetch(formsAPIUrl + formId + '/' + 'responses/' +
129 |       responseId, options);
130 |     console.log('Response from Forms.responses.get was: ' + response);
131 |     return ('' + response);
132 |   } catch (e) {
133 |     console.log(JSON.stringify(e));
134 |     return ('Error:' + JSON.stringify(e))
135 |   }
136 | }
137 | 
138 | /**
139 |  * Forms API Method: forms.responses.list
140 |  * GET https://forms.googleapis.com/v1/forms/{formId}/responses
141 |  */
142 | function responsesList(formId) {
143 |   const accessToken = ScriptApp.getOAuthToken();
144 | 
145 |   var options = {
146 |     'headers': {
147 |       Authorization: 'Bearer ' + accessToken,
148 |       Accept: 'application/json'
149 |     },
150 |     'method': 'get'
151 |   };
152 | 
153 |   try {
154 |     var response = UrlFetchApp.fetch(formsAPIUrl + formId + '/' + 'responses',
155 |       options);
156 |     console.log('Response from Forms.responses was: ' + response);
157 |     return ('' + response);
158 |   } catch (e) {
159 |     console.log(JSON.stringify(e));
160 |     return ('Error:' + JSON.stringify(e))
161 |   }
162 | }
163 | 
164 | /**
165 |  * Forms API Method: forms.watches.create
166 |  * POST https://forms.googleapis.com/v1/forms/{formId}/watches
167 |  */
168 | function createWatch(formId) {
169 |   let accessToken = ScriptApp.getOAuthToken();
170 | 
171 |   var myWatch = {
172 |     'watch': {
173 |       'target': {
174 |         'topic': {
175 |           'topicName': topicName
176 |         }
177 |       },
178 |       'eventType': 'RESPONSES',
179 |     }
180 |   };
181 |   console.log('myWatch is: ' + JSON.stringify(myWatch));
182 | 
183 |   var options = {
184 |     'headers': {
185 |       Authorization: 'Bearer ' + accessToken
186 |     },
187 |     'method': 'post',
188 |     'contentType': 'application/json',
189 |     'payload': JSON.stringify(myWatch),
190 |     'muteHttpExceptions': false,
191 |   };
192 |   console.log('options are: ' + JSON.stringify(options));
193 |   console.log('formsAPIURL was: ' + formsAPIUrl);
194 | 
195 |   var response = UrlFetchApp.fetch(formsAPIUrl + formId + '/' + 'watches',
196 |     options);
197 |   console.log(response);
198 |   return ('' + response);
199 | }
200 | 
201 | /**
202 |  * Forms API Method: forms.watches.delete
203 |  * DELETE https://forms.googleapis.com/v1/forms/{formId}/watches/{watchId}
204 |  */
205 | function deleteWatch(formId, watchId) {
206 |   let accessToken = ScriptApp.getOAuthToken();
207 | 
208 |   console.log('formsAPIUrl is: ' + formsAPIUrl);
209 | 
210 |   var options = {
211 |     'headers': {
212 |       Authorization: 'Bearer ' + accessToken,
213 |       Accept: 'application/json'
214 |     },
215 |     'method': 'delete',
216 |     'muteHttpExceptions': false,
217 |   };
218 | 
219 |   try {
220 |     var response = UrlFetchApp.fetch(formsAPIUrl + formId + '/' + 'watches/' +
221 |       watchId, options);
222 |     console.log(response);
223 |     return ('' + response);
224 |   } catch (e) {
225 |     console.log('API Error: ' + JSON.stringify(e));
226 |     return (JSON.stringify(e));
227 |   }
228 | 
229 | }
230 | 
231 | /** 
232 |  * Forms API Method: forms.watches.list
233 |  * GET https://forms.googleapis.com/v1/forms/{formId}/watches
234 |  */
235 | function watchesList(formId) {
236 |   console.log('formId is: ' + formId);
237 |   let accessToken = ScriptApp.getOAuthToken();
238 |   var options = {
239 |     'headers': {
240 |       Authorization: 'Bearer ' + accessToken,
241 |       Accept: 'application/json'
242 |     },
243 |     'method': 'get'
244 |   };
245 |   try {
246 |     var response = UrlFetchApp.fetch(formsAPIUrl + formId + '/' + 'watches',
247 |       options);
248 |     console.log(response);
249 |     return ('' + response);
250 |   } catch (e) {
251 |     console.log('API Error: ' + JSON.stringify(e));
252 |     return (JSON.stringify(e));
253 |   }
254 | }
255 | 
256 | /**
257 |  * Forms API Method: forms.watches.renew
258 |  * POST https://forms.googleapis.com/v1/forms/{formId}/watches/{watchId}:renew
259 |  */
260 | function renewWatch(formId, watchId) {
261 |   let accessToken = ScriptApp.getOAuthToken();
262 | 
263 |   var options = {
264 |     'headers': {
265 |       Authorization: 'Bearer ' + accessToken,
266 |       Accept: 'application/json'
267 |     },
268 |     'method': 'post'
269 |   };
270 | 
271 |   try {
272 |     var response = UrlFetchApp.fetch(formsAPIUrl + formId + '/' + 'watches/' +
273 |       watchId + ':renew', options);
274 |     console.log(response);
275 |     return ('' + response);
276 |   } catch (e) {
277 |     console.log('API Error: ' + JSON.stringify(e));
278 |     return (JSON.stringify(e));
279 |   }
280 | }
281 | 


--------------------------------------------------------------------------------
/forms-api/demos/AppsScriptFormsAPIWebApp/README.md:
--------------------------------------------------------------------------------
 1 | # Google Forms API Apps Script web app
 2 | 
 3 | This solution demonstrates how to interact with the new Google Forms API directly from Apps Script using REST calls, not the native Apps Script Forms Service.
 4 | 
 5 | ## General setup
 6 | 
 7 | * Enable the Forms API for your Google Cloud project
 8 | 
 9 | ## Web app setup
10 | 
11 | 1. Create a new blank Apps Script project.
12 | 
13 | 1. Click **Project Settings**, then:
14 |     * Check **Show "appsscript.json" manifest file in editor**.
15 |     * Enter the project number of the Google Cloud project that has the
16 |        Forms API enabled and click **Change project**.
17 | 
18 | 1. Copy the contents of the Apps Script, HTML and JSON files into your
19 |    Apps Script project.
20 | 
21 | 1. Edit the `FormsAPI.gs` file to customize the constants.
22 |     * `formId`: Choose a `formId` from an existing form.
23 |     * `topicName`: Optional, if using watches (pub/sub).
24 | 
25 |       Note: Further project setup is required to use the watch features. To
26 |       set up pub/sub topics, see
27 |       [Google Cloud Pubsub](https://cloud.google.com/pubsub/docs/building-pubsub-messaging-system)
28 |       for additional details.
29 | 
30 | 1. Deploy the project as a Web app, authorize access and click on the
31 |    deployment URL.
32 | 
33 | 


--------------------------------------------------------------------------------
/forms-api/snippets/README.md:
--------------------------------------------------------------------------------
1 | # Forms API
2 | 
3 | To run, you must set up your GCP project to use the Forms API.
4 | See: [Forms API](https://developers.google.com/forms/api/)
5 | 


--------------------------------------------------------------------------------
/forms-api/snippets/retrieve_all_responses.gs:
--------------------------------------------------------------------------------
 1 | # Copyright 2022 Google LLC
 2 | # 
 3 | # Licensed under the Apache License, Version 2.0 (the "License");
 4 | # you may not use this file except in compliance with the License.
 5 | # You may obtain a copy of the License at
 6 | # 
 7 | #     https://www.apache.org/licenses/LICENSE-2.0
 8 | # 
 9 | # Unless required by applicable law or agreed to in writing, software
10 | # distributed under the License is distributed on an "AS IS" BASIS,
11 | # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12 | # See the License for the specific language governing permissions and
13 | # limitations under the License.
14 | 
15 |  # [START forms_retrieve_all_responses]
16 |  function callFormsAPI() {
17 |   console.log('Calling the Forms API!');
18 |   var formId = '<YOUR_FORM_ID>';
19 | 
20 |   // Get OAuth Token
21 |  var OAuthToken = ScriptApp.getOAuthToken();
22 |  console.log('OAuth token is: ' + OAuthToken);
23 |  var formsAPIUrl = 'https://forms.googleapis.com/v1/forms/' + formId + '/' + 'responses';
24 |  console.log('formsAPIUrl is: ' + formsAPIUrl);
25 |  var options = {
26 |     'headers': {
27 |       Authorization: 'Bearer ' + OAuthToken,
28 |       Accept: 'application/json'
29 |     },
30 |     'method': 'get'
31 |   };  
32 | var response = UrlFetchApp.fetch(formsAPIUrl, options);
33 |  console.log('Response from forms.responses was: ' + response);
34 | }
35 | # [END forms_retrieve_all_responses]
36 | 


--------------------------------------------------------------------------------
/forms/README.md:
--------------------------------------------------------------------------------
 1 | # Google Forms Add-ons
 2 | 
 3 | ## [Notification Add-on](https://developers.google.com/apps-script/quickstart/forms-add-on)
 4 | 
 5 | This add-on allows Form creators to automatically
 6 | send email notifications when a form is submitted. In addition, the
 7 | add-on allows form creators to be notified when they have received
 8 | responses.
 9 | 
10 | ![Form Notifications](https://developers.google.com/apps-script/images/quickstart-form-notifications.png)
11 | 


--------------------------------------------------------------------------------
/forms/notifications/README.md:
--------------------------------------------------------------------------------
 1 | # Form Notifications Add-on for Google Forms
 2 | 
 3 | A sample Google Apps Script add-on for Google Forms.
 4 | 
 5 | ## Introduction
 6 | 
 7 | Google Apps Script allows developers to construct 'add-ons' -- small
 8 | applications which extend and support Google Docs, Google Sheets,
 9 | and now Google Forms.
10 | 
11 | This sample shows how to construct a Google Forms add-on called
12 | [Form Notifications](https://chrome.google.com/webstore/detail/form-notifications/bbpdeojefjfhaelgljjcadpcckdfcdod).
13 | This add-on allows Form creators to automatically
14 | send email notifications when a form is submitted. In addition, the
15 | add-on allows form creators to be notified when they have received
16 | responses.
17 | 
18 | This sample makes use of the following Apps Script concepts:
19 | 
20 | * Google Forms Add-ons
21 | * Events and Triggers (specifically, onFormSubmit triggers)
22 | * Templated HTML
23 | * Dialogs and Sidebars
24 | * Sending Email with Apps Script
25 | 
26 | ## Getting Started
27 | 
28 | You can install the [Form Notifications](https://chrome.google.com/webstore/detail/form-notifications/bbpdeojefjfhaelgljjcadpcckdfcdod) add-on from the add-on
29 | store.
30 | 
31 | If you would like to try re-building it yourself, you can follow the
32 | directions provided in the [Add-on for Google Forms Quickstart](https://developers.google.com/apps-script/quickstart/forms-add-on) documentation.
33 | 
34 | ## Learn more
35 | 
36 | To continue learning about how to extend Google Docs, Sheets and Forms
37 | with Apps Script, take a look at the following resources:
38 | 
39 | * [Guide to Add-ons](https://developers.google.com/apps-script/add-ons/)
40 | * [Forms Service Reference](https://developers.google.com/apps-script/reference/forms)
41 | 
42 | ## Support
43 | 
44 | - Stack Overflow Tag: [google-apps-script](http://stackoverflow.com/questions/tagged/google-apps-script)
45 | 


--------------------------------------------------------------------------------
/forms/notifications/notification.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | // [START apps_script_forms_notifications_quickstart]
 17 | /**
 18 |  * @OnlyCurrentDoc
 19 |  *
 20 |  * The above comment directs Apps Script to limit the scope of file
 21 |  * access for this add-on. It specifies that this add-on will only
 22 |  * attempt to read or modify the files in which the add-on is used,
 23 |  * and not all of the user's files. The authorization request message
 24 |  * presented to users will reflect this limited scope.
 25 |  */
 26 | 
 27 | /**
 28 |  * A global constant String holding the title of the add-on. This is
 29 |  * used to identify the add-on in the notification emails.
 30 |  */
 31 | const ADDON_TITLE = 'Form Notifications';
 32 | 
 33 | /**
 34 |  * A global constant 'notice' text to include with each email
 35 |  * notification.
 36 |  */
 37 | const NOTICE = 'Form Notifications was created as an sample add-on, and is' +
 38 |   ' meant for' +
 39 | 'demonstration purposes only. It should not be used for complex or important' +
 40 | 'workflows. The number of notifications this add-on produces are limited by the' +
 41 | 'owner\'s available email quota; it will not send email notifications if the' +
 42 | 'owner\'s daily email quota has been exceeded. Collaborators using this add-on on' +
 43 | 'the same form will be able to adjust the notification settings, but will not be' +
 44 | 'able to disable the notification triggers set by other collaborators.';
 45 | 
 46 | /**
 47 |  * Adds a custom menu to the active form to show the add-on sidebar.
 48 |  *
 49 |  * @param {object} e The event parameter for a simple onOpen trigger. To
 50 |  *     determine which authorization mode (ScriptApp.AuthMode) the trigger is
 51 |  *     running in, inspect e.authMode.
 52 |  */
 53 | function onOpen(e) {
 54 |   try {
 55 |     FormApp.getUi()
 56 |         .createAddonMenu()
 57 |         .addItem('Configure notifications', 'showSidebar')
 58 |         .addItem('About', 'showAbout')
 59 |         .addToUi();
 60 |   } catch (e) {
 61 |     // TODO (Developer) - Handle exception
 62 |     console.log('Failed with error: %s', e.error);
 63 |   }
 64 | }
 65 | 
 66 | /**
 67 |  * Runs when the add-on is installed.
 68 |  *
 69 |  * @param {object} e The event parameter for a simple onInstall trigger. To
 70 |  *     determine which authorization mode (ScriptApp.AuthMode) the trigger is
 71 |  *     running in, inspect e.authMode. (In practice, onInstall triggers always
 72 |  *     run in AuthMode.FULL, but onOpen triggers may be AuthMode.LIMITED or
 73 |  *     AuthMode.NONE).
 74 |  */
 75 | function onInstall(e) {
 76 |   onOpen(e);
 77 | }
 78 | 
 79 | /**
 80 |  * Opens a sidebar in the form containing the add-on's user interface for
 81 |  * configuring the notifications this add-on will produce.
 82 |  */
 83 | function showSidebar() {
 84 |   try {
 85 |     const ui = HtmlService.createHtmlOutputFromFile('sidebar')
 86 |         .setTitle('Form Notifications');
 87 |     FormApp.getUi().showSidebar(ui);
 88 |   } catch (e) {
 89 |     // TODO (Developer) - Handle exception
 90 |     console.log('Failed with error: %s', e.error);
 91 |   }
 92 | }
 93 | 
 94 | /**
 95 |  * Opens a purely-informational dialog in the form explaining details about
 96 |  * this add-on.
 97 |  */
 98 | function showAbout() {
 99 |   try {
100 |     const ui = HtmlService.createHtmlOutputFromFile('about')
101 |         .setWidth(420)
102 |         .setHeight(270);
103 |     FormApp.getUi().showModalDialog(ui, 'About Form Notifications');
104 |   } catch (e) {
105 |     // TODO (Developer) - Handle exception
106 |     console.log('Failed with error: %s', e.error);
107 |   }
108 | }
109 | 
110 | /**
111 |  * Save sidebar settings to this form's Properties, and update the onFormSubmit
112 |  * trigger as needed.
113 |  *
114 |  * @param {Object} settings An Object containing key-value
115 |  *      pairs to store.
116 |  */
117 | function saveSettings(settings) {
118 |   try {
119 |     PropertiesService.getDocumentProperties().setProperties(settings);
120 |     adjustFormSubmitTrigger();
121 |   } catch (e) {
122 |     // TODO (Developer) - Handle exception
123 |     console.log('Failed with error: %s', e.error);
124 |   }
125 | }
126 | 
127 | /**
128 |  * Queries the User Properties and adds additional data required to populate
129 |  * the sidebar UI elements.
130 |  *
131 |  * @return {Object} A collection of Property values and
132 |  *     related data used to fill the configuration sidebar.
133 |  */
134 | function getSettings() {
135 |   try {
136 |     const settings = PropertiesService.getDocumentProperties().getProperties();
137 | 
138 |     // Use a default email if the creator email hasn't been provided yet.
139 |     if (!settings.creatorEmail) {
140 |       settings.creatorEmail = Session.getEffectiveUser().getEmail();
141 |     }
142 | 
143 |     // Get text field items in the form and compile a list
144 |     //   of their titles and IDs.
145 |     const form = FormApp.getActiveForm();
146 |     const textItems = form.getItems(FormApp.ItemType.TEXT);
147 | 
148 |     settings.textItems = [];
149 |     for (let i = 0; i < textItems.length; i++) {
150 |       settings.textItems.push({
151 |         title: textItems[i].getTitle(),
152 |         id: textItems[i].getId()
153 |       });
154 |     }
155 |     return settings;
156 |   } catch (e) {
157 |     // TODO (Developer) - Handle exception
158 |     console.log('Failed with error: %s', e.error);
159 |   }
160 | }
161 | 
162 | /**
163 |  * Adjust the onFormSubmit trigger based on user's requests.
164 |  */
165 | function adjustFormSubmitTrigger() {
166 |   try {
167 |     const form = FormApp.getActiveForm();
168 |     const triggers = ScriptApp.getUserTriggers(form);
169 |     const settings = PropertiesService.getDocumentProperties();
170 |     const triggerNeeded =
171 |       settings.getProperty('creatorNotify') === 'true' ||
172 |       settings.getProperty('respondentNotify') === 'true';
173 | 
174 |     // Create a new trigger if required; delete existing trigger
175 |     // if it is not needed.
176 |     let existingTrigger = null;
177 |     for (let i = 0; i < triggers.length; i++) {
178 |       if (triggers[i].getEventType() === ScriptApp.EventType.ON_FORM_SUBMIT) {
179 |         existingTrigger = triggers[i];
180 |         break;
181 |       }
182 |     }
183 |     if (triggerNeeded && !existingTrigger) {
184 |       const trigger = ScriptApp.newTrigger('respondToFormSubmit')
185 |           .forForm(form)
186 |           .onFormSubmit()
187 |           .create();
188 |     } else if (!triggerNeeded && existingTrigger) {
189 |       ScriptApp.deleteTrigger(existingTrigger);
190 |     }
191 |   } catch (e) {
192 |     // TODO (Developer) - Handle exception
193 |     console.log('Failed with error: %s', e.error);
194 |   }
195 | }
196 | 
197 | /**
198 |  * Responds to a form submission event if an onFormSubmit trigger has been
199 |  * enabled.
200 |  *
201 |  * @param {Object} e The event parameter created by a form
202 |  *      submission; see
203 |  *      https://developers.google.com/apps-script/understanding_events
204 |  */
205 | function respondToFormSubmit(e) {
206 |   try {
207 |     const settings = PropertiesService.getDocumentProperties();
208 |     const authInfo = ScriptApp.getAuthorizationInfo(ScriptApp.AuthMode.FULL);
209 | 
210 |     // Check if the actions of the trigger require authorizations that have not
211 |     // been supplied yet -- if so, warn the active user via email (if possible).
212 |     // This check is required when using triggers with add-ons to maintain
213 |     // functional triggers.
214 |     if (authInfo.getAuthorizationStatus() ===
215 |       ScriptApp.AuthorizationStatus.REQUIRED) {
216 |       // Re-authorization is required. In this case, the user needs to be alerted
217 |       // that they need to reauthorize; the normal trigger action is not
218 |       // conducted, since authorization needs to be provided first. Send at
219 |       // most one 'Authorization Required' email a day, to avoid spamming users
220 |       // of the add-on.
221 |       sendReauthorizationRequest();
222 |     } else {
223 |       // All required authorizations have been granted, so continue to respond to
224 |       // the trigger event.
225 | 
226 |       // Check if the form creator needs to be notified; if so, construct and
227 |       // send the notification.
228 |       if (settings.getProperty('creatorNotify') === 'true') {
229 |         sendCreatorNotification();
230 |       }
231 | 
232 |       // Check if the form respondent needs to be notified; if so, construct and
233 |       // send the notification. Be sure to respect the remaining email quota.
234 |       if (settings.getProperty('respondentNotify') === 'true' &&
235 |         MailApp.getRemainingDailyQuota() > 0) {
236 |         sendRespondentNotification(e.response);
237 |       }
238 |     }
239 |   } catch (e) {
240 |     // TODO (Developer) - Handle exception
241 |     console.log('Failed with error: %s', e.error);
242 |   }
243 | }
244 | 
245 | 
246 | /**
247 |  * Called when the user needs to reauthorize. Sends the user of the
248 |  * add-on an email explaining the need to reauthorize and provides
249 |  * a link for the user to do so. Capped to send at most one email
250 |  * a day to prevent spamming the users of the add-on.
251 |  */
252 | function sendReauthorizationRequest() {
253 |   try {
254 |     const settings = PropertiesService.getDocumentProperties();
255 |     const authInfo = ScriptApp.getAuthorizationInfo(ScriptApp.AuthMode.FULL);
256 |     const lastAuthEmailDate = settings.getProperty('lastAuthEmailDate');
257 |     const today = new Date().toDateString();
258 |     if (lastAuthEmailDate !== today) {
259 |       if (MailApp.getRemainingDailyQuota() > 0) {
260 |         const template =
261 |           HtmlService.createTemplateFromFile('authorizationEmail');
262 |         template.url = authInfo.getAuthorizationUrl();
263 |         template.notice = NOTICE;
264 |         const message = template.evaluate();
265 |         MailApp.sendEmail(Session.getEffectiveUser().getEmail(),
266 |             'Authorization Required',
267 |             message.getContent(), {
268 |               name: ADDON_TITLE,
269 |               htmlBody: message.getContent()
270 |             });
271 |       }
272 |       settings.setProperty('lastAuthEmailDate', today);
273 |     }
274 |   } catch (e) {
275 |     // TODO (Developer) - Handle exception
276 |     console.log('Failed with error: %s', e.error);
277 |   }
278 | }
279 | 
280 | /**
281 |  * Sends out creator notification email(s) if the current number
282 |  * of form responses is an even multiple of the response step
283 |  * setting.
284 |  */
285 | function sendCreatorNotification() {
286 |   try {
287 |     const form = FormApp.getActiveForm();
288 |     const settings = PropertiesService.getDocumentProperties();
289 |     let responseStep = settings.getProperty('responseStep');
290 |     responseStep = responseStep ? parseInt(responseStep) : 10;
291 | 
292 |     // If the total number of form responses is an even multiple of the
293 |     // response step setting, send a notification email(s) to the form
294 |     // creator(s). For example, if the response step is 10, notifications
295 |     // will be sent when there are 10, 20, 30, etc. total form responses
296 |     // received.
297 |     if (form.getResponses().length % responseStep === 0) {
298 |       const addresses = settings.getProperty('creatorEmail').split(',');
299 |       if (MailApp.getRemainingDailyQuota() > addresses.length) {
300 |         const template =
301 |           HtmlService.createTemplateFromFile('creatorNotification');
302 |         template.summary = form.getSummaryUrl();
303 |         template.responses = form.getResponses().length;
304 |         template.title = form.getTitle();
305 |         template.responseStep = responseStep;
306 |         template.formUrl = form.getEditUrl();
307 |         template.notice = NOTICE;
308 |         const message = template.evaluate();
309 |         MailApp.sendEmail(settings.getProperty('creatorEmail'),
310 |             form.getTitle() + ': Form submissions detected',
311 |             message.getContent(), {
312 |               name: ADDON_TITLE,
313 |               htmlBody: message.getContent()
314 |             });
315 |       }
316 |     }
317 |   } catch (e) {
318 |     // TODO (Developer) - Handle exception
319 |     console.log('Failed with error: %s', e.error);
320 |   }
321 | }
322 | 
323 | /**
324 |  * Sends out respondent notification emails.
325 |  *
326 |  * @param {FormResponse} response FormResponse object of the event
327 |  *      that triggered this notification
328 |  */
329 | function sendRespondentNotification(response) {
330 |   try {
331 |     const form = FormApp.getActiveForm();
332 |     const settings = PropertiesService.getDocumentProperties();
333 |     const emailId = settings.getProperty('respondentEmailItemId');
334 |     const emailItem = form.getItemById(parseInt(emailId));
335 |     const respondentEmail = response.getResponseForItem(emailItem)
336 |         .getResponse();
337 |     if (respondentEmail) {
338 |       const template =
339 |         HtmlService.createTemplateFromFile('respondentNotification');
340 |       template.paragraphs = settings.getProperty('responseText').split('\n');
341 |       template.notice = NOTICE;
342 |       const message = template.evaluate();
343 |       MailApp.sendEmail(respondentEmail,
344 |           settings.getProperty('responseSubject'),
345 |           message.getContent(), {
346 |             name: form.getTitle(),
347 |             htmlBody: message.getContent()
348 |           });
349 |     }
350 |   } catch (e) {
351 |     // TODO (Developer) - Handle exception
352 |     console.log('Failed with error: %s', e.error);
353 |   }
354 | }
355 | // [END apps_script_forms_notifications_quickstart]
356 | 


--------------------------------------------------------------------------------
/gmail-sentiment-analysis/Cards.gs:
--------------------------------------------------------------------------------
 1 | /*
 2 | Copyright 2024-2025 Google LLC
 3 | 
 4 | Licensed under the Apache License, Version 2.0 (the "License");
 5 | you may not use this file except in compliance with the License.
 6 | You may obtain a copy of the License at
 7 | 
 8 |     https://www.apache.org/licenses/LICENSE-2.0
 9 | 
10 | Unless required by applicable law or agreed to in writing, software
11 | distributed under the License is distributed on an "AS IS" BASIS,
12 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 | See the License for the specific language governing permissions and
14 | limitations under the License.
15 | */
16 | 
17 | /**
18 |  * Builds the card to display in the side panel of gmail.
19 |  * @return {CardService.Card} The card to show to the user.
20 |  */
21 | 
22 | function buildHomepageCard() {
23 |   const imageUrl = 'https://fonts.gstatic.com/s/i/googlematerialicons/dynamic_feed/v6/black-24dp/1x/gm_dynamic_feed_black_24dp.png';
24 | 
25 |   const cardHeader = CardService.newCardHeader()
26 |     .setImageUrl(imageUrl)
27 |     .setImageStyle(CardService.ImageStyle.CIRCLE)
28 |     .setTitle("Analyze your Gmail");
29 | 
30 |   const analyzeSentimentAction = CardService.newAction()
31 |     .setFunctionName('analyzeSentiment');
32 |   const analyzeSentimentBtn = CardService.newTextButton()
33 |     .setText('Analyze emails')
34 |     .setOnClickAction(analyzeSentimentAction)
35 |     .setTextButtonStyle(CardService.TextButtonStyle.FILLED)
36 |     .setBackgroundColor('#FF0000');
37 | 
38 |   const generateSampleEmailAction = CardService.newAction()
39 |     .setFunctionName('generateSampleEmails');
40 | 
41 |   const generateSampleEmailsBtn = CardService.newTextButton()
42 |     .setText('Generate sample emails')
43 |     .setOnClickAction(generateSampleEmailAction)
44 |     .setTextButtonStyle(CardService.TextButtonStyle.FILLED)
45 |     .setBackgroundColor('#34A853');
46 | 
47 |   const buttonSet = CardService.newButtonSet()
48 |     .addButton(generateSampleEmailsBtn)
49 |     .addButton(analyzeSentimentBtn);
50 | 
51 |   const section = CardService.newCardSection()
52 |     .addWidget(buttonSet);
53 | 
54 |   const card = CardService.newCardBuilder()
55 |     .setHeader(cardHeader)
56 |     .addSection(section);
57 | 
58 |   return card.build();
59 | }
60 | 
61 | function buildNotificationResponse(notificationText) {
62 |   const notification = CardService.newNotification().setText(notificationText);
63 | 
64 |   const actionResponse = CardService.newActionResponseBuilder()
65 |     .setNotification(notification);
66 | 
67 |   return actionResponse.build();
68 | }
69 | 


--------------------------------------------------------------------------------
/gmail-sentiment-analysis/Code.gs:
--------------------------------------------------------------------------------
 1 | /*
 2 | Copyright 2024 Google LLC
 3 | 
 4 | Licensed under the Apache License, Version 2.0 (the "License");
 5 | you may not use this file except in compliance with the License.
 6 | You may obtain a copy of the License at
 7 | 
 8 |     https://www.apache.org/licenses/LICENSE-2.0
 9 | 
10 | Unless required by applicable law or agreed to in writing, software
11 | distributed under the License is distributed on an "AS IS" BASIS,
12 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 | See the License for the specific language governing permissions and
14 | limitations under the License.
15 | */
16 | 
17 | /**
18 |  * Callback for rendering the homepage card.
19 |  * @return {CardService.Card} The card to show to the user.
20 |  */
21 | function onHomepageTrigger(e) {
22 |   return buildHomepageCard();
23 | }
24 | 


--------------------------------------------------------------------------------
/gmail-sentiment-analysis/Gmail.gs:
--------------------------------------------------------------------------------
  1 | /*
  2 | Copyright 2024-2025 Google LLC
  3 | 
  4 | Licensed under the Apache License, Version 2.0 (the "License");
  5 | you may not use this file except in compliance with the License.
  6 | You may obtain a copy of the License at
  7 | 
  8 |     https://www.apache.org/licenses/LICENSE-2.0
  9 | 
 10 | Unless required by applicable law or agreed to in writing, software
 11 | distributed under the License is distributed on an "AS IS" BASIS,
 12 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 | See the License for the specific language governing permissions and
 14 | limitations under the License.
 15 | */
 16 | 
 17 | /**
 18 |  * Callback for initiating the sentiment analysis.
 19 |  * @return {CardService.Card} The card to show to the user.
 20 |  */
 21 | 
 22 | function analyzeSentiment() {
 23 |   analyzeAndLabelEmailSentiment();
 24 |   return buildNotificationResponse("Successfully completed sentiment analysis");
 25 | }
 26 | 
 27 | /**
 28 |  * Analyzes the sentiment of recent emails in the inbox and labels threads with
 29 |  * the appropriate sentiment label.
 30 |  */
 31 | function analyzeAndLabelEmailSentiment() {
 32 |   const positiveLabelName = "HAPPY TONE 😊";
 33 |   const neutralLabelName = "NEUTRAL TONE 😐";
 34 |   const negativeLabelName = "UPSET TONE 😡";
 35 |   const maxThreads = 10;
 36 | 
 37 |   // Get the label, or create it if it doesn't exist.
 38 |   const positiveLabel = GmailApp.getUserLabelByName(positiveLabelName) || GmailApp.createLabel(positiveLabelName);
 39 |   const neutralLabel = GmailApp.getUserLabelByName(neutralLabelName) || GmailApp.createLabel(neutralLabelName);
 40 |   const negativeLabel = GmailApp.getUserLabelByName(negativeLabelName) || GmailApp.createLabel(negativeLabelName);
 41 | 
 42 |   // Get the first 'maxThreads' threads from the inbox.
 43 |   const threads = GmailApp.getInboxThreads(0, maxThreads);
 44 | 
 45 |   // Process each thread.
 46 |   for (const thread of threads) {
 47 |     const messages = thread.getMessages();
 48 | 
 49 |     // Process each message within the thread.
 50 |     for (const message of messages) {
 51 |       const emailText = message.getPlainBody();
 52 |       const sentiment = processSentiment(emailText);
 53 | 
 54 |       switch (sentiment) {
 55 |         case 'positive':
 56 |           thread.addLabel(positiveLabel);
 57 |           break;
 58 |         case 'neutral':
 59 |           thread.addLabel(neutralLabel);
 60 |           break;
 61 |         case 'negative':
 62 |           thread.addLabel(negativeLabel);
 63 |           break;
 64 |         default:
 65 |           break;
 66 |       }
 67 |     }
 68 |   }
 69 | }
 70 | 
 71 | /**
 72 |  * Create sample emails
 73 |  */
 74 | function generateSampleEmails() {
 75 |   // Get active user's email
 76 |   const userEmail = Session.getActiveUser().getEmail();
 77 | 
 78 |   // Send emails
 79 |   GmailApp.sendEmail(
 80 |     userEmail,
 81 |     'Thank you for amazing service!',
 82 |     'Hi, I really enjoyed working with you. Thank you again!',
 83 |     {
 84 |       name: 'Customer A',
 85 |     },
 86 |   );
 87 | 
 88 |   GmailApp.sendEmail(
 89 |     userEmail,
 90 |     'Request for information',
 91 |     'Hello, I need more information on your recent product launch. Thank you.',
 92 |     {
 93 |       name: 'Customer B',
 94 |     },
 95 |   );
 96 | 
 97 |   GmailApp.sendEmail(
 98 |     userEmail,
 99 |     'Complaint!',
100 |     '',
101 |     {
102 |       name: 'Customer C',
103 |       htmlBody: `<p>Hello, You are late in delivery, again.</p>
104 |       <p>Please contact me ASAP before I cancel our subscription.</p>`,
105 |     },
106 |   );
107 | 
108 |   return buildNotificationResponse("Successfully generated sample emails");
109 | }
110 | 


--------------------------------------------------------------------------------
/gmail-sentiment-analysis/README.md:
--------------------------------------------------------------------------------
 1 | # Gmail Sentiment Analysis with Gemini and Vertex AI
 2 | 
 3 | This project guides you through building a Google Workspace Add-on that
 4 | leverages Gemini and Vertex AI for conducting sentiment analysis on emails in
 5 | Gmail. The add-on automatically identifies emails with a negative tone and
 6 | labels them accordingly, helping prioritize customer service responses or
 7 | identify potentially sensitive emails.
 8 | 
 9 | ## What you'll learn
10 | 
11 | * Build a Google Workspace Add-on
12 | * Integrate Vertex AI with Google Workspace
13 | * Implement OAuth2 authentication
14 | * Apply sentiment analysis
15 | * Utilize Apps Script
16 | 
17 | ## Setup and Requirements
18 | 
19 | * **Web Browser:** Chrome (recommended)
20 | * **Dedicated Time:** Set aside uninterrupted time.
21 | * **Incognito/Private Window:**  **Important:** Use an incognito or private browsing window to prevent conflicts with your personal accounts.
22 | 
23 | ## Steps
24 | 
25 | 
26 | ### Set up Cloud Console
27 | 
28 | 1. Open the provided **Cloud Console URL** in your incognito window.
29 | 2. Check **I agree** and click **AGREE AND CONTINUE**.
30 | 
31 | ### Enable Vertex AI API
32 | 
33 | 1. Open the provided link to enable the Vertex AI API.
34 | 2. Click **Next** to confirm the project.
35 | 3. Click **Enable**.
36 | 
37 | 
38 | ### Set Up the Apps Script Project
39 | 
40 | 1. Open the provided **Apps Script link** in a new incognito tab.
41 | 2. Click **New project**.
42 | 3. Rename the project to "Gmail Sentiment Analysis with Gemini and Vertex AI".
43 | 4. In Project Settings (gear icon), select "Show 'appsscript.json' manifest file in editor".
44 | 5. In Project Settings, under Google Cloud Platform (GCP) Project, click **Change project**.
45 | 6. Copy the **Project number** (numerical value, not Project ID) from Cloud Console.
46 | 7. Paste the Project number into the Apps Script project settings and click **Set project**.
47 | 8. Click the **OAuth Consent details** link in the error message.
48 | 9. Click **CONFIGURE CONSENT SCREEN**.
49 | 10. Select **Internal** for User Type and click **CREATE**.
50 | 11. Set the App name to "Gmail Sentiment Analysis with Gemini and Vertex AI".
51 | 12. Set the User support email and Developer contact information using the provided email.
52 | 13. Click **SAVE AND CONTINUE** twice.
53 | 14. Return to the Apps Script tab and set the project.
54 | 
55 | 
56 | ### Make a copy of the Apps Script project
57 | 
58 | 1. Make a copy of this
59 | [Apps Script project](https://script.google.com/corp/home/projects/1Z2gfvr0oYn68ppDtQbv0qIuKKVWhvwOTr-gCE0GFKVjNk8NDlpfJAGAr).
60 | 1. Rename the Apps Script project to `Gmail Sentiment Analysis with Gemini and Vertex AI`.
61 | 1. Make sure to replace `[ADD YOUR GCP PROJECT ID HERE]` in `Vertex.gs` with your actual **Project ID**.
62 | 1. Click **Save**.
63 | 
64 | 
65 | ### Deploy the Add-on
66 | 
67 | 1. Click **Deploy > Test deployments**.
68 | 2. Confirm **Gmail** is listed under Application(s) and click **Install**.
69 | 3. Click **Done**.
70 | 
71 | ### Verify Installation
72 | 
73 | Refresh the Gmail tab. You should see a new add-on icon in the right side panel.
74 | 
75 | **Troubleshooting:**
76 | 
77 | * Refresh the browser if the add-on isn't visible.
78 | * Uninstall and reinstall the add-on from the Test deployments window if it's still missing.
79 | 
80 | 
81 | ### Run the Add-on
82 | 
83 | 1. **Open the Add-on:** Click the add-on icon in the Gmail side panel.
84 | 2. **Authorize the Add-on:** Click **Authorize access**. Select your email and click **Allow** in the consent screen.
85 | 3. **Generate sample emails:** Click the green "Generate sample emails" button.
86 | 4. **Wait for emails:** Wait for the sample emails to appear in your inbox, or refresh.
87 | 5. **Start the analysis:** Click the red "Analyze emails" button.
88 | 6. **Wait for labels:** Wait for the "UPSET TONE 😡" label to appear on negative emails, or refresh.
89 | 7. **Close the Add-on:** Click the X in the top right corner of the side panel.
90 | 
91 | 
92 | ## Congratulations!
93 | 
94 | You've completed the Gmail Sentiment Analysis with Gemini and Vertex AI lab!
95 | You now have a functional Gmail add-on for prioritizing emails. Experiment
96 | further by customizing the sentiment analysis or adding new features!
97 | 


--------------------------------------------------------------------------------
/gmail-sentiment-analysis/Vertex.gs:
--------------------------------------------------------------------------------
 1 | /*
 2 | Copyright 2024-2025 Google LLC
 3 | 
 4 | Licensed under the Apache License, Version 2.0 (the "License");
 5 | you may not use this file except in compliance with the License.
 6 | You may obtain a copy of the License at
 7 | 
 8 |     https://www.apache.org/licenses/LICENSE-2.0
 9 | 
10 | Unless required by applicable law or agreed to in writing, software
11 | distributed under the License is distributed on an "AS IS" BASIS,
12 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 | See the License for the specific language governing permissions and
14 | limitations under the License.
15 | */
16 | 
17 | const PROJECT_ID = '[ADD YOUR GCP PROJECT ID HERE]';
18 | const VERTEX_AI_LOCATION = 'us-central1';
19 | const MODEL_ID = 'gemini-1.5-flash';
20 | 
21 | /**
22 |  * Packages prompt and necessary settings, then sends a request to
23 |  * Vertex API. 
24 |  * A check is performed to see if the response from Vertex AI contains FALSE as a value.
25 |  * Returns the outcome of that check which is a boolean. 
26 |  *
27 |  * @param emailText - Email message that is sent to the model.
28 |  */
29 | 
30 | function processSentiment(emailText) {
31 |   const prompt = `Analyze the sentiment of the following message: ${emailText}`;
32 | 
33 |   const request = {
34 |     "contents": [{
35 |       "role": "user",
36 |       "parts": [{
37 |         "text": prompt,
38 |       }]
39 |     }],
40 |     "generationConfig": {
41 |       "temperature": 0.9,
42 |       "maxOutputTokens": 1024,
43 |       "responseMimeType": "application/json",
44 |       "responseSchema": {
45 |         "type": "object",
46 |         "properties": {
47 |           "response": {
48 |             "type": "string",
49 |             "enum": [
50 |               "positive",
51 |               "negative",
52 |               "neutral",
53 |             ]
54 |           }
55 |         }
56 |       }
57 |     }
58 |   };
59 | 
60 |   const fetchOptions = {
61 |     method: 'POST',
62 |     headers: {
63 |       'Authorization': `Bearer ${ScriptApp.getOAuthToken()}`
64 |     },
65 |     contentType: 'application/json',
66 |     muteHttpExceptions: true,
67 |     payload: JSON.stringify(request),
68 |   }
69 | 
70 |   const url =
71 |     `https://${VERTEX_AI_LOCATION}-aiplatform.googleapis.com/v1/` +
72 |     `projects/${PROJECT_ID}/` +
73 |     `locations/${VERTEX_AI_LOCATION}/` +
74 |     `publishers/google/` +
75 |     `models/${MODEL_ID}:generateContent`;
76 | 
77 |   const response = UrlFetchApp.fetch(url, fetchOptions);
78 |   const payload = JSON.parse(response.getContentText());
79 |   const text = JSON.parse(payload.candidates[0].content.parts[0].text);
80 | 
81 |   return text.response;
82 | }
83 | 


--------------------------------------------------------------------------------
/gmail/README.md:
--------------------------------------------------------------------------------
 1 | # Apps Scripts for Gmail
 2 | 
 3 | Sample Google Apps Script functions for Gmail.
 4 | 
 5 | ## [Mail Merge](https://developers.google.com/apps-script/articles/mail_merge)
 6 | 
 7 | This tutorial shows an easy way to collect information from different users in a spreadsheet using Google Forms, then leverage it to generate and distribute personalized emails.
 8 | 
 9 | ## [Sending Emails](https://developers.google.com/apps-script/articles/sending_emails)
10 | 
11 | This tutorial shows how to use Spreadsheet data to send emails to different people.
12 | 
13 | ## [Inline Image](inlineimage/inlineimage.gs)
14 | 
15 | This example shows how to send an HTML email that includes an inline image attachment.
16 | 


--------------------------------------------------------------------------------
/gmail/add-ons/quickstart.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | 
 17 | // [START apps_script_gmail_quick_start]
 18 | /**
 19 |  * Returns the array of cards that should be rendered for the current
 20 |  * e-mail thread. The name of this function is specified in the
 21 |  * manifest 'onTriggerFunction' field, indicating that this function
 22 |  * runs every time the add-on is started.
 23 |  *
 24 |  * @param {Object} e The data provided by the Gmail UI.
 25 |  * @return {Card[]}
 26 |  */
 27 | function buildAddOn(e) {
 28 |   // Activate temporary Gmail add-on scopes.
 29 |   var accessToken = e.messageMetadata.accessToken;
 30 |   GmailApp.setCurrentMessageAccessToken(accessToken);
 31 | 
 32 |   var messageId = e.messageMetadata.messageId;
 33 |   var message = GmailApp.getMessageById(messageId);
 34 |   
 35 |   // Get user and thread labels as arrays to enable quick sorting and indexing.
 36 |   var threadLabels = message.getThread().getLabels();
 37 |   var labels = getLabelArray(GmailApp.getUserLabels());
 38 |   var labelsInUse = getLabelArray(threadLabels);
 39 |   
 40 |   // Create a section for that contains all user Labels.
 41 |   var section = CardService.newCardSection()
 42 |     .setHeader("<font color=\"#1257e0\"><b>Available User Labels</b></font>");       
 43 | 
 44 |   // Create a checkbox group for user labels that are added to prior section.
 45 |   var checkboxGroup = CardService.newSelectionInput()
 46 |     .setType(CardService.SelectionInputType.CHECK_BOX)
 47 |     .setFieldName('labels')
 48 |     .setOnChangeAction(CardService.newAction().setFunctionName('toggleLabel'));
 49 |   
 50 |   // Add checkbox with name and selected value for each User Label.
 51 |   for(var i = 0; i < labels.length; i++) {
 52 |     checkboxGroup.addItem(labels[i], labels[i], labelsInUse.indexOf(labels[i])!= -1);
 53 |   }
 54 |   
 55 |   // Add the checkbox group to the section.
 56 |   section.addWidget(checkboxGroup);
 57 |   
 58 |   // Build the main card after adding the section.
 59 |   var card = CardService.newCardBuilder()
 60 |     .setHeader(CardService.newCardHeader()
 61 |     .setTitle('Quick Label')
 62 |     .setImageUrl('https://www.gstatic.com/images/icons/material/system/1x/label_googblue_48dp.png'))
 63 |     .addSection(section) 
 64 |     .build();
 65 |   
 66 |   return [card];
 67 | } 
 68 | 
 69 | /**
 70 |  * Updates the labels on the current thread based on 
 71 |  * user selections. Runs via the OnChangeAction for
 72 |  * each CHECK_BOX created.
 73 |  *
 74 |  * @param {Object} e The data provided by the Gmail UI.
 75 | */
 76 | function toggleLabel(e){
 77 |   var selected = e.formInputs.labels;
 78 |   
 79 |   // Activate temporary Gmail add-on scopes.
 80 |   var accessToken = e.messageMetadata.accessToken;
 81 |   GmailApp.setCurrentMessageAccessToken(accessToken);
 82 | 
 83 |   var messageId = e.messageMetadata.messageId;
 84 |   var message = GmailApp.getMessageById(messageId);
 85 |   var thread = message.getThread();
 86 |   
 87 |   if (selected != null){
 88 |      for each (var label in GmailApp.getUserLabels()) {
 89 |        if(selected.indexOf(label.getName()) != -1){
 90 |           thread.addLabel(label);
 91 |        }
 92 |        else {
 93 |          thread.removeLabel(label);
 94 |        }
 95 |      }
 96 |   }
 97 |   else {
 98 |     for each (var label in GmailApp.getUserLabels()) {
 99 |       thread.removeLabel(label);
100 |     }
101 |   }
102 | }
103 | 
104 | /**
105 |  * Converts an GmailLabel object to a array of strings. 
106 |  * Used for easy sorting and to determine if a value exists.
107 |  *
108 |  * @param {labelsObjects} A GmailLabel object array.
109 |  * @return {lables[]} An array of labels names as strings.
110 | */
111 | function getLabelArray(labelsObjects){
112 |   var labels = [];
113 |   for(var i = 0; i < labelsObjects.length; i++) {
114 |     labels[i] = labelsObjects[i].getName();
115 |   }
116 |   labels.sort();
117 |   return labels;
118 | }
119 | 
120 | // [END apps_script_gmail_quick_start]
121 | 


--------------------------------------------------------------------------------
/gmail/inlineimage/inlineimage.gs:
--------------------------------------------------------------------------------
 1 | 
 2 | /**
 3 |  * Copyright 2022 Google LLC
 4 |  *
 5 |  * Licensed under the Apache License, Version 2.0 (the "License");
 6 |  * you may not use this file except in compliance with the License.
 7 |  * You may obtain a copy of the License at
 8 |  *
 9 |  *     https://www.apache.org/licenses/LICENSE-2.0
10 |  *
11 |  * Unless required by applicable law or agreed to in writing, software
12 |  * distributed under the License is distributed on an "AS IS" BASIS,
13 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
14 |  * See the License for the specific language governing permissions and
15 |  * limitations under the License.
16 |  */
17 | 
18 | function sendEmailToMyself() {
19 |   // You can use this method to test the welcome email.
20 |   sendEmailWithInlineImage(Session.getActiveUser().getEmail());
21 | }
22 | 
23 | function sendEmailWithInlineImage(toAddress) {
24 |   const options = {};
25 |   const imageName = 'cat_emoji';
26 |   // The URL "cid:cat_emoji" means that the inline attachment named "cat_emoji" would be used.
27 |   options['htmlBody'] = 'Welcome! <img src="cid:' + imageName + '" alt="Cat Emoji" />';
28 |   options['inlineImages'] = {[imageName]: Utilities.newBlob(getImageBinary(), 'image/png', imageName)};
29 |   GmailApp.sendEmail(toAddress, 'Welcome!', 'Welcome!', options);
30 | }
31 | 
32 | function getImageBinary() {
33 |   // Cat Face Emoji from https://github.com/googlefonts/noto-emoji/blob/main/png/32/emoji_u1f431.png, Base64 encoded.
34 |   const catPngBase64 = 'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA+BJREFUeNrsV01ME1EQnpaltPK3iAT0oAsxMSYmlIOaGBO2etCDMTVq8CYl3jRBvehBI0YPehIPxhvFkxo1gHpQE9P15+KtROJFI6sxhEKwW6FY27o6s/vabpd9tPUn8eAkj8e+nTffzDez814B/kX5oXT4/7A9GceAk12Xg/IkThIOFUfIJb9XfgNYxCmMI8iWNLTXZNVx2zYEGTiwOUKe/wZ4xAJOIhIbXAdQuo2/dacB6i8gP7X0dA43hSsEJ+eJST9UtZv2fIdyr5d1wMyRsMkcBSd6y2WCRT5C0RrgZKN6K4C3x1FfcFw1QSFvYP4sWk4SE1F426gyRyVo/mbqzdUgiK6BoEcBkv35yAsBcEUoGRIZ8uwA+PYAQHeNgPsHzUv1MjYyfT0lwZ1S4Cz6DNNG8LoMX8+XLfz/9XZhXwUOaMUJTQJ8OYnRvSqs1VpAyCEaTu++T5p7aa7AgXGTzlfmRsq93cCKbHHE1qjt7FAAORvZidyqwm1E7BuNlORtoRoNou8iK0INi1DQ+emhWqBhpqQdm5HKK8JoWTVhB8o5wv02k+bA7moFX5ICfKmV7cQfErdDBys6MNTpLAzeS4AynirLoLagQ+jyLOw7G3PaI9lbsT0FQfuOwMkpwwmS8KkW6N1Vv6wDJ67NwfDjebPaxr9C/L5kV5GthWj/Cjrt2jlwkrGXiyUZUGPZIjYcWOgeGhrqxSHnGaAFKqVE5rq/sXqOa1ysK923pFahSF/u9Oaf3yS2wJsvm/2szhRrCuhBfjGzV6xyZ6Gr6Tm0eT8YLwYON8HAjbhhrH9/Y97Y+eE4KFEzOqlNgCvHmg2dK0ebjci1pI76DXn9d/OdkNa9sGdNOOrbOXGC1wciC1lRTus1sNIT40ZJwIHjU0VrkcE1IPu93D2f063wMbkB4ukWTU1uJAbUvr6+kAvpP44PhyllDdWfJcGVkbauepJngCehS7Mw/MgsNtnvg5GLrcumiBjwuFPgqUopq3dHAjwG6Mw/xzPStEeF8OkWCG6vNWhuP/TRmOMPJQM8x8zkrbVGWqzyNHYQ6oQELGbrFWTgKhGJDGh5LWLi5ofFbtEzC6sxej/WwZICQ6P7zsSMiNXpjAFO0nXkE/jX18DoyyTOniXgJDtb78B0ah281raNsV5DTU9xMXCR9QAl1HExbL82WT8rKr7ou7Tx3H+gASOvgqt3E8Y7azHyyge7baDUrbi8A+nXpAsdiC57IWHX8PN/ATxkB3dkoNyCrEA0Bj5a0ZUMN5ADAfsFokLgQXb+j3JxKrjnB9nvBpFTpLmjnM77ZzhG2fH+X/5t+SnAAE+HjvApIyOGAAAAAElFTkSuQmCC';
35 |   return Utilities.base64Decode(catPngBase64);
36 | }
37 | 


--------------------------------------------------------------------------------
/gmail/markup/Code.gs:
--------------------------------------------------------------------------------
 1 | // [START gmail_send_email_with_markup]
 2 | /**
 3 |  * Send an email with schemas in order to test email markup.
 4 |  */
 5 | function testSchemas() {
 6 |   try {
 7 |     const htmlBody = HtmlService.createHtmlOutputFromFile('mail_template').getContent();
 8 | 
 9 |     MailApp.sendEmail({
10 |       to: Session.getActiveUser().getEmail(),
11 |       subject: 'Test Email markup - ' + new Date(),
12 |       htmlBody: htmlBody
13 |     });
14 |   } catch (err) {
15 |     console.log(err.message);
16 |   }
17 | }
18 | // [END gmail_send_email_with_markup]
19 | 
20 | 


--------------------------------------------------------------------------------
/gmail/quickstart/quickstart.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright  Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | // [START gmail_quickstart]
18 | /**
19 |  * Lists all labels in the user's mailbox
20 |  * @see https://developers.google.com/gmail/api/reference/rest/v1/users.labels/list
21 |  */
22 | function listLabels() {
23 |   try {
24 |     // Gmail.Users.Labels.list() API returns the list of all Labels in user's mailbox
25 |     const response = Gmail.Users.Labels.list('me');
26 |     if (!response || response.labels.length === 0) {
27 |       // TODO (developer) - No labels are returned from the response
28 |       console.log('No labels found.');
29 |       return;
30 |     }
31 |     // Print the Labels that are available.
32 |     console.log('Labels:');
33 |     for (const label of response.labels ) {
34 |       console.log('- %s', label.name);
35 |     }
36 |   } catch (err) {
37 |     // TODO (developer) - Handle exception on Labels.list() API
38 |     console.log('Labels.list() API failed with error %s', err.toString());
39 |   }
40 | }
41 | // [END gmail_quickstart]
42 | 


--------------------------------------------------------------------------------
/gmail/sendingEmails/sendingEmails.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | // [START gmail_send_emails]
18 | /**
19 |  * Sends emails with data from the current spreadsheet.
20 |  */
21 | function sendEmails() {
22 |   try {
23 |     const sheet = SpreadsheetApp.getActiveSheet(); // Get the active sheet in spreadsheet
24 |     const startRow = 2; // First row of data to process
25 |     const numRows = 2; // Number of rows to process
26 |     const dataRange = sheet.getRange(startRow, 1, numRows, 2); // Fetch the range of cells A2:B3
27 |     const data = dataRange.getValues(); // Fetch values for each row in the Range.
28 |     for (const row of data) {
29 |       const emailAddress = row[0]; // First column
30 |       const message = row[1]; // Second column
31 |       const subject = 'Sending emails from a Spreadsheet';
32 |       MailApp.sendEmail(emailAddress, subject, message); // Send emails to emailAddresses which are presents in First column
33 |     }
34 |   } catch (err) {
35 |     console.log(err);
36 |   }
37 | }
38 | // [END gmail_send_emails]
39 | 
40 | // [START gmail_send_non_duplicate_emails]
41 | /**
42 |  * Sends non-duplicate emails with data from the current spreadsheet.
43 |  */
44 | function sendNonDuplicateEmails() {
45 |   const EMAIL_SENT = 'email sent'; //This constant is used to write the message in Column C of Sheet
46 |   try {
47 |     const sheet = SpreadsheetApp.getActiveSheet(); // Get the active sheet in spreadsheet
48 |     const startRow = 2; // First row of data to process
49 |     const numRows = 2; // Number of rows to process
50 |     const dataRange = sheet.getRange(startRow, 1, numRows, 3); // Fetch the range of cells A2:B3
51 |     const data = dataRange.getValues(); // Fetch values for each row in the Range.
52 |     for (let i = 0; i < data.length; ++i) {
53 |       const row = data[i];
54 |       const emailAddress = row[0]; // First column
55 |       const message = row[1]; // Second column
56 |       const emailSent = row[2]; // Third column
57 |       if (emailSent === EMAIL_SENT) {
58 |         console.log('Email already sent');
59 |         return;
60 |       }
61 |       const subject = 'Sending emails from a Spreadsheet';
62 |       MailApp.sendEmail(emailAddress, subject, message);// Send emails to emailAddresses which are presents in First column
63 |       sheet.getRange(startRow + i, 3).setValue(EMAIL_SENT);
64 |       SpreadsheetApp.flush(); // Make sure the cell is updated right away in case the script is interrupted
65 |     }
66 |   } catch (err) {
67 |     console.log(err);
68 |   }
69 | }
70 | // [END gmail_send_non_duplicate_emails]
71 | 


--------------------------------------------------------------------------------
/mashups/sheets2calendar.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Create a new calendar event for every row in a spreadsheet. This code assumes
 3 |  * that the data is in the first sheet (workbook) in the spreadsheet and has the
 4 |  * columns "Title", "Description", and "Emails" in that order, with multiple
 5 |  * email addresses separated by a comma.
 6 |  */
 7 | function createEventsFromSpreadsheet() {
 8 |   // Open the spreadsheet and get the data.
 9 |   var ss = SpreadsheetApp.openByUrl('ENTER SPREADSHEET URL HERE');
10 |   var sheet = ss.getSheets()[0];
11 |   var data = sheet.getDataRange().getValues();
12 | 
13 |   // Remove any frozen rows from the data, since they contain headers.
14 |   data.splice(sheet.getFrozenRows());
15 | 
16 |   // Create an event for each row.
17 |   data.forEach(function(row) {
18 |     var title = row[0];
19 |     var description = row[1];
20 |     var emails = row[2];
21 | 
22 |     // Split the emails into an array and remove extra whitespace.
23 |     emails = emails.split(',').map(function(email) {
24 |       return email.trim();
25 |     });
26 | 
27 |     var now = new Date();
28 |     // Start the event at the next hour mark.
29 |     var start = new Date(now);
30 |     start.setHours(start.getHours() + 1);
31 |     start.setMinutes(0);
32 |     start.setSeconds(0);
33 |     start.setMilliseconds(0);
34 |     // End the event after 30 minutes.
35 |     var end = new Date(start);
36 |     end.setMinutes(end.getMinutes() + 30);
37 | 
38 |     // Create the calendar event and invite the guests.
39 |     var event = CalendarApp.createEvent(title, start, end)
40 |         .setDescription(description);
41 |     emails.forEach(function(email) {
42 |       event.addGuest(email);
43 |     });
44 | 
45 |     // Add yourself as a guest and mark yourself as attending.
46 |     event.addGuest(Session.getActiveUser().getEmail());
47 |     event.setMyStatus(CalendarApp.GuestStatus.YES);
48 |   });
49 | }
50 | 


--------------------------------------------------------------------------------
/mashups/sheets2chat.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Posts a message to a Hangouts Chat room every time the spreadsheet is edited.
 3 |  * This script must be attached to the spreadsheet (created in Google Sheets under
 4 |  * "Tools > Script editor") and installed as a trigger:
 5 |  * - Click "Edit > Current project's triggers" in the Apps Script UI.
 6 |  * - Click "Add a new trigger".
 7 |  * - Select the function "sendChatMessageOnEdit" and the event
 8 |  *   "From spreadsheet", "On edit".
 9 |  * - Click "Save".
10 |  *
11 |  * @param {Object} e The onEdit event object.
12 |  */
13 | function sendChatMessageOnEdit(e) {
14 |   var range = SpreadsheetApp.getActiveRange();
15 |   var value = range.getValue();
16 |   var oldValue = e.oldValue;
17 |   var ss = range.getSheet().getParent();
18 | 
19 |   // Construct the message to send, based on the old and new value of the cell.
20 |   var changeMessage;
21 |   if (oldValue && value) {
22 |     changeMessage = Utilities.formatString('changed from "%s" to "%s"',
23 |         oldValue, value);
24 |   } else if (value) {
25 |     changeMessage = Utilities.formatString('set to "%s"', value);
26 |   } else {
27 |     changeMessage = 'cleared';
28 |   }
29 |   var message = Utilities.formatString(
30 |       'The range %s was %s. <%s|Open spreadsheet>.',
31 |       range.getA1Notation(), changeMessage, ss.getUrl());
32 | 
33 |   // Follow these steps to create an incomming webhook URL for your chat room:
34 |   // https://developers.google.com/hangouts/chat/how-tos/webhooks#define_an_incoming_webhook
35 |   var webhookUrl = 'ENTER INCOMMING WEBHOOK URL HERE';
36 | 
37 |   // Use the spreadsheet's ID as a thread key, so that all messages go into the
38 |   // same thread.
39 |   var url = webhookUrl + '&threadKey=' + ss.getId();
40 | 
41 |   // Send the message.
42 |   UrlFetchApp.fetch(url, {
43 |     method: 'post',
44 |     contentType: 'application/json',
45 |     payload: JSON.stringify({
46 |       text: message
47 |     })
48 |   });
49 | }
50 | 


--------------------------------------------------------------------------------
/mashups/sheets2contacts.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Create a new contact for every row in a spreadsheet. This code assumes that
 3 |  * the data is in the first sheet (workbook) in the spreadsheet and has the
 4 |  * columns "First Name", "Last Name", and "Email" in that order.
 5 |  */
 6 | function createContactsFromSpreadsheet() {
 7 |   // Open the spreadsheet and get the data.
 8 |   var ss = SpreadsheetApp.openByUrl('ENTER SPREADSHEET URL HERE');
 9 |   var sheet = ss.getSheets()[0];
10 |   var data = sheet.getDataRange().getValues();
11 | 
12 |   // Remove any frozen rows from the data, since they contain headers.
13 |   data.splice(sheet.getFrozenRows());
14 | 
15 |   // Send a contact for each row.
16 |   data.forEach(function(row) {
17 |     var firstName = row[0];
18 |     var lastName = row[1];
19 |     var email = row[2];
20 |     ContactsApp.createContact(firstName, lastName, email);
21 |   });
22 | }
23 | 


--------------------------------------------------------------------------------
/mashups/sheets2docs.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Create a new document for every row in a spreadsheet. This code assumes that
 3 |  * the data is in the first sheet (workbook) in the spreadsheet and has the
 4 |  * columns "Title", "Content", and "Emails" in that order, with multiple email
 5 |  * addresses separated by a comma.
 6 |  */
 7 | function createDocsFromSpreadsheet() {
 8 |   // Open the spreadsheet and get the data.
 9 |   var ss = SpreadsheetApp.openByUrl('ENTER SPREADSHEET URL HERE');
10 |   var sheet = ss.getSheets()[0];
11 |   var data = sheet.getDataRange().getValues();
12 | 
13 |   // Remove any frozen rows from the data, since they contain headers.
14 |   data.splice(sheet.getFrozenRows());
15 | 
16 |   // Create a document for each row.
17 |   data.forEach(function(row) {
18 |     var title = row[0];
19 |     var content = row[1];
20 |     var emails = row[2];
21 | 
22 |     // Split the emails into an array and remove extra whitespace.
23 |     emails = emails.split(',').map(function(email) {
24 |       return email.trim();
25 |     });
26 | 
27 |     // Create the document, append the content, and share it out.
28 |     var doc = DocumentApp.create(title);
29 |     doc.getBody().appendParagraph(content);
30 |     doc.addEditors(emails);
31 |   });
32 | }
33 | 


--------------------------------------------------------------------------------
/mashups/sheets2drive.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Create a PDF file in Google Drive for every row in a spreadsheet. This
 3 |  * code assumes that the data is in the first sheet (workbook) in the
 4 |  * spreadsheet and has the columns "File Name", "HTML Content", and "Emails" in that
 5 |  * order, with multiple email addresses separated by a comma.
 6 |  */
 7 | function createDriveFilesFromSpreadsheet() {
 8 |   // Open the spreadsheet and get the data.
 9 |   var ss = SpreadsheetApp.openByUrl('ENTER SPREADSHEET URL HERE');
10 |   var sheet = ss.getSheets()[0];
11 |   var data = sheet.getDataRange().getValues();
12 | 
13 |   // Remove any frozen rows from the data, since they contain headers.
14 |   data.splice(sheet.getFrozenRows());
15 | 
16 |   // Create a PDF in Google Drive for each row.
17 |   data.forEach(function(row) {
18 |     var fileName = row[0];
19 |     var htmlContent = row[1];
20 |     var emails = row[2];
21 | 
22 |     // Split the emails into an array and remove extra whitespace.
23 |     emails = emails.split(',').map(function(email) {
24 |       return email.trim();
25 |     });
26 | 
27 |     // Convert the HTML content to PDF.
28 |     var html = Utilities.newBlob(htmlContent, 'text/html');
29 |     var pdf = html.getAs('application/pdf');
30 | 
31 |     // Create the Drive file and share it out.
32 |     var file = DriveApp.createFile(pdf).setName(fileName);
33 |     file.addEditors(emails);
34 |   });
35 | }
36 | 


--------------------------------------------------------------------------------
/mashups/sheets2forms.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Create a new form for every row in a spreadsheet. This code assumes that the
 3 |  * data is in the first sheet (workbook) in the spreadsheet and has the
 4 |  * columns "Title", "Question", and "Emails" in that order, with multiple email
 5 |  * addresses separated by a comma.
 6 |  */
 7 | function createFormsFromSpreadsheet() {
 8 |   // Open the spreadsheet and get the data.
 9 |   var ss = SpreadsheetApp.openByUrl('ENTER SPREADSHEET URL HERE');
10 |   var sheet = ss.getSheets()[0];
11 |   var data = sheet.getDataRange().getValues();
12 | 
13 |   // Remove any frozen rows from the data, since they contain headers.
14 |   data.splice(sheet.getFrozenRows());
15 | 
16 |   // Create a form for each row.
17 |   data.forEach(function(row) {
18 |     var title = row[0];
19 |     var question = row[1];
20 |     var emails = row[2];
21 | 
22 |     // Split the emails into an array and remove extra whitespace.
23 |     emails = emails.split(',').map(function(email) {
24 |       return email.trim();
25 |     });
26 | 
27 |     // Create the form, append the question, and share it out.
28 |     var form = FormApp.create(title);
29 |     form.addTextItem().setTitle(question);
30 |     form.addEditors(emails);
31 |   });
32 | }
33 | 


--------------------------------------------------------------------------------
/mashups/sheets2gmail.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Sends an email for every row in a spreadsheet. This code assumes that the
 3 |  * data is in the first sheet (workbook) in the spreadsheet and has the columns
 4 |  * "Subject", "HTML Message", and "Emails" in that order, with multiple email
 5 |  * addresses separated by a comma.
 6 |  */
 7 | function sendEmailsFromSpreadsheet() {
 8 |   // Open the spreadsheet and get the data.
 9 |   var ss = SpreadsheetApp.openByUrl('ENTER SPREADSHEET URL HERE');
10 |   var sheet = ss.getSheets()[0];
11 |   var data = sheet.getDataRange().getValues();
12 | 
13 |   // Remove any frozen rows from the data, since they contain headers.
14 |   data.splice(sheet.getFrozenRows());
15 | 
16 |   // Send an email for each row.
17 |   data.forEach(function(row) {
18 |     var subject = row[0];
19 |     var htmlMessage = row[1];
20 |     var emails = row[2];
21 | 
22 |     // Send the email.
23 |     GmailApp.sendEmail(emails, subject, null, {
24 |       htmlBody: htmlMessage
25 |     });
26 |   });
27 | }
28 | 


--------------------------------------------------------------------------------
/mashups/sheets2maps.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * A custom function that gets the county (or equivalent administrative
 3 |  * district) that an address lies within. Use within a cell like:
 4 |  *
 5 |  * =COUNTY("76 9th Ave, New York NY")
 6 |  *
 7 |  * This script must be attached to the spreadsheet (created in Google Sheets
 8 |  * under "Tools > Script editor").
 9 |  *
10 |  * @param {String} address The address to lookup.
11 |  * @return {String} The county (or equivalent) the address is within.
12 |  * @customFunction
13 |  */
14 | function COUNTY(address) {
15 |   var results = Maps.newGeocoder().geocode(address).results;
16 |   if (!results || results.length === 0) {
17 |     throw new Error('Unknown address');
18 |   }
19 |   var counties = results[0].address_components.filter(function(component) {
20 |     return component.types.indexOf('administrative_area_level_2') >= 0;
21 |   });
22 |   if (!counties.length) {
23 |     throw new Error('Unable to determine county');
24 |   }
25 |   return counties[0].long_name;
26 | }
27 | 


--------------------------------------------------------------------------------
/mashups/sheets2slides.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Create a new presentation for every row in a spreadsheet. This code assumes
 3 |  * that the data is in the first sheet (workbook) in the spreadsheet and has the
 4 |  * columns "Title", "Content", and "Emails" in that order, with multiple email
 5 |  * addresses separated by a comma.
 6 |  */
 7 | function createPresentationsFromSpreadsheet() {
 8 |   // Open the spreadsheet and get the data.
 9 |   var ss = SpreadsheetApp.openByUrl('ENTER SPREADSHEET URL HERE');
10 |   var sheet = ss.getSheets()[0];
11 |   var data = sheet.getDataRange().getValues();
12 | 
13 |   // Remove any frozen rows from the data, since they contain headers.
14 |   data.splice(sheet.getFrozenRows());
15 | 
16 |   // Create a presentation for each row.
17 |   data.forEach(function(row) {
18 |     var title = row[0];
19 |     var content = row[1];
20 |     var emails = row[2];
21 | 
22 |     // Split the emails into an array and remove extra whitespace.
23 |     emails = emails.split(',').map(function(email) {
24 |       return email.trim();
25 |     });
26 | 
27 |     // Create the presentation, insert a new slide at the start, append the content,
28 |     // and share it out.
29 |     var presentation = SlidesApp.create(title);
30 |     var slide = presentation.insertSlide(0, SlidesApp.PredefinedLayout.MAIN_POINT);
31 |     var textBox = slide.getShapes()[0];
32 |     textBox.getText().appendParagraph(content);
33 |     presentation.addEditors(emails);
34 |   });
35 | }
36 | 


--------------------------------------------------------------------------------
/mashups/sheets2translate.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Whenever a cell is edited and it's value is a string, add a note to the cell
 3 |  * with the English translation of the cell's content.
 4 |  *
 5 |  * For example, type "la gato" into a cell and this script will add a note
 6 |  * with the text "the cat".
 7 |  *
 8 |  * This script must be attached to the spreadsheet (created in Google Sheets
 9 |  * under "Tools > Script editor").
10 |  */
11 | function onEdit() {
12 |   var range = SpreadsheetApp.getActiveRange();
13 |   var value = range.getValue();
14 |   if (typeof value === 'string') {
15 |     var translated = LanguageApp.translate(value, null, 'en');
16 |     range.setNote(translated);
17 |   }
18 | }
19 | 


--------------------------------------------------------------------------------
/people/quickstart/quickstart.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | // [START people_quickstart]
17 | /**
18 |  * Print the display name if available for 10 connections.
19 |  */
20 | function listConnectionNames() {
21 |   try {
22 |     /**
23 |      * List the 10 connections/contacts of user
24 |      * @see https://developers.google.com/people/api/rest/v1/people.connections/list
25 |      */
26 |     const connections = People.People.Connections.list('people/me', {
27 |       pageSize: 10,
28 |       personFields: 'names,emailAddresses'
29 |       // use other query parameter here if needed.
30 |     });
31 |     connections.connections.forEach((person) => {
32 |       // if contacts/connections is available, print the name of person.
33 |       if (person.names && person.names.length === 0) {
34 |         console.log('No display name found for connection.');
35 |         return;
36 |       }
37 |       console.log(person.names[0].displayName);
38 |     });
39 |   } catch (err) {
40 |     // TODO (developer) - Handle exception from People API
41 |     console.log('Failed with error %s', err.message);
42 |   }
43 | }
44 | // [END people_quickstart]
45 | 


--------------------------------------------------------------------------------
/picker/README.md:
--------------------------------------------------------------------------------
1 | # File Picker Sample
2 | 
3 | This sample shows how to create a "file-open" dialog in Google Sheets thatallows the user to select a file from their Drive. It does so by loading [Google Picker](https://developers.google.com/picker/), for this purpose. More information is available in the Apps Script guide [Dialogs and Sidebars in Google Workspace Documents](https://developers.google.com/apps-script/guides/dialogs#file-open_dialogs).
4 | 
5 | Note that this sample expects to be [bound](https://developers.google.com/apps-script/guides/bound) to a spreadsheet.
6 | 


--------------------------------------------------------------------------------
/picker/code.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the 'License');
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an 'AS IS' BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | // [START picker_code]
18 | /**
19 |  * Creates a custom menu in Google Sheets when the spreadsheet opens.
20 |  */
21 | function onOpen() {
22 |   SpreadsheetApp.getUi()
23 |     .createMenu("Picker")
24 |     .addItem("Start", "showPicker")
25 |     .addToUi();
26 | }
27 | 
28 | /**
29 |  * Displays an HTML-service dialog in Google Sheets that contains client-side
30 |  * JavaScript code for the Google Picker API.
31 |  */
32 | function showPicker() {
33 |   const html = HtmlService.createHtmlOutputFromFile("dialog.html")
34 |     .setWidth(800)
35 |     .setHeight(600)
36 |     .setSandboxMode(HtmlService.SandboxMode.IFRAME);
37 |   SpreadsheetApp.getUi().showModalDialog(html, "Select a file");
38 | }
39 | /**
40 |  * Checks that the file can be accessed.
41 |  */
42 | function getFile(fileId) {
43 |   return Drive.Files.get(fileId, { fields: "*" });
44 | }
45 | 
46 | /**
47 |  * Gets the user's OAuth 2.0 access token so that it can be passed to Picker.
48 |  * This technique keeps Picker from needing to show its own authorization
49 |  * dialog, but is only possible if the OAuth scope that Picker needs is
50 |  * available in Apps Script. In this case, the function includes an unused call
51 |  * to a DriveApp method to ensure that Apps Script requests access to all files
52 |  * in the user's Drive.
53 |  *
54 |  * @return {string} The user's OAuth 2.0 access token.
55 |  */
56 | function getOAuthToken() {
57 |   return ScriptApp.getOAuthToken();
58 | }
59 | // [END picker_code]
60 | 


--------------------------------------------------------------------------------
/service/jdbc.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the 'License');
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an 'AS IS' BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | 
 17 | /**
 18 |  * Replace the variables in this block with real values.
 19 |  * You can find the "Instance connection name" in the Google Cloud
 20 |  * Platform Console, on the instance Overview page.
 21 |  */
 22 | const connectionName = 'Instance_connection_name';
 23 | const rootPwd = 'root_password';
 24 | const user = 'user_name';
 25 | const userPwd = 'user_password';
 26 | const db = 'database_name';
 27 | 
 28 | const root = 'root';
 29 | const instanceUrl = 'jdbc:google:mysql://' + connectionName;
 30 | const dbUrl = instanceUrl + '/' + db;
 31 | 
 32 | // [START apps_script_jdbc_create]
 33 | /**
 34 |  * Create a new database within a Cloud SQL instance.
 35 |  */
 36 | function createDatabase() {
 37 |   try {
 38 |     const conn = Jdbc.getCloudSqlConnection(instanceUrl, root, rootPwd);
 39 |     conn.createStatement().execute('CREATE DATABASE ' + db);
 40 |   } catch (err) {
 41 |     // TODO(developer) - Handle exception from the API
 42 |     console.log('Failed with an error %s', err.message);
 43 |   }
 44 | }
 45 | 
 46 | /**
 47 |  * Create a new user for your database with full privileges.
 48 |  */
 49 | function createUser() {
 50 |   try {
 51 |     const conn = Jdbc.getCloudSqlConnection(dbUrl, root, rootPwd);
 52 | 
 53 |     const stmt = conn.prepareStatement('CREATE USER ? IDENTIFIED BY ?');
 54 |     stmt.setString(1, user);
 55 |     stmt.setString(2, userPwd);
 56 |     stmt.execute();
 57 | 
 58 |     conn.createStatement().execute('GRANT ALL ON `%`.* TO ' + user);
 59 |   } catch (err) {
 60 |     // TODO(developer) - Handle exception from the API
 61 |     console.log('Failed with an error %s', err.message);
 62 |   }
 63 | }
 64 | 
 65 | /**
 66 |  * Create a new table in the database.
 67 |  */
 68 | function createTable() {
 69 |   try {
 70 |     const conn = Jdbc.getCloudSqlConnection(dbUrl, user, userPwd);
 71 |     conn.createStatement().execute('CREATE TABLE entries ' +
 72 |       '(guestName VARCHAR(255), content VARCHAR(255), ' +
 73 |       'entryID INT NOT NULL AUTO_INCREMENT, PRIMARY KEY(entryID));');
 74 |   } catch (err) {
 75 |     // TODO(developer) - Handle exception from the API
 76 |     console.log('Failed with an error %s', err.message);
 77 |   }
 78 | }
 79 | // [END apps_script_jdbc_create]
 80 | 
 81 | // [START apps_script_jdbc_write]
 82 | /**
 83 |  * Write one row of data to a table.
 84 |  */
 85 | function writeOneRecord() {
 86 |   try {
 87 |     const conn = Jdbc.getCloudSqlConnection(dbUrl, user, userPwd);
 88 | 
 89 |     const stmt = conn.prepareStatement('INSERT INTO entries ' +
 90 |       '(guestName, content) values (?, ?)');
 91 |     stmt.setString(1, 'First Guest');
 92 |     stmt.setString(2, 'Hello, world');
 93 |     stmt.execute();
 94 |   } catch (err) {
 95 |     // TODO(developer) - Handle exception from the API
 96 |     console.log('Failed with an error %s', err.message);
 97 |   }
 98 | }
 99 | 
100 | /**
101 |  * Write 500 rows of data to a table in a single batch.
102 |  */
103 | function writeManyRecords() {
104 |   try {
105 |     const conn = Jdbc.getCloudSqlConnection(dbUrl, user, userPwd);
106 |     conn.setAutoCommit(false);
107 | 
108 |     const start = new Date();
109 |     const stmt = conn.prepareStatement('INSERT INTO entries ' +
110 |       '(guestName, content) values (?, ?)');
111 |     for (let i = 0; i < 500; i++) {
112 |       stmt.setString(1, 'Name ' + i);
113 |       stmt.setString(2, 'Hello, world ' + i);
114 |       stmt.addBatch();
115 |     }
116 | 
117 |     const batch = stmt.executeBatch();
118 |     conn.commit();
119 |     conn.close();
120 | 
121 |     const end = new Date();
122 |     console.log('Time elapsed: %sms for %s rows.', end - start, batch.length);
123 |   } catch (err) {
124 |     // TODO(developer) - Handle exception from the API
125 |     console.log('Failed with an error %s', err.message);
126 |   }
127 | }
128 | // [END apps_script_jdbc_write]
129 | 
130 | // [START apps_script_jdbc_read]
131 | /**
132 |  * Read up to 1000 rows of data from the table and log them.
133 |  */
134 | function readFromTable() {
135 |   try {
136 |     const conn = Jdbc.getCloudSqlConnection(dbUrl, user, userPwd);
137 |     const start = new Date();
138 |     const stmt = conn.createStatement();
139 |     stmt.setMaxRows(1000);
140 |     const results = stmt.executeQuery('SELECT * FROM entries');
141 |     const numCols = results.getMetaData().getColumnCount();
142 | 
143 |     while (results.next()) {
144 |       let rowString = '';
145 |       for (let col = 0; col < numCols; col++) {
146 |         rowString += results.getString(col + 1) + '\t';
147 |       }
148 |       console.log(rowString);
149 |     }
150 | 
151 |     results.close();
152 |     stmt.close();
153 | 
154 |     const end = new Date();
155 |     console.log('Time elapsed: %sms', end - start);
156 |   } catch (err) {
157 |     // TODO(developer) - Handle exception from the API
158 |     console.log('Failed with an error %s', err.message);
159 |   }
160 | }
161 | // [END apps_script_jdbc_read]
162 | 


--------------------------------------------------------------------------------
/service/propertyService.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the 'License');
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an 'AS IS' BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | // @see- https://developers.google.com/apps-script/guides/properties
 17 | /**
 18 |  * Save or set the property in each three property store.
 19 |  */
 20 | function saveSingleProperty() {
 21 |   // [START apps_script_property_service_save_data_single_value]
 22 |   try {
 23 |     // Set a property in each of the three property stores.
 24 |     const scriptProperties = PropertiesService.getScriptProperties();
 25 |     const userProperties = PropertiesService.getUserProperties();
 26 |     const documentProperties = PropertiesService.getDocumentProperties();
 27 | 
 28 |     scriptProperties.setProperty('SERVER_URL', 'http://www.example.com/');
 29 |     userProperties.setProperty('DISPLAY_UNITS', 'metric');
 30 |     documentProperties.setProperty('SOURCE_DATA_ID',
 31 |         '1j3GgabZvXUF177W0Zs_2v--H6SPCQb4pmZ6HsTZYT5k');
 32 |   } catch (err) {
 33 |     // TODO (developer) - Handle exception
 34 |     console.log('Failed with error %s', err.message);
 35 |   }
 36 |   // [END apps_script_property_service_save_data_single_value]
 37 | }
 38 | 
 39 | /**
 40 |  * Save the multiple script properties.
 41 |  */
 42 | function saveMultipleProperties() {
 43 |   // [START apps_script_property_service_save_data_multiple_value]
 44 |   try {
 45 |     // Set multiple script properties in one call.
 46 |     const scriptProperties = PropertiesService.getScriptProperties();
 47 |     scriptProperties.setProperties({
 48 |       'cow': 'moo',
 49 |       'sheep': 'baa',
 50 |       'chicken': 'cluck'
 51 |     });
 52 |   } catch (err) {
 53 |     // TODO (developer) - Handle exception
 54 |     console.log('Failed with error %s', err.message);
 55 |   }
 56 |   // [END apps_script_property_service_save_data_multiple_value]
 57 | }
 58 | 
 59 | /**
 60 |  * Read single value for user property.
 61 |  */
 62 | function readSingleProperty() {
 63 |   // [START apps_script_property_service_read_data_single_value]
 64 |   try {
 65 |     // Get the value for the user property 'DISPLAY_UNITS'.
 66 |     const userProperties = PropertiesService.getUserProperties();
 67 |     const units = userProperties.getProperty('DISPLAY_UNITS');
 68 |     console.log('values of units %s', units);
 69 |   } catch (err) {
 70 |     // TODO (developer) - Handle exception
 71 |     console.log('Failed with error %s', err.message);
 72 |   }
 73 |   // [END apps_script_property_service_read_data_single_value]
 74 | }
 75 | 
 76 | /**
 77 |  * Read the multiple script properties.
 78 |  */
 79 | function readAllProperties() {
 80 |   // [START apps_script_property_service_read_multiple_data_value]
 81 |   try {
 82 |     // Get multiple script properties in one call, then log them all.
 83 |     const scriptProperties = PropertiesService.getScriptProperties();
 84 |     const data = scriptProperties.getProperties();
 85 |     for (const key in data) {
 86 |       console.log('Key: %s, Value: %s', key, data[key]);
 87 |     }
 88 |   } catch (err) {
 89 |     // TODO (developer) - Handle exception
 90 |     console.log('Failed with error %s', err.message);
 91 |   }
 92 |   // [END apps_script_property_service_read_multiple_data_value]
 93 | }
 94 | 
 95 | /**
 96 |  * Update the user property value.
 97 |  */
 98 | function updateProperty() {
 99 |   // [START apps_script_property_service_modify_data]
100 |   try {
101 |     // Change the unit type in the user property 'DISPLAY_UNITS'.
102 |     const userProperties = PropertiesService.getUserProperties();
103 |     let units = userProperties.getProperty('DISPLAY_UNITS');
104 |     units = 'imperial'; // Only changes local value, not stored value.
105 |     userProperties.setProperty('DISPLAY_UNITS', units); // Updates stored value.
106 |   } catch (err) {
107 |     // TODO (developer) - Handle exception
108 |     console.log('Failed with error %s', err.message);
109 |   }
110 |   // [END apps_script_property_service_modify_data]
111 | }
112 | 
113 | /**
114 |  * Delete the single user property.
115 |  */
116 | function deleteSingleProperty() {
117 |   // [START apps_script_property_service_delete_data_single_value]
118 |   try {
119 |     // Delete the user property 'DISPLAY_UNITS'.
120 |     const userProperties = PropertiesService.getUserProperties();
121 |     userProperties.deleteProperty('DISPLAY_UNITS');
122 |   } catch (err) {
123 |     // TODO (developer) - Handle exception
124 |     console.log('Failed with error %s', err.message);
125 |   }
126 |   // [END apps_script_property_service_delete_data_single_value]
127 | }
128 | 
129 | /**
130 |  * Delete all user properties in the current script.
131 |  */
132 | function deleteAllUserProperties() {
133 |   // [START apps_script_property_service_delete_all_data]
134 |   try {
135 |     // Get user properties in the current script.
136 |     const userProperties = PropertiesService.getUserProperties();
137 |     // Delete all user properties in the current script.
138 |     userProperties.deleteAllProperties();
139 |   } catch (err) {
140 |     // TODO (developer) - Handle exception
141 |     console.log('Failed with error %s', err.message);
142 |   }
143 |   // [END apps_script_property_service_delete_all_data]
144 | }
145 | 


--------------------------------------------------------------------------------
/service/test_jdbc.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | 
18 | /**
19 |  * Tests createDatabase function of jdbc.gs
20 |  */
21 | function itShouldCreateDatabase() {
22 |   console.log('itShouldCreateDatabase');
23 |   createDatabase();
24 | }
25 | 
26 | /**
27 |  * Tests createUser function of jdbc.gs
28 |  */
29 | function itShouldCreateUser() {
30 |   console.log('itShouldCreateUser');
31 |   createUser();
32 | }
33 | 
34 | /**
35 |  * Tests createTable function of jdbc.gs
36 |  */
37 | function itShouldCreateTable() {
38 |   console.log('itShouldCreateTable');
39 |   createTable();
40 | }
41 | 
42 | /**
43 |  * Tests writeOneRecord function of jdbc.gs
44 |  */
45 | function itShouldWriteOneRecord() {
46 |   console.log('itShouldWriteOneRecord');
47 |   writeOneRecord();
48 | }
49 | 
50 | /**
51 |  * Tests writeManyRecords function of jdbc.gs
52 |  */
53 | function itShouldWriteManyRecords() {
54 |   console.log('itShouldWriteManyRecords');
55 |   writeManyRecords();
56 | }
57 | 
58 | /**
59 |  * Tests readFromTable function of jdbc.gs
60 |  */
61 | function itShouldReadFromTable() {
62 |   console.log('itShouldReadFromTable');
63 |   readFromTable();
64 | }
65 | 
66 | /**
67 |  * Runs all the tests
68 |  */
69 | function RUN_ALL_TESTS() {
70 |   itShouldCreateDatabase();
71 |   itShouldCreateUser();
72 |   itShouldCreateTable();
73 |   itShouldWriteOneRecord();
74 |   itShouldWriteManyRecords();
75 |   itShouldReadFromTable();
76 | }
77 | 


--------------------------------------------------------------------------------
/service/test_propertyServices.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the 'License');
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an 'AS IS' BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | /**
18 |  * Run all tests for propertyService.gs
19 |  */
20 | function RUN_ALL_TESTS() {
21 |   console.log('> itShouldSaveSingleProperty');
22 |   saveSingleProperty();
23 |   console.log('> itShouldSaveMultipleProperties');
24 |   saveMultipleProperties();
25 |   console.log('> itShouldReadSingleProperty');
26 |   readSingleProperty();
27 |   console.log('> itShouldReadAllProperties');
28 |   readAllProperties();
29 |   // The tests below are successful if they run without any extra output
30 |   console.log('> itShouldUpdateProperty');
31 |   updateProperty();
32 |   console.log('> itShouldDeleteSingleProperty');
33 |   deleteSingleProperty();
34 |   console.log('> itShouldDeleteAllUserProperties');
35 |   deleteAllUserProperties();
36 | }
37 | 


--------------------------------------------------------------------------------
/sheets/README.md:
--------------------------------------------------------------------------------
 1 | # Quickstart: Apps Scripts for Google Sheets
 2 | 
 3 | Sample Google Apps Script add-ons and menus, and custom functions for Google Sheets.
 4 | 
 5 | ## Date Add and Subtract
 6 | 
 7 | Date Add and Subtract is a sample add-on for Google Sheets that provides custom functions for date manipulation.
 8 | 
 9 | ## [Managing Responses for Google Forms](https://developers.google.com/apps-script/quickstart/forms)
10 | 
11 | Create a Google Form based on data in a spreadsheet that emails Google Calendar invites and a personalized Google Doc to everyone who responds.
12 | 
13 | ![Quickstart Forms](https://developers.google.com/apps-script/images/quickstart-forms.png)
14 | 
15 | ## [Menus and Custom Functions](https://developers.google.com/apps-script/quickstart/custom-functions)
16 | 
17 | Create a spreadsheet with custom functions, menu items, and automated procedures.
18 | 
19 | ![Quickstart Custom Functions](https://developers.google.com/apps-script/images/quickstart-custom-functions.png)
20 | 
21 | ## [Bracket Maker](https://developers.google.com/apps-script/articles/bracket_maker)
22 | 
23 | This tutorial shows you how to use the Spreadsheets service to create Tournament Brackets similar to College Basketball's March Madness. You can use this tutorial to easily create your own brackets.
24 | 
25 | ## [Removing Duplicates](https://developers.google.com/apps-script/articles/removing_duplicates)
26 | 
27 | This tutorial shows how to avoid duplicates when you want to automate the process of copying data in Google Workspace and specifically how to remove duplicate rows in spreadsheet data.
28 | 


--------------------------------------------------------------------------------
/sheets/api/helpers.gs:
--------------------------------------------------------------------------------
 1 | let filesToDelete = [];
 2 | /**
 3 |  * Helper methods for Google Sheets tests.
 4 |  */
 5 | function Helpers() {
 6 |   this.filesToDelete = [];
 7 | }
 8 | 
 9 | Helpers.prototype.reset = function() {
10 |   this.filesToDelete = [];
11 | };
12 | 
13 | Helpers.prototype.deleteFileOnCleanup = function(id) {
14 |   this.filesToDelete.push(id);
15 | };
16 | 
17 | Helpers.prototype.cleanup = function() {
18 |   filesToDelete.forEach(Drive.Files.remove);
19 | };
20 | 
21 | Helpers.prototype.createTestSpreadsheet = function() {
22 |   const spreadsheet = SpreadsheetApp.create('Test Spreadsheet');
23 |   for (let i = 0; i < 3; ++i) {
24 |     spreadsheet.appendRow([1, 2, 3]);
25 |   }
26 |   this.deleteFileOnCleanup(spreadsheet.getId());
27 |   return spreadsheet.getId();
28 | };
29 | 
30 | Helpers.prototype.populateValues = function(spreadsheetId) {
31 |   const batchUpdateRequest = Sheets.newBatchUpdateSpreadsheetRequest();
32 |   const repeatCellRequest = Sheets.newRepeatCellRequest();
33 | 
34 |   let values = [];
35 |   for (let i = 0; i < 10; ++i) {
36 |     values[i] = [];
37 |     for (let j = 0; j < 10; ++j) {
38 |       values[i].push('Hello');
39 |     }
40 |   }
41 |   let range = 'A1:J10';
42 |   SpreadsheetApp.openById(spreadsheetId).getRange(range).setValues(values);
43 |   SpreadsheetApp.flush();
44 | };
45 | 


--------------------------------------------------------------------------------
/sheets/api/spreadsheet_snippets.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright  Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | 
 17 | /**
 18 |  * Google Sheets API Snippets.
 19 |  */
 20 | function Snippets() {};
 21 | 
 22 | // [START sheets_create]
 23 | /**
 24 |  * Creates a new sheet using the sheets advanced services
 25 |  * @param {string} title the name of the sheet to be created
 26 |  * @returns {string} the spreadsheet ID
 27 |  */
 28 | Snippets.prototype.create = (title) => {
 29 |   // This code uses the Sheets Advanced Service, but for most use cases
 30 |   // the built-in method SpreadsheetApp.create() is more appropriate.
 31 |   try {
 32 |     let sheet = Sheets.newSpreadsheet();
 33 |     sheet.properties = Sheets.newSpreadsheetProperties();
 34 |     sheet.properties.title = title;
 35 |     const spreadsheet = Sheets.Spreadsheets.create(sheet);
 36 | 
 37 |     return spreadsheet.spreadsheetId;
 38 |   } catch (err) {
 39 |     // TODO (developer) - Handle exception
 40 |     console.log('Failed with error %s', err.message);
 41 |   }
 42 | };
 43 | // [END sheets_create]
 44 | 
 45 | // [START sheets_batch_update]
 46 | /**
 47 |  * Updates the specified sheet using advanced sheet services
 48 |  * @param {string} spreadsheetId id of the spreadsheet to be updated
 49 |  * @param {string} title name of the sheet in the spreadsheet to be updated
 50 |  * @param {string} find string to be replaced
 51 |  * @param {string} replacement the string to replace the old data
 52 |  * @returns {*} the updated spreadsheet
 53 |  */
 54 | Snippets.prototype.batchUpdate = (spreadsheetId, title,
 55 |   find, replacement) => {
 56 |   // This code uses the Sheets Advanced Service, but for most use cases
 57 |   // the built-in method SpreadsheetApp.getActiveSpreadsheet()
 58 |   //     .getRange(range).setValues(values) is more appropriate.
 59 | 
 60 |   try {
 61 |     // Change the spreadsheet's title.
 62 |     let updateSpreadsheetPropertiesRequest =
 63 |       Sheets.newUpdateSpreadsheetPropertiesRequest();
 64 |     updateSpreadsheetPropertiesRequest.properties =
 65 |       Sheets.newSpreadsheetProperties();
 66 |     updateSpreadsheetPropertiesRequest.properties.title = title;
 67 |     updateSpreadsheetPropertiesRequest.fields = 'title';
 68 | 
 69 |     // Find and replace text.
 70 |     let findReplaceRequest = Sheets.newFindReplaceRequest();
 71 |     findReplaceRequest.find = find;
 72 |     findReplaceRequest.replacement = replacement;
 73 |     findReplaceRequest.allSheets = true;
 74 | 
 75 |     let requests = [Sheets.newRequest(), Sheets.newRequest()];
 76 |     requests[0].updateSpreadsheetProperties =
 77 |       updateSpreadsheetPropertiesRequest;
 78 |     requests[1].findReplace = findReplaceRequest;
 79 | 
 80 |     let batchUpdateRequest = Sheets.newBatchUpdateSpreadsheetRequest();
 81 |     batchUpdateRequest.requests = requests;
 82 | 
 83 |     // Add additional requests (operations)
 84 |     const result =
 85 |       Sheets.Spreadsheets.batchUpdate(batchUpdateRequest, spreadsheetId);
 86 |     return result;
 87 |   } catch (err) {
 88 |     // TODO (developer) - Handle exception
 89 |     console.log('Failed with error %s', err.message);
 90 |   }
 91 | };
 92 | // [END sheets_batch_update]
 93 | 
 94 | // [START sheets_get_values]
 95 | /**
 96 |  * Gets the values of the cells in the specified range
 97 |  * @param {string} spreadsheetId id of the spreadsheet
 98 |  * @param {string} range specifying the start and end cells of the range
 99 |  * @returns {*} Values in the range
100 |  */
101 | Snippets.prototype.getValues = function(spreadsheetId, range) {
102 |   // This code uses the Sheets Advanced Service, but for most use cases
103 |   // the built-in method SpreadsheetApp.getActiveSpreadsheet()
104 |   //     .getRange(range).getValues(values) is more appropriate.
105 |   try {
106 |     const result = Sheets.Spreadsheets.Values.get(spreadsheetId, range);
107 |     const numRows = result.values ? result.values.length : 0;
108 |     return result;
109 |   } catch (err) {
110 |     // TODO (developer) - Handle exception
111 |     console.log('Failed with error %s', err.message);
112 |   }
113 | };
114 | // [END sheets_get_values]
115 | 
116 | // [START sheets_batch_get_values]
117 | /**
118 |  * Get the values in the specified ranges
119 |  * @param {string} spreadsheetId spreadsheet's ID
120 |  * @param {list<string>} _ranges The span of ranges
121 |  * @returns {*} spreadsheet information and values
122 |  */
123 | Snippets.prototype.batchGetValues = (spreadsheetId,
124 |   _ranges) => {
125 |   // This code uses the Sheets Advanced Service, but for most use cases
126 |   // the built-in method SpreadsheetApp.getActiveSpreadsheet()
127 |   //     .getRange(range).getValues(values) is more appropriate.
128 |   let ranges = [
129 |     //Range names ...
130 |   ];
131 |   // [START_EXCLUDE silent]
132 |   ranges = _ranges;
133 |   // [END_EXCLUDE]
134 |   try {
135 |     const result =
136 |       Sheets.Spreadsheets.Values.batchGet(spreadsheetId, {ranges: ranges});
137 |     return result;
138 |   } catch (err) {
139 |     // TODO (developer) - Handle exception
140 |     console.log('Failed with error %s', err.message);
141 |   }
142 | };
143 | // [END sheets_batch_get_values]
144 | 
145 | // [START sheets_update_values]
146 | /**
147 |  * Updates the values in the specified range
148 |  * @param {string} spreadsheetId spreadsheet's ID
149 |  * @param {string} range the range of cells in spreadsheet
150 |  * @param {string} valueInputOption determines how the input should be interpreted
151 |  * @see
152 |  * https://developers.google.com/sheets/api/reference/rest/v4/ValueInputOption
153 |  * @param {list<list<string>>} _values list of string lists to input
154 |  * @returns {*} spreadsheet with updated values
155 |  */
156 | Snippets.prototype.updateValues = (spreadsheetId, range,
157 |   valueInputOption, _values) => {
158 |   // This code uses the Sheets Advanced Service, but for most use cases
159 |   // the built-in method SpreadsheetApp.getActiveSpreadsheet()
160 |   //     .getRange(range).setValues(values) is more appropriate.
161 |   let values = [
162 |     [
163 |       // Cell values ...
164 |     ]
165 |     // Additional rows ...
166 |   ];
167 |   // [START_EXCLUDE silent]
168 |   values = _values;
169 |   // [END_EXCLUDE]
170 | 
171 |   try {
172 |     let valueRange = Sheets.newValueRange();
173 |     valueRange.values = values;
174 |     const result = Sheets.Spreadsheets.Values.update(valueRange,
175 |       spreadsheetId, range, {valueInputOption: valueInputOption});
176 |     return result;
177 |   } catch (err) {
178 |     // TODO (developer) - Handle exception
179 |     console.log('Failed with error %s', err.message);
180 |   }
181 | };
182 | // [END sheets_update_values]
183 | 
184 | // [START sheets_batch_update_values]
185 | /**
186 |  * Updates the values in the specified range
187 |  * @param {string} spreadsheetId spreadsheet's ID
188 |  * @param {string} range range of cells of the spreadsheet
189 |  * @param {string} valueInputOption determines how the input should be interpreted
190 |  * @see
191 |  * https://developers.google.com/sheets/api/reference/rest/v4/ValueInputOption
192 |  * @param {list<list<string>>} _values list of string values to input
193 |  * @returns {*} spreadsheet with updated values
194 |  */
195 | Snippets.prototype.batchUpdateValues =
196 |   (spreadsheetId, range, valueInputOption,
197 |     _values) => {
198 |     // This code uses the Sheets Advanced Service, but for most use cases
199 |     // the built-in method SpreadsheetApp.getActiveSpreadsheet()
200 |     //     .getRange(range).setValues(values) is more appropriate.
201 |     let values = [
202 |       [
203 |         // Cell values ...
204 |       ]
205 |       // Additional rows ...
206 |     ];
207 |     // [START_EXCLUDE silent]
208 |     values = _values;
209 |     // [END_EXCLUDE]
210 | 
211 |     try {
212 |       let valueRange = Sheets.newValueRange();
213 |       valueRange.range = range;
214 |       valueRange.values = values;
215 | 
216 |       let batchUpdateRequest = Sheets.newBatchUpdateValuesRequest();
217 |       batchUpdateRequest.data = valueRange;
218 |       batchUpdateRequest.valueInputOption = valueInputOption;
219 | 
220 |       const result = Sheets.Spreadsheets.Values.batchUpdate(batchUpdateRequest,
221 |         spreadsheetId);
222 |       return result;
223 |     } catch (err) {
224 |       // TODO (developer) - Handle exception
225 |       console.log('Failed with error %s', err.message);
226 |     }
227 |   };
228 | // [END sheets_batch_update_values]
229 | 
230 | // [START sheets_append_values]
231 | /**
232 |  * Appends values to the specified range
233 |  * @param {string} spreadsheetId spreadsheet's ID
234 |  * @param {string} range range of cells in the spreadsheet
235 |  * @param valueInputOption determines how the input should be interpreted
236 |  * @see
237 |  * https://developers.google.com/sheets/api/reference/rest/v4/ValueInputOption
238 |  * @param {list<string>} _values list of rows of values to input
239 |  * @returns {*} spreadsheet with appended values
240 |  */
241 | Snippets.prototype.appendValues = (spreadsheetId, range,
242 |   valueInputOption, _values) => {
243 |   let values = [
244 |     [
245 |       // Cell values ...
246 |     ]
247 |     // Additional rows ...
248 |   ];
249 |   // [START_EXCLUDE silent]
250 |   values = _values;
251 |   // [END_EXCLUDE]
252 |   try {
253 |     let valueRange = Sheets.newRowData();
254 |     valueRange.values = values;
255 | 
256 |     let appendRequest = Sheets.newAppendCellsRequest();
257 |     appendRequest.sheetId = spreadsheetId;
258 |     appendRequest.rows = [valueRange];
259 | 
260 |     const result = Sheets.Spreadsheets.Values.append(valueRange, spreadsheetId,
261 |       range, {valueInputOption: valueInputOption});
262 |     return result;
263 |   } catch (err) {
264 |     // TODO (developer) - Handle exception
265 |     console.log('Failed with error %s', err.message);
266 |   }
267 | };
268 | // [END sheets_append_values]
269 | 
270 | // [START sheets_pivot_tables]
271 | /**
272 |  * Create pivot table
273 |  * @param {string} spreadsheetId spreadsheet ID
274 |  * @returns {*} pivot table's spreadsheet
275 |  */
276 | Snippets.prototype.pivotTable = (spreadsheetId) => {
277 |   try {
278 |     const spreadsheet = SpreadsheetApp.openById(spreadsheetId);
279 | 
280 |     // Create two sheets for our pivot table, assume we have one.
281 |     let sheet = spreadsheet.getSheets()[0];
282 |     sheet.copyTo(spreadsheet);
283 | 
284 |     const sourceSheetId = spreadsheet.getSheets()[0].getSheetId();
285 |     const targetSheetId = spreadsheet.getSheets()[1].getSheetId();
286 | 
287 |     // Create pivot table
288 |     const pivotTable = Sheets.newPivotTable();
289 | 
290 |     let gridRange = Sheets.newGridRange();
291 |     gridRange.sheetId = sourceSheetId;
292 |     gridRange.startRowIndex = 0;
293 |     gridRange.startColumnIndex = 0;
294 |     gridRange.endRowIndex = 20;
295 |     gridRange.endColumnIndex = 7;
296 |     pivotTable.source = gridRange;
297 | 
298 |     let pivotRows = Sheets.newPivotGroup();
299 |     pivotRows.sourceColumnOffset = 1;
300 |     pivotRows.showTotals = true;
301 |     pivotRows.sortOrder = 'ASCENDING';
302 |     pivotTable.rows = pivotRows;
303 | 
304 |     let pivotColumns = Sheets.newPivotGroup();
305 |     pivotColumns.sourceColumnOffset = 4;
306 |     pivotColumns.sortOrder = 'ASCENDING';
307 |     pivotColumns.showTotals = true;
308 |     pivotTable.columns = pivotColumns;
309 | 
310 |     let pivotValue = Sheets.newPivotValue();
311 |     pivotValue.summarizeFunction = 'COUNTA';
312 |     pivotValue.sourceColumnOffset = 4;
313 |     pivotTable.values = [pivotValue];
314 | 
315 |     // Create other metadata for the updateCellsRequest
316 |     let cellData = Sheets.newCellData();
317 |     cellData.pivotTable = pivotTable;
318 | 
319 |     let rows = Sheets.newRowData();
320 |     rows.values = cellData;
321 | 
322 |     let start = Sheets.newGridCoordinate();
323 |     start.sheetId = targetSheetId;
324 |     start.rowIndex = 0;
325 |     start.columnIndex = 0;
326 | 
327 |     let updateCellsRequest = Sheets.newUpdateCellsRequest();
328 |     updateCellsRequest.rows = rows;
329 |     updateCellsRequest.start = start;
330 |     updateCellsRequest.fields = 'pivotTable';
331 | 
332 |     // Batch update our spreadsheet
333 |     let batchUpdate = Sheets.newBatchUpdateSpreadsheetRequest();
334 |     let updateCellsRawRequest = Sheets.newRequest();
335 |     updateCellsRawRequest.updateCells = updateCellsRequest;
336 |     batchUpdate.requests = [updateCellsRawRequest];
337 |     const response = Sheets.Spreadsheets.batchUpdate(batchUpdate,
338 |       spreadsheetId);
339 | 
340 |     return response;
341 |   } catch (err) {
342 |     // TODO (developer) - Handle exception
343 |     console.log('Failed with error %s', err.message);
344 |   }
345 | };
346 | // [END sheets_pivot_tables]
347 | 
348 | // [START sheets_conditional_formatting]
349 | /**
350 |  * conditional formatting
351 |  * @param {string} spreadsheetId spreadsheet ID
352 |  * @returns {*} spreadsheet
353 |  */
354 | Snippets.prototype.conditionalFormatting = (spreadsheetId) => {
355 |   try {
356 |     let myRange = Sheets.newGridRange();
357 |     myRange.sheetId = 0;
358 |     myRange.startRowIndex = 0;
359 |     myRange.endRowIndex = 11;
360 |     myRange.startColumnIndex = 0;
361 |     myRange.endColumnIndex = 4;
362 | 
363 |     // Request 1
364 |     let rule1ConditionalValue = Sheets.newConditionValue();
365 |     rule1ConditionalValue.userEnteredValue = '=GT($D2,median($D$2:$D$11))';
366 | 
367 |     let rule1ConditionFormat = Sheets.newCellFormat();
368 |     rule1ConditionFormat.textFormat = Sheets.newTextFormat();
369 |     rule1ConditionFormat.textFormat.foregroundColor = Sheets.newColor();
370 |     rule1ConditionFormat.textFormat.foregroundColor.red = 0.8;
371 | 
372 |     let rule1Condition = Sheets.newBooleanCondition();
373 |     rule1Condition.type = 'CUSTOM_FORMULA';
374 |     rule1Condition.values = [rule1ConditionalValue];
375 | 
376 |     let rule1BooleanRule = Sheets.newBooleanRule();
377 |     rule1BooleanRule.condition = rule1Condition;
378 |     rule1BooleanRule.format = rule1ConditionFormat;
379 | 
380 |     let rule1 = Sheets.newConditionalFormatRule();
381 |     rule1.ranges = [myRange];
382 |     rule1.booleanRule = rule1BooleanRule;
383 | 
384 |     let request1 = Sheets.newRequest();
385 |     let addConditionalFormatRuleRequest1 =
386 |       Sheets.newAddConditionalFormatRuleRequest();
387 |     addConditionalFormatRuleRequest1.rule = rule1;
388 |     addConditionalFormatRuleRequest1.index = 0;
389 |     request1.addConditionalFormatRule = addConditionalFormatRuleRequest1;
390 | 
391 |     // Request 2
392 |     let rule2ConditionalValue = Sheets.newConditionValue();
393 |     rule2ConditionalValue.userEnteredValue = '=LT($D2,median($D$2:$D$11))';
394 | 
395 |     let rule2ConditionFormat = Sheets.newCellFormat();
396 |     rule2ConditionFormat.textFormat = Sheets.newTextFormat();
397 |     rule2ConditionFormat.textFormat.foregroundColor = Sheets.newColor();
398 |     rule2ConditionFormat.textFormat.foregroundColor.red = 1;
399 |     rule2ConditionFormat.textFormat.foregroundColor.green = 0.4;
400 |     rule2ConditionFormat.textFormat.foregroundColor.blue = 0.4;
401 | 
402 |     let rule2Condition = Sheets.newBooleanCondition();
403 |     rule2Condition.type = 'CUSTOM_FORMULA';
404 |     rule2Condition.values = [rule2ConditionalValue];
405 | 
406 |     let rule2BooleanRule = Sheets.newBooleanRule();
407 |     rule2BooleanRule.condition = rule2Condition;
408 |     rule2BooleanRule.format = rule2ConditionFormat;
409 | 
410 |     let rule2 = Sheets.newConditionalFormatRule();
411 |     rule2.ranges = [myRange];
412 |     rule2.booleanRule = rule2BooleanRule;
413 | 
414 |     let request2 = Sheets.newRequest();
415 |     let addConditionalFormatRuleRequest2 =
416 |       Sheets.newAddConditionalFormatRuleRequest();
417 |     addConditionalFormatRuleRequest2.rule = rule2;
418 |     addConditionalFormatRuleRequest2.index = 0;
419 |     request2.addConditionalFormatRule = addConditionalFormatRuleRequest2;
420 | 
421 |     // Batch send the requests
422 |     const requests = [request1, request2];
423 |     let batchUpdate = Sheets.newBatchUpdateSpreadsheetRequest();
424 |     batchUpdate.requests = requests;
425 |     const response =
426 |       Sheets.Spreadsheets.batchUpdate(batchUpdate, spreadsheetId);
427 |     return response;
428 |   } catch (err) {
429 |     // TODO (developer) - Handle exception
430 |     console.log('Failed with error %s', err.message);
431 |   }
432 | };
433 | // [END sheets_conditional_formatting]
434 | 


--------------------------------------------------------------------------------
/sheets/api/test_spreadsheet_snippets.gs:
--------------------------------------------------------------------------------
  1 | let snippets = new Snippets();
  2 | let helpers = new Helpers();
  3 | 
  4 | /**
  5 |  * A simple exists assertion check. Expects a value to exist. Errors if DNE.
  6 |  * @param {any} value A value that is expected to exist.
  7 |  */
  8 | function expectToExist(value) {
  9 |   if (value) {
 10 |     console.log('TEST: Exists');
 11 |   } else {
 12 |     throw new Error('TEST: DNE');
 13 |   }
 14 | }
 15 | 
 16 | /**
 17 |  * A simple exists assertion check for primatives (no nested objects).
 18 |  * Expects actual to equal expected. Logs the output.
 19 |  * @param {any} actual The actual value.
 20 |  * @param {any} expected The expected value.
 21 |  */
 22 | function expectToEqual(actual, expected) {
 23 |   console.log('TEST: actual: %s = expected: %s', actual, expected);
 24 |   if (actual !== expected) {
 25 |     console.log('TEST: actual: %s expected: %s', actual, expected);
 26 |   }
 27 | }
 28 | 
 29 | /**
 30 |  * Runs all tests.
 31 |  */
 32 | function RUN_ALL_TESTS() {
 33 |   itShouldCreateASpreadsheet();
 34 |   itShouldBatchUpdateASpreadsheet();
 35 |   itShouldGetSpreadsheetValues();
 36 |   itShouldBatchGetSpreadsheetValues();
 37 |   itShouldUpdateSpreadsheetValues();
 38 |   itShouldBatchUpdateSpreadsheetValues();
 39 |   itShouldAppendValuesToASpreadsheet();
 40 |   itShouldCreatePivotTables();
 41 |   itShouldConditionallyFormat();
 42 | }
 43 | 
 44 | /**
 45 |  * Tests creating a spreadsheet.
 46 |  */
 47 | function itShouldCreateASpreadsheet() {
 48 |   const spreadsheetId = snippets.create('Title');
 49 |   expectToExist(spreadsheetId);
 50 |   helpers.deleteFileOnCleanup(spreadsheetId);
 51 | }
 52 | 
 53 | /**
 54 |  * Tests updating a spreadsheet.
 55 |  */
 56 | function itShouldBatchUpdateASpreadsheet() {
 57 |   const spreadsheetId = helpers.createTestSpreadsheet();
 58 |   helpers.populateValues(spreadsheetId);
 59 |   const result = snippets.batchUpdate(spreadsheetId, 'New Title',
 60 |     'Hello', 'Goodbye');
 61 |   const replies = result.replies;
 62 |   expectToEqual(replies.length, 2);
 63 |   const findReplaceResponse = replies[1].findReplace;
 64 |   expectToEqual(findReplaceResponse.occurrencesChanged, 100);
 65 | }
 66 | 
 67 | /**
 68 |  * Tests getting a spreadsheet value.
 69 |  */
 70 | function itShouldGetSpreadsheetValues() {
 71 |   const spreadsheetId = helpers.createTestSpreadsheet();
 72 |   helpers.populateValues(spreadsheetId);
 73 |   const result = snippets.getValues(spreadsheetId, 'A1:C2');
 74 |   const values = result.values;
 75 |   expectToEqual(values.length, 2);
 76 |   expectToEqual(values[0].length, 3);
 77 | }
 78 | 
 79 | /**
 80 |  * Tests batch getting spreadsheet values.
 81 |  */
 82 | function itShouldBatchGetSpreadsheetValues() {
 83 |   const spreadsheetId = helpers.createTestSpreadsheet();
 84 |   helpers.populateValues(spreadsheetId);
 85 |   const result = snippets.batchGetValues(spreadsheetId,
 86 |     ['A1:A3', 'B1:C1']);
 87 |   expectToExist(result);
 88 |   expectToEqual(result.valueRanges.length, 2);
 89 |   expectToEqual(result.valueRanges[0].values.length, 3);
 90 | }
 91 | 
 92 | /**
 93 |  * Tests updating spreadsheet values.
 94 |  */
 95 | function itShouldUpdateSpreadsheetValues() {
 96 |   const spreadsheetId = helpers.createTestSpreadsheet();
 97 |   const result = snippets.updateValues(spreadsheetId, 'A1:B2',
 98 |     'USER_ENTERED', [['A', 'B'], ['C', 'D']]);
 99 |   expectToEqual(result.updatedRows, 2);
100 |   expectToEqual(result.updatedColumns, 2);
101 |   expectToEqual(result.updatedCells, 4);
102 | }
103 | 
104 | /**
105 |  * Test batch updating spreadsheet values.
106 |  */
107 | function itShouldBatchUpdateSpreadsheetValues() {
108 |   const spreadsheetId = helpers.createTestSpreadsheet();
109 |   const result = snippets.batchUpdateValues(spreadsheetId, 'A1:B2',
110 |     'USER_ENTERED', [['A', 'B'], ['C', 'D']]);
111 |   expectToEqual(result.totalUpdatedRows, 2);
112 |   expectToEqual(result.totalUpdatedColumns, 2);
113 |   expectToEqual(result.totalUpdatedCells, 4);
114 | }
115 | 
116 | /**
117 |  * Test appending values to a spreadsheet.
118 |  */
119 | function itShouldAppendValuesToASpreadsheet() {
120 |   const spreadsheetId = helpers.createTestSpreadsheet();
121 |   helpers.populateValues(spreadsheetId);
122 |   const result = snippets.appendValues(spreadsheetId, 'Sheet1',
123 |     'USER_ENTERED', [['A', 'B'], ['C', 'D']]);
124 |   const updates = result.updates;
125 |   expectToEqual(updates.updatedRows, 2);
126 |   expectToEqual(updates.updatedColumns, 2);
127 |   expectToEqual(updates.updatedCells, 4);
128 | }
129 | 
130 | /**
131 |  * Test creating pivot tables.
132 |  */
133 | function itShouldCreatePivotTables() {
134 |   const spreadsheetId = helpers.createTestSpreadsheet();
135 |   helpers.populateValues(spreadsheetId);
136 |   const result = snippets.pivotTable(spreadsheetId);
137 |   expectToExist(result);
138 | }
139 | 
140 | /**
141 |  * Test conditionally formatting spreadsheets.
142 |  */
143 | function itShouldConditionallyFormat() {
144 |   const spreadsheetId = helpers.createTestSpreadsheet();
145 |   helpers.populateValues(spreadsheetId);
146 |   const result = snippets.conditionalFormatting(spreadsheetId);
147 |   expectToExist(spreadsheetId);
148 |   expectToEqual(result.replies.length, 2);
149 | }
150 | 


--------------------------------------------------------------------------------
/sheets/customFunctions/btc.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 |  
17 | // See https://support.coinbase.com/customer/en/portal/articles/1914910-how-can-i-generate-api-keys-within-coinbase-commerce-
18 | var COINBASE_API_TOKEN = ''; // TODO
19 | /**
20 |  * Get's the bitcoin price at a date.
21 |  *
22 |  * @param {string} date The date in yyyy-MM-dd format. Defaults to today.
23 |  * @return The value of BTC in USD at the date. From Coinbase's API
24 |  * @customfunction
25 |  */
26 | function BTC(date) {
27 |   var dateObject = new Date();
28 |   if (date) {
29 |     dateObject = new Date(date);
30 |   }
31 |   var dateString = Utilities.formatDate(dateObject, "GMT", "yyyy-MM-dd");
32 |   var res = UrlFetchApp.fetch("https://api.coinbase.com/v2/prices/BTC-USD/spot?date=" + dateString, {
33 |      headers: {
34 |       "CB-VERSION": "2016-10-10",
35 |       Authorization: "Bearer " + COINBASE_API_TOKEN
36 |     }
37 |   });
38 |   var json = JSON.parse(res.getContentText());
39 |   return json.data.amount;
40 | }
41 | 


--------------------------------------------------------------------------------
/sheets/customFunctions/customFunctions.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | // [START apps_script_sheets_custom_functions_quickstart]
 17 | /**
 18 |  * @OnlyCurrentDoc Limits the script to only accessing the current sheet.
 19 |  */
 20 | 
 21 | /**
 22 |  * A special function that runs when the spreadsheet is open, used to add a
 23 |  * custom menu to the spreadsheet.
 24 |  */
 25 | function onOpen() {
 26 |   try {
 27 |     const spreadsheet = SpreadsheetApp.getActive();
 28 |     const menuItems = [
 29 |       {name: 'Prepare sheet...', functionName: 'prepareSheet_'},
 30 |       {name: 'Generate step-by-step...', functionName: 'generateStepByStep_'}
 31 |     ];
 32 |     spreadsheet.addMenu('Directions', menuItems);
 33 |   } catch (e) {
 34 |     // TODO (Developer) - Handle Exception
 35 |     console.log('Failed with error: %s' + e.error);
 36 |   }
 37 | }
 38 | 
 39 | /**
 40 |  * A custom function that converts meters to miles.
 41 |  *
 42 |  * @param {Number} meters The distance in meters.
 43 |  * @return {Number} The distance in miles.
 44 |  */
 45 | function metersToMiles(meters) {
 46 |   if (typeof meters !== 'number') {
 47 |     return null;
 48 |   }
 49 |   return meters / 1000 * 0.621371;
 50 | }
 51 | 
 52 | /**
 53 |  * A custom function that gets the driving distance between two addresses.
 54 |  *
 55 |  * @param {String} origin The starting address.
 56 |  * @param {String} destination The ending address.
 57 |  * @return {Number} The distance in meters.
 58 |  */
 59 | function drivingDistance(origin, destination) {
 60 |   const directions = getDirections_(origin, destination);
 61 |   return directions.routes[0].legs[0].distance.value;
 62 | }
 63 | 
 64 | /**
 65 |  * A function that adds headers and some initial data to the spreadsheet.
 66 |  */
 67 | function prepareSheet_() {
 68 |   try {
 69 |     const sheet = SpreadsheetApp.getActiveSheet().setName('Settings');
 70 |     const headers = [
 71 |       'Start Address',
 72 |       'End Address',
 73 |       'Driving Distance (meters)',
 74 |       'Driving Distance (miles)'];
 75 |     const initialData = [
 76 |       '350 5th Ave, New York, NY 10118',
 77 |       '405 Lexington Ave, New York, NY 10174'];
 78 |     sheet.getRange('A1:D1').setValues([headers]).setFontWeight('bold');
 79 |     sheet.getRange('A2:B2').setValues([initialData]);
 80 |     sheet.setFrozenRows(1);
 81 |     sheet.autoResizeColumns(1, 4);
 82 |   } catch (e) {
 83 |     // TODO (Developer) - Handle Exception
 84 |     console.log('Failed with error: %s' + e.error);
 85 |   }
 86 | }
 87 | 
 88 | /**
 89 |  * Creates a new sheet containing step-by-step directions between the two
 90 |  * addresses on the "Settings" sheet that the user selected.
 91 |  */
 92 | function generateStepByStep_() {
 93 |   try {
 94 |     const spreadsheet = SpreadsheetApp.getActive();
 95 |     const settingsSheet = spreadsheet.getSheetByName('Settings');
 96 |     settingsSheet.activate();
 97 | 
 98 |     // Prompt the user for a row number.
 99 |     const selectedRow = Browser
100 |         .inputBox('Generate step-by-step', 'Please enter the row number of' +
101 |         ' the' + ' addresses to use' + ' (for example, "2"):',
102 |         Browser.Buttons.OK_CANCEL);
103 |     if (selectedRow === 'cancel') {
104 |       return;
105 |     }
106 |     const rowNumber = Number(selectedRow);
107 |     if (isNaN(rowNumber) || rowNumber < 2 ||
108 |       rowNumber > settingsSheet.getLastRow()) {
109 |       Browser.msgBox('Error',
110 |           Utilities.formatString('Row "%s" is not valid.', selectedRow),
111 |           Browser.Buttons.OK);
112 |       return;
113 |     }
114 | 
115 | 
116 |     // Retrieve the addresses in that row.
117 |     const row = settingsSheet.getRange(rowNumber, 1, 1, 2);
118 |     const rowValues = row.getValues();
119 |     const origin = rowValues[0][0];
120 |     const destination = rowValues[0][1];
121 |     if (!origin || !destination) {
122 |       Browser.msgBox('Error', 'Row does not contain two addresses.',
123 |           Browser.Buttons.OK);
124 |       return;
125 |     }
126 | 
127 |     // Get the raw directions information.
128 |     const directions = getDirections_(origin, destination);
129 | 
130 |     // Create a new sheet and append the steps in the directions.
131 |     const sheetName = 'Driving Directions for Row ' + rowNumber;
132 |     let directionsSheet = spreadsheet.getSheetByName(sheetName);
133 |     if (directionsSheet) {
134 |       directionsSheet.clear();
135 |       directionsSheet.activate();
136 |     } else {
137 |       directionsSheet =
138 |         spreadsheet.insertSheet(sheetName, spreadsheet.getNumSheets());
139 |     }
140 |     const sheetTitle = Utilities
141 |         .formatString('Driving Directions from %s to %s', origin, destination);
142 |     const headers = [
143 |       [sheetTitle, '', ''],
144 |       ['Step', 'Distance (Meters)', 'Distance (Miles)']
145 |     ];
146 |     const newRows = [];
147 |     for (const step of directions.routes[0].legs[0].steps) {
148 |       // Remove HTML tags from the instructions.
149 |       const instructions = step.html_instructions
150 |           .replace(/<br>|<div.*?>/g, '\n').replace(/<.*?>/g, '');
151 |       newRows.push([
152 |         instructions,
153 |         step.distance.value
154 |       ]);
155 |     }
156 |     directionsSheet.getRange(1, 1, headers.length, 3).setValues(headers);
157 |     directionsSheet.getRange(headers.length + 1, 1, newRows.length, 2)
158 |         .setValues(newRows);
159 |     directionsSheet.getRange(headers.length + 1, 3, newRows.length, 1)
160 |         .setFormulaR1C1('=METERSTOMILES(R[0]C[-1])');
161 | 
162 |     // Format the new sheet.
163 |     directionsSheet.getRange('A1:C1').merge().setBackground('#ddddee');
164 |     directionsSheet.getRange('A1:2').setFontWeight('bold');
165 |     directionsSheet.setColumnWidth(1, 500);
166 |     directionsSheet.getRange('B2:C').setVerticalAlignment('top');
167 |     directionsSheet.getRange('C2:C').setNumberFormat('0.00');
168 |     const stepsRange = directionsSheet.getDataRange()
169 |         .offset(2, 0, directionsSheet.getLastRow() - 2);
170 |     setAlternatingRowBackgroundColors_(stepsRange, '#ffffff', '#eeeeee');
171 |     directionsSheet.setFrozenRows(2);
172 |     SpreadsheetApp.flush();
173 |   } catch (e) {
174 |     // TODO (Developer) - Handle Exception
175 |     console.log('Failed with error: %s' + e.error);
176 |   }
177 | }
178 | 
179 | /**
180 |  * Sets the background colors for alternating rows within the range.
181 |  * @param {Range} range The range to change the background colors of.
182 |  * @param {string} oddColor The color to apply to odd rows (relative to the
183 |  *     start of the range).
184 |  * @param {string} evenColor The color to apply to even rows (relative to the
185 |  *     start of the range).
186 |  */
187 | function setAlternatingRowBackgroundColors_(range, oddColor, evenColor) {
188 |   const backgrounds = [];
189 |   for (let row = 1; row <= range.getNumRows(); row++) {
190 |     const rowBackgrounds = [];
191 |     for (let column = 1; column <= range.getNumColumns(); column++) {
192 |       if (row % 2 === 0) {
193 |         rowBackgrounds.push(evenColor);
194 |       } else {
195 |         rowBackgrounds.push(oddColor);
196 |       }
197 |     }
198 |     backgrounds.push(rowBackgrounds);
199 |   }
200 |   range.setBackgrounds(backgrounds);
201 | }
202 | 
203 | /**
204 |  * A shared helper function used to obtain the full set of directions
205 |  * information between two addresses. Uses the Apps Script Maps Service.
206 |  *
207 |  * @param {String} origin The starting address.
208 |  * @param {String} destination The ending address.
209 |  * @return {Object} The directions response object.
210 |  */
211 | function getDirections_(origin, destination) {
212 |   const directionFinder = Maps.newDirectionFinder();
213 |   directionFinder.setOrigin(origin);
214 |   directionFinder.setDestination(destination);
215 |   const directions = directionFinder.getDirections();
216 |   if (directions.status !== 'OK') {
217 |     throw directions.error_message;
218 |   }
219 |   return directions;
220 | }
221 | // [END apps_script_sheets_custom_functions_quickstart]
222 | 
223 | 


--------------------------------------------------------------------------------
/sheets/dateAddAndSubtract/README.md:
--------------------------------------------------------------------------------
 1 | # Date Add and Subtract
 2 | 
 3 | Date Add and Subtract is a sample
 4 | [add-on for Google Sheets](https://developers.google.com/apps-script/add-ons)
 5 | that provides custom functions for date manipulation. The script uses the
 6 | [Moment.js](http://momentjs.com/) JavaScript library, which is included directly
 7 | in the Apps Script project.
 8 | 
 9 | ![Date Add and Subtract screenshot](screenshot.png)
10 | 
11 | ## Try it out
12 | 
13 | For your convience we have published the script to the Google Sheets
14 | [add-ons store](https://chrome.google.com/webstore/detail/date-add-and-subtract/mhdmhddjinipgjhpicaidhpimlmgnflb).
15 | Install the add-on via the store and follow the instructions to get started.
16 | 


--------------------------------------------------------------------------------
/sheets/dateAddAndSubtract/dateAddAndSubtract.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | 
 17 | /**
 18 |  * @fileoverview Provides the custom functions DATEADD and DATESUBTRACT and
 19 |  * the helper functions that they use.
 20 |  * @OnlyCurrentDoc
 21 |  */
 22 | 
 23 | /**
 24 |  * The list of valid unit identifiers.
 25 |  */
 26 | var VALID_UNITS = ['year', 'month', 'week', 'day', 'hour', 'minute', 'second',
 27 |     'millisecond'];
 28 | 
 29 | /**
 30 |  * Runs when the add-on is installed.
 31 |  */
 32 | function onInstall() {
 33 |   onOpen();
 34 | }
 35 | 
 36 | /**
 37 |  * Runs when the document is opened, creating the add-on's menu. Custom function
 38 |  * add-ons need at least one menu item, since the add-on is only enabled in the
 39 |  * current spreadsheet when a function is run.
 40 |  */
 41 | function onOpen() {
 42 |   SpreadsheetApp.getUi().createAddonMenu()
 43 |       .addItem('Use in this spreadsheet', 'use')
 44 |       .addToUi();
 45 | }
 46 | 
 47 | /**
 48 |  * Enables the add-on on for the current spreadsheet (simply by running) and
 49 |  * shows a popup informing the user of the new functions that are available.
 50 |  */
 51 | function use() {
 52 |   var title = 'Date Custom Functions';
 53 |   var message = 'The functions DATEADD and DATESUBTRACT are now available in ' +
 54 |       'this spreadsheet. More information is available in the function help ' +
 55 |       'box that appears when you start using them in a formula.';
 56 |   var ui = SpreadsheetApp.getUi();
 57 |   ui.alert(title, message, ui.ButtonSet.OK);
 58 | }
 59 | 
 60 | /**
 61 |  * Adds some amount of time to a date.
 62 |  * @param {Date|Range} date The date to add to, or a range of dates.
 63 |  * @param {string|Range} unit The unit of time to add, or a range of units.
 64 |  *    Possible values include:
 65 |  *    `years`, `months`, `weeks`, `days`, `hours`, `minutes`, `seconds`, and
 66 |  *    `milliseconds`. You can also use the shorthand notation for these units
 67 |  *    which are `y`, `M`, `w`, `d`, `h`, `m`, `s`, `ms` respectively.
 68 |  * @param {number|Range} amount The amount of the specified unit to add, or a
 69 |  *    range of amounts.
 70 |  * @return {Date} The new date.
 71 |  * @customFunction
 72 |  */
 73 | function DATEADD(date, unit, amount) {
 74 |   var args = toArray(arguments); // eslint-disable-line prefer-rest-params
 75 |   return multimap(args, function(date, unit, amount) {
 76 |     validateParameters(date, unit, amount);
 77 |     return moment(date).add(unit, amount).toDate();
 78 |   });
 79 | }
 80 | 
 81 | /**
 82 |  * @customFunction
 83 |  * A test function for DATEADD
 84 |  * @param {string|Range} date The date to add to.
 85 |  * @param {string|Range} unit The unit of time to add.
 86 |  * @param {number|Range} amount The amount of the specified unit to add.
 87 |  * @return {string} The date in a string.
 88 |  */
 89 | function DATETEST(date, unit, amount) {
 90 |   return JSON.stringify(DATEADD(date, unit, amount)); // eslint-disable-line new-cap
 91 | }
 92 | 
 93 | /**
 94 |  * Subtracts some amount of time from a date.
 95 |  * @param {Date|Range} date The date to subtract from, or a range of dates.
 96 |  * @param {string|Range} unit The unit of time to subtract, or a range of units.
 97 |  *    Possible values include:
 98 |  *    `years`, `months`, `weeks`, `days`, `hours`, `minutes`, `seconds`, and
 99 |  *    `milliseconds`. You can also use the shorthand notation for these units
100 |  *    which are `y`, `M`, `w`, `d`, `h`, `m`, `s`, `ms` respectively.
101 |  * @param {number|Range} amount The amount of the specified unit to subtract, or
102 |  *     a range of amounts.
103 |  * @return {Date} The new date.
104 |  * @customFunction
105 |  */
106 | function DATESUBTRACT(date, unit, amount) {
107 |   var args = toArray(arguments); // eslint-disable-line prefer-rest-params
108 |   return multimap(args, function(date, unit, amount) {
109 |     validateParameters(date, unit, amount);
110 |     return moment(date).subtract(unit, amount).toDate();
111 |   });
112 | }
113 | 
114 | /**
115 |  * Validates that the date, unit, and amount supplied are compatible with
116 |  * Moment, throwing an exception if any of the parameters are invalid.
117 |  * @param {Date} date The date to add to or subtract from.
118 |  * @param {string} unit The unit of time to add/subtract.
119 |  * @param {number} amount The amount of the specified unit to add/subtract.
120 |  */
121 | function validateParameters(date, unit, amount) {
122 |   if (date == undefined || typeof date == 'number' || !moment(date).isValid()) {
123 |     throw Utilities.formatString('Parameter 1 expects a date value, but "%s" ' +
124 |         'cannot be coerced to a date.', date);
125 |   }
126 |   if (VALID_UNITS.indexOf(moment.normalizeUnits(unit)) < 0) {
127 |     throw Utilities.formatString('Parameter 2 expects a unit identifier, but ' +
128 |         '"%s" is not a valid identifier.', unit);
129 |   }
130 |   if (isNaN(Number(amount))) {
131 |     throw Utilities.formatString('Parameter 3 expects a number value, but ' +
132 |         '"%s" cannot be coerced to a number.', amount);
133 |   }
134 | }
135 | 
136 | /**
137 |  * Applies a function to a set of arguments, looping over arrays in those
138 |  * arguments. Similar to Array.map, except that it can map the function across
139 |  * multiple arrays, passing forward non-array values.
140 |  * @param {Array} args The arguments to map against.
141 |  * @param {Function} func The function to apply.
142 |  * @return {Array} The results of the mapping.
143 |  */
144 | function multimap(args, func) {
145 |   // Determine the length of the arrays.
146 |   var lengths = args.map(function(arg) {
147 |     if (arg instanceof Array) {
148 |       return arg.length;
149 |     } else {
150 |       return 0;
151 |     }
152 |   });
153 |   var max = Math.max.apply(null, lengths);
154 | 
155 |   // If there aren't any arrays, just call the function.
156 |   if (max == 0) {
157 |     return func(...args);
158 |   }
159 | 
160 |   // Ensure all the arrays are the same length.
161 |   // Arrays of length 1 are exempted, since they are assumed to be rows/columns
162 |   // that should apply to each row/column in the other sets.
163 |   lengths.forEach(function(length) {
164 |     if (length != max && length > 1) {
165 |       throw new Error('All input ranges must be the same size: ' + max);
166 |     }
167 |   });
168 | 
169 |   // Recursively apply the map function to each element in the arrays.
170 |   var result = [];
171 |   for (var i = 0; i < max; i++) {
172 |     var params = args.map(function(arg) {
173 |       if (arg instanceof Array) {
174 |         return arg.length == 1 ? arg[0] : arg[i];
175 |       } else {
176 |         return arg;
177 |       }
178 |     });
179 |     result.push(multimap(params, func));
180 |   }
181 |   return result;
182 | }
183 | 
184 | /**
185 |  * Convert the array-like arguments object into a real array.
186 |  * @param {Arguments} args The arguments object to convert.
187 |  * @return {Array} The equivalent array.
188 |  */
189 | function toArray(args) {
190 |   return Array.prototype.slice.call(args);
191 | }
192 | 


--------------------------------------------------------------------------------
/sheets/dateAddAndSubtract/moment.gs:
--------------------------------------------------------------------------------
  1 | // ! moment.js
  2 | // ! version : 2.10.6
  3 | // ! authors : Tim Wood, Iskren Chernev, Moment.js contributors
  4 | // ! license : MIT
  5 | // ! momentjs.com
  6 | 
  7 | /*
  8 | Copyright (c) 2011-2015 Tim Wood, Iskren Chernev, Moment.js contributors
  9 | 
 10 | Permission is hereby granted, free of charge, to any person
 11 | obtaining a copy of this software and associated documentation
 12 | files (the "Software"), to deal in the Software without
 13 | restriction, including without limitation the rights to use,
 14 | copy, modify, merge, publish, distribute, sublicense, and/or sell
 15 | copies of the Software, and to permit persons to whom the
 16 | Software is furnished to do so, subject to the following
 17 | conditions:
 18 | 
 19 | The above copyright notice and this permission notice shall be
 20 | included in all copies or substantial portions of the Software.
 21 | 
 22 | THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 23 | EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 24 | OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 25 | NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 26 | HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 27 | WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 28 | FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 29 | OTHER DEALINGS IN THE SOFTWARE.
 30 | */
 31 | 
 32 | !function(a, b) {
 33 | 'object'==typeof exports&&'undefined'!=typeof module?module.exports=b():'function'==typeof define&&define.amd?define(b):a.moment=b();
 34 | }(this, function() {
 35 | 'use strict'; function a() {
 36 | return Hc(...arguments);
 37 | } function b(a) {
 38 | Hc=a;
 39 | } function c(a) {
 40 | return '[object Array]'===Object.prototype.toString.call(a);
 41 | } function d(a) {
 42 | return a instanceof Date||'[object Date]'===Object.prototype.toString.call(a);
 43 | } function e(a, b) {
 44 | var c, d=[]; for (c=0; c<a.length; ++c)d.push(b(a[c], c)); return d;
 45 | } function f(a, b) {
 46 | return Object.prototype.hasOwnProperty.call(a, b);
 47 | } function g(a, b) {
 48 | for (var c in b)f(b, c)&&(a[c]=b[c]); return f(b, 'toString')&&(a.toString=b.toString), f(b, 'valueOf')&&(a.valueOf=b.valueOf), a;
 49 | } function h(a, b, c, d) {
 50 | return Ca(a, b, c, d, !0).utc();
 51 | } function i() {
 52 | return {empty: !1, unusedTokens: [], unusedInput: [], overflow: -2, charsLeftOver: 0, nullInput: !1, invalidMonth: null, invalidFormat: !1, userInvalidated: !1, iso: !1};
 53 | } function j(a) {
 54 | return null==a._pf&&(a._pf=i()), a._pf;
 55 | } function k(a) {
 56 | if (null==a._isValid) {
 57 | var b=j(a); a._isValid=!(isNaN(a._d.getTime())||!(b.overflow<0)||b.empty||b.invalidMonth||b.invalidWeekday||b.nullInput||b.invalidFormat||b.userInvalidated), a._strict&&(a._isValid=a._isValid&&0===b.charsLeftOver&&0===b.unusedTokens.length&&void 0===b.bigHour);
 58 | } return a._isValid;
 59 | } function l(a) {
 60 | var b=h(NaN); return null!=a?g(j(b), a):j(b).userInvalidated=!0, b;
 61 | } function m(a, b) {
 62 | var c, d, e; if ('undefined'!=typeof b._isAMomentObject&&(a._isAMomentObject=b._isAMomentObject), 'undefined'!=typeof b._i&&(a._i=b._i), 'undefined'!=typeof b._f&&(a._f=b._f), 'undefined'!=typeof b._l&&(a._l=b._l), 'undefined'!=typeof b._strict&&(a._strict=b._strict), 'undefined'!=typeof b._tzm&&(a._tzm=b._tzm), 'undefined'!=typeof b._isUTC&&(a._isUTC=b._isUTC), 'undefined'!=typeof b._offset&&(a._offset=b._offset), 'undefined'!=typeof b._pf&&(a._pf=j(b)), 'undefined'!=typeof b._locale&&(a._locale=b._locale), Jc.length>0) for (c in Jc)d=Jc[c], e=b[d], 'undefined'!=typeof e&&(a[d]=e); return a;
 63 | } function n(b) {
 64 | m(this, b), this._d=new Date(null!=b._d?b._d.getTime():NaN), Kc===!1&&(Kc=!0, a.updateOffset(this), Kc=!1);
 65 | } function o(a) {
 66 | return a instanceof n||null!=a&&null!=a._isAMomentObject;
 67 | } function p(a) {
 68 | return 0>a?Math.ceil(a):Math.floor(a);
 69 | } function q(a) {
 70 | var b=+a, c=0; return 0!==b&&isFinite(b)&&(c=p(b)), c;
 71 | } function r(a, b, c) {
 72 | var d, e=Math.min(a.length, b.length), f=Math.abs(a.length-b.length), g=0; for (d=0; e>d; d++)(c&&a[d]!==b[d]||!c&&q(a[d])!==q(b[d]))&&g++; return g+f;
 73 | } function s() {} function t(a) {
 74 | return a?a.toLowerCase().replace('_', '-'):a;
 75 | } function u(a) {
 76 | for (var b, c, d, e, f=0; f<a.length;) {
 77 | for (e=t(a[f]).split('-'), b=e.length, c=t(a[f+1]), c=c?c.split('-'):null; b>0;) {
 78 | if (d=v(e.slice(0, b).join('-'))) return d; if (c&&c.length>=b&&r(e, c, !0)>=b-1) break; b--;
 79 | }f++;
 80 | } return null;
 81 | } function v(a) {
 82 | var b=null; if (!Lc[a]&&'undefined'!=typeof module&&module&&module.exports) {
 83 | try {
 84 | b=Ic._abbr, require('./locale/'+a), w(b);
 85 | } catch (c) {}
 86 | } return Lc[a];
 87 | } function w(a, b) {
 88 | var c; return a&&(c='undefined'==typeof b?y(a):x(a, b), c&&(Ic=c)), Ic._abbr;
 89 | } function x(a, b) {
 90 | return null!==b?(b.abbr=a, Lc[a]=Lc[a]||new s, Lc[a].set(b), w(a), Lc[a]):(delete Lc[a], null);
 91 | } function y(a) {
 92 | var b; if (a&&a._locale&&a._locale._abbr&&(a=a._locale._abbr), !a) return Ic; if (!c(a)) {
 93 | if (b=v(a)) return b; a=[a];
 94 | } return u(a);
 95 | } function z(a, b) {
 96 | var c=a.toLowerCase(); Mc[c]=Mc[c+'s']=Mc[b]=a;
 97 | } function A(a) {
 98 | return 'string'==typeof a?Mc[a]||Mc[a.toLowerCase()]:void 0;
 99 | } function B(a) {
100 | var b, c, d={}; for (c in a)f(a, c)&&(b=A(c), b&&(d[b]=a[c])); return d;
101 | } function C(b, c) {
102 | return function(d) {
103 | return null!=d?(E(this, b, d), a.updateOffset(this, c), this):D(this, b);
104 | };
105 | } function D(a, b) {
106 | return a._d['get'+(a._isUTC?'UTC':'')+b]();
107 | } function E(a, b, c) {
108 | return a._d['set'+(a._isUTC?'UTC':'')+b](c);
109 | } function F(a, b) {
110 | var c; if ('object'==typeof a) for (c in a) this.set(c, a[c]); else if (a=A(a), 'function'==typeof this[a]) return this[a](b); return this;
111 | } function G(a, b, c) {
112 | var d=''+Math.abs(a), e=b-d.length, f=a>=0; return (f?c?'+':'':'-')+Math.pow(10, Math.max(0, e)).toString().substr(1)+d;
113 | } function H(a, b, c, d) {
114 | var e=d; 'string'==typeof d&&(e=function() {
115 | return this[d]();
116 | }), a&&(Qc[a]=e), b&&(Qc[b[0]]=function() {
117 | return G(e.apply(this, arguments), b[1], b[2]);
118 | }), c&&(Qc[c]=function() {
119 | return this.localeData().ordinal(e.apply(this, arguments), a);
120 | });
121 | } function I(a) {
122 | return a.match(/\[[\s\S]/)?a.replace(/^\[|\]$/g, ''):a.replace(/\\/g, '');
123 | } function J(a) {
124 | var b, c, d=a.match(Nc); for (b=0, c=d.length; c>b; b++)Qc[d[b]]?d[b]=Qc[d[b]]:d[b]=I(d[b]); return function(e) {
125 | var f=''; for (b=0; c>b; b++)f+=d[b]instanceof Function?d[b].call(e, a):d[b]; return f;
126 | };
127 | } function K(a, b) {
128 | return a.isValid()?(b=L(b, a.localeData()), Pc[b]=Pc[b]||J(b), Pc[b](a)):a.localeData().invalidDate();
129 | } function L(a, b) {
130 | function c(a) {
131 | return b.longDateFormat(a)||a;
132 | } var d=5; for (Oc.lastIndex=0; d>=0&&Oc.test(a);)a=a.replace(Oc, c), Oc.lastIndex=0, d-=1; return a;
133 | } function M(a) {
134 | return 'function'==typeof a&&'[object Function]'===Object.prototype.toString.call(a);
135 | } function N(a, b, c) {
136 | dd[a]=M(b)?b:function(a) {
137 | return a&&c?c:b;
138 | };
139 | } function O(a, b) {
140 | return f(dd, a)?dd[a](b._strict, b._locale):new RegExp(P(a));
141 | } function P(a) {
142 | return a.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function(a, b, c, d, e) {
143 | return b||c||d||e;
144 | }).replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
145 | } function Q(a, b) {
146 | var c, d=b; for ('string'==typeof a&&(a=[a]), 'number'==typeof b&&(d=function(a, c) {
147 | c[b]=q(a);
148 | }), c=0; c<a.length; c++)ed[a[c]]=d;
149 | } function R(a, b) {
150 | Q(a, function(a, c, d, e) {
151 | d._w=d._w||{}, b(a, d._w, d, e);
152 | });
153 | } function S(a, b, c) {
154 | null!=b&&f(ed, a)&&ed[a](b, c._a, c, a);
155 | } function T(a, b) {
156 | return new Date(Date.UTC(a, b+1, 0)).getUTCDate();
157 | } function U(a) {
158 | return this._months[a.month()];
159 | } function V(a) {
160 | return this._monthsShort[a.month()];
161 | } function W(a, b, c) {
162 | var d, e, f; for (this._monthsParse||(this._monthsParse=[], this._longMonthsParse=[], this._shortMonthsParse=[]), d=0; 12>d; d++) {
163 | if (e=h([2e3, d]), c&&!this._longMonthsParse[d]&&(this._longMonthsParse[d]=new RegExp('^'+this.months(e, '').replace('.', '')+'$', 'i'), this._shortMonthsParse[d]=new RegExp('^'+this.monthsShort(e, '').replace('.', '')+'$', 'i')), c||this._monthsParse[d]||(f='^'+this.months(e, '')+'|^'+this.monthsShort(e, ''), this._monthsParse[d]=new RegExp(f.replace('.', ''), 'i')), c&&'MMMM'===b&&this._longMonthsParse[d].test(a)) return d; if (c&&'MMM'===b&&this._shortMonthsParse[d].test(a)) return d; if (!c&&this._monthsParse[d].test(a)) return d;
164 | }
165 | } function X(a, b) {
166 | var c; return 'string'==typeof b&&(b=a.localeData().monthsParse(b), 'number'!=typeof b)?a:(c=Math.min(a.date(), T(a.year(), b)), a._d['set'+(a._isUTC?'UTC':'')+'Month'](b, c), a);
167 | } function Y(b) {
168 | return null!=b?(X(this, b), a.updateOffset(this, !0), this):D(this, 'Month');
169 | } function Z() {
170 | return T(this.year(), this.month());
171 | } function $(a) {
172 | var b, c=a._a; return c&&-2===j(a).overflow&&(b=c[gd]<0||c[gd]>11?gd:c[hd]<1||c[hd]>T(c[fd], c[gd])?hd:c[id]<0||c[id]>24||24===c[id]&&(0!==c[jd]||0!==c[kd]||0!==c[ld])?id:c[jd]<0||c[jd]>59?jd:c[kd]<0||c[kd]>59?kd:c[ld]<0||c[ld]>999?ld:-1, j(a)._overflowDayOfYear&&(fd>b||b>hd)&&(b=hd), j(a).overflow=b), a;
173 | } function _(b) {
174 | a.suppressDeprecationWarnings===!1&&'undefined'!=typeof console&&console.warn&&console.warn('Deprecation warning: '+b);
175 | } function aa(a, b) {
176 | var c=!0; return g(function() {
177 | return c&&(_(a+'\n'+(new Error).stack), c=!1), b.apply(this, arguments);
178 | }, b);
179 | } function ba(a, b) {
180 | od[a]||(_(b), od[a]=!0);
181 | } function ca(a) {
182 | var b, c, d=a._i, e=pd.exec(d); if (e) {
183 | for (j(a).iso=!0, b=0, c=qd.length; c>b; b++) {
184 | if (qd[b][1].exec(d)) {
185 | a._f=qd[b][0]; break;
186 | }
187 | } for (b=0, c=rd.length; c>b; b++) {
188 | if (rd[b][1].exec(d)) {
189 | a._f+=(e[6]||' ')+rd[b][0]; break;
190 | }
191 | }d.match(ad)&&(a._f+='Z'), va(a);
192 | } else a._isValid=!1;
193 | } function da(b) {
194 | var c=sd.exec(b._i); return null!==c?void(b._d=new Date(+c[1])):(ca(b), void(b._isValid===!1&&(delete b._isValid, a.createFromInputFallback(b))));
195 | } function ea(a, b, c, d, e, f, g) {
196 | var h=new Date(a, b, c, d, e, f, g); return 1970>a&&h.setFullYear(a), h;
197 | } function fa(a) {
198 | var b=new Date(Date.UTC.apply(null, arguments)); return 1970>a&&b.setUTCFullYear(a), b;
199 | } function ga(a) {
200 | return ha(a)?366:365;
201 | } function ha(a) {
202 | return a%4===0&&a%100!==0||a%400===0;
203 | } function ia() {
204 | return ha(this.year());
205 | } function ja(a, b, c) {
206 | var d, e=c-b, f=c-a.day(); return f>e&&(f-=7), e-7>f&&(f+=7), d=Da(a).add(f, 'd'), {week: Math.ceil(d.dayOfYear()/7), year: d.year()};
207 | } function ka(a) {
208 | return ja(a, this._week.dow, this._week.doy).week;
209 | } function la() {
210 | return this._week.dow;
211 | } function ma() {
212 | return this._week.doy;
213 | } function na(a) {
214 | var b=this.localeData().week(this); return null==a?b:this.add(7*(a-b), 'd');
215 | } function oa(a) {
216 | var b=ja(this, 1, 4).week; return null==a?b:this.add(7*(a-b), 'd');
217 | } function pa(a, b, c, d, e) {
218 | var f, g=6+e-d, h=fa(a, 0, 1+g), i=h.getUTCDay(); return e>i&&(i+=7), c=null!=c?1*c:e, f=1+g+7*(b-1)-i+c, {year: f>0?a:a-1, dayOfYear: f>0?f:ga(a-1)+f};
219 | } function qa(a) {
220 | var b=Math.round((this.clone().startOf('day')-this.clone().startOf('year'))/864e5)+1; return null==a?b:this.add(a-b, 'd');
221 | } function ra(a, b, c) {
222 | return null!=a?a:null!=b?b:c;
223 | } function sa(a) {
224 | var b=new Date; return a._useUTC?[b.getUTCFullYear(), b.getUTCMonth(), b.getUTCDate()]:[b.getFullYear(), b.getMonth(), b.getDate()];
225 | } function ta(a) {
226 | var b, c, d, e, f=[]; if (!a._d) {
227 | for (d=sa(a), a._w&&null==a._a[hd]&&null==a._a[gd]&&ua(a), a._dayOfYear&&(e=ra(a._a[fd], d[fd]), a._dayOfYear>ga(e)&&(j(a)._overflowDayOfYear=!0), c=fa(e, 0, a._dayOfYear), a._a[gd]=c.getUTCMonth(), a._a[hd]=c.getUTCDate()), b=0; 3>b&&null==a._a[b]; ++b)a._a[b]=f[b]=d[b]; for (;7>b; b++)a._a[b]=f[b]=null==a._a[b]?2===b?1:0:a._a[b]; 24===a._a[id]&&0===a._a[jd]&&0===a._a[kd]&&0===a._a[ld]&&(a._nextDay=!0, a._a[id]=0), a._d=(a._useUTC?fa:ea)(...f), null!=a._tzm&&a._d.setUTCMinutes(a._d.getUTCMinutes()-a._tzm), a._nextDay&&(a._a[id]=24);
228 | }
229 | } function ua(a) {
230 | var b, c, d, e, f, g, h; b=a._w, null!=b.GG||null!=b.W||null!=b.E?(f=1, g=4, c=ra(b.GG, a._a[fd], ja(Da(), 1, 4).year), d=ra(b.W, 1), e=ra(b.E, 1)):(f=a._locale._week.dow, g=a._locale._week.doy, c=ra(b.gg, a._a[fd], ja(Da(), f, g).year), d=ra(b.w, 1), null!=b.d?(e=b.d, f>e&&++d):e=null!=b.e?b.e+f:f), h=pa(c, d, e, g, f), a._a[fd]=h.year, a._dayOfYear=h.dayOfYear;
231 | } function va(b) {
232 | if (b._f===a.ISO_8601) return void ca(b); b._a=[], j(b).empty=!0; var c, d, e, f, g, h=''+b._i, i=h.length, k=0; for (e=L(b._f, b._locale).match(Nc)||[], c=0; c<e.length; c++)f=e[c], d=(h.match(O(f, b))||[])[0], d&&(g=h.substr(0, h.indexOf(d)), g.length>0&&j(b).unusedInput.push(g), h=h.slice(h.indexOf(d)+d.length), k+=d.length), Qc[f]?(d?j(b).empty=!1:j(b).unusedTokens.push(f), S(f, d, b)):b._strict&&!d&&j(b).unusedTokens.push(f); j(b).charsLeftOver=i-k, h.length>0&&j(b).unusedInput.push(h), j(b).bigHour===!0&&b._a[id]<=12&&b._a[id]>0&&(j(b).bigHour=void 0), b._a[id]=wa(b._locale, b._a[id], b._meridiem), ta(b), $(b);
233 | } function wa(a, b, c) {
234 | var d; return null==c?b:null!=a.meridiemHour?a.meridiemHour(b, c):null!=a.isPM?(d=a.isPM(c), d&&12>b&&(b+=12), d||12!==b||(b=0), b):b;
235 | } function xa(a) {
236 | var b, c, d, e, f; if (0===a._f.length) return j(a).invalidFormat=!0, void(a._d=new Date(NaN)); for (e=0; e<a._f.length; e++)f=0, b=m({}, a), null!=a._useUTC&&(b._useUTC=a._useUTC), b._f=a._f[e], va(b), k(b)&&(f+=j(b).charsLeftOver, f+=10*j(b).unusedTokens.length, j(b).score=f, (null==d||d>f)&&(d=f, c=b)); g(a, c||b);
237 | } function ya(a) {
238 | if (!a._d) {
239 | var b=B(a._i); a._a=[b.year, b.month, b.day||b.date, b.hour, b.minute, b.second, b.millisecond], ta(a);
240 | }
241 | } function za(a) {
242 | var b=new n($(Aa(a))); return b._nextDay&&(b.add(1, 'd'), b._nextDay=void 0), b;
243 | } function Aa(a) {
244 | var b=a._i, e=a._f; return a._locale=a._locale||y(a._l), null===b||void 0===e&&''===b?l({nullInput: !0}):('string'==typeof b&&(a._i=b=a._locale.preparse(b)), o(b)?new n($(b)):(c(e)?xa(a):e?va(a):d(b)?a._d=b:Ba(a), a));
245 | } function Ba(b) {
246 | var f=b._i; void 0===f?b._d=new Date:d(f)?b._d=new Date(+f):'string'==typeof f?da(b):c(f)?(b._a=e(f.slice(0), function(a) {
247 | return parseInt(a, 10);
248 | }), ta(b)):'object'==typeof f?ya(b):'number'==typeof f?b._d=new Date(f):a.createFromInputFallback(b);
249 | } function Ca(a, b, c, d, e) {
250 | var f={}; return 'boolean'==typeof c&&(d=c, c=void 0), f._isAMomentObject=!0, f._useUTC=f._isUTC=e, f._l=c, f._i=a, f._f=b, f._strict=d, za(f);
251 | } function Da(a, b, c, d) {
252 | return Ca(a, b, c, d, !1);
253 | } function Ea(a, b) {
254 | var d, e; if (1===b.length&&c(b[0])&&(b=b[0]), !b.length) return Da(); for (d=b[0], e=1; e<b.length; ++e)(!b[e].isValid()||b[e][a](d))&&(d=b[e]); return d;
255 | } function Fa() {
256 | var a=[].slice.call(arguments, 0); return Ea('isBefore', a);
257 | } function Ga() {
258 | var a=[].slice.call(arguments, 0); return Ea('isAfter', a);
259 | } function Ha(a) {
260 | var b=B(a), c=b.year||0, d=b.quarter||0, e=b.month||0, f=b.week||0, g=b.day||0, h=b.hour||0, i=b.minute||0, j=b.second||0, k=b.millisecond||0; this._milliseconds=+k+1e3*j+6e4*i+36e5*h, this._days=+g+7*f, this._months=+e+3*d+12*c, this._data={}, this._locale=y(), this._bubble();
261 | } function Ia(a) {
262 | return a instanceof Ha;
263 | } function Ja(a, b) {
264 | H(a, 0, 0, function() {
265 | var a=this.utcOffset(), c='+'; return 0>a&&(a=-a, c='-'), c+G(~~(a/60), 2)+b+G(~~a%60, 2);
266 | });
267 | } function Ka(a) {
268 | var b=(a||'').match(ad)||[], c=b[b.length-1]||[], d=(c+'').match(xd)||['-', 0, 0], e=+(60*d[1])+q(d[2]); return '+'===d[0]?e:-e;
269 | } function La(b, c) {
270 | var e, f; return c._isUTC?(e=c.clone(), f=(o(b)||d(b)?+b:+Da(b))-+e, e._d.setTime(+e._d+f), a.updateOffset(e, !1), e):Da(b).local();
271 | } function Ma(a) {
272 | return 15*-Math.round(a._d.getTimezoneOffset()/15);
273 | } function Na(b, c) {
274 | var d, e=this._offset||0; return null!=b?('string'==typeof b&&(b=Ka(b)), Math.abs(b)<16&&(b=60*b), !this._isUTC&&c&&(d=Ma(this)), this._offset=b, this._isUTC=!0, null!=d&&this.add(d, 'm'), e!==b&&(!c||this._changeInProgress?bb(this, Ya(b-e, 'm'), 1, !1):this._changeInProgress||(this._changeInProgress=!0, a.updateOffset(this, !0), this._changeInProgress=null)), this):this._isUTC?e:Ma(this);
275 | } function Oa(a, b) {
276 | return null!=a?('string'!=typeof a&&(a=-a), this.utcOffset(a, b), this):-this.utcOffset();
277 | } function Pa(a) {
278 | return this.utcOffset(0, a);
279 | } function Qa(a) {
280 | return this._isUTC&&(this.utcOffset(0, a), this._isUTC=!1, a&&this.subtract(Ma(this), 'm')), this;
281 | } function Ra() {
282 | return this._tzm?this.utcOffset(this._tzm):'string'==typeof this._i&&this.utcOffset(Ka(this._i)), this;
283 | } function Sa(a) {
284 | return a=a?Da(a).utcOffset():0, (this.utcOffset()-a)%60===0;
285 | } function Ta() {
286 | return this.utcOffset()> this.clone().month(0).utcOffset()||this.utcOffset()> this.clone().month(5).utcOffset();
287 | } function Ua() {
288 | if ('undefined'!=typeof this._isDSTShifted) return this._isDSTShifted; var a={}; if (m(a, this), a=Aa(a), a._a) {
289 | var b=a._isUTC?h(a._a):Da(a._a); this._isDSTShifted=this.isValid()&&r(a._a, b.toArray())>0;
290 | } else this._isDSTShifted=!1; return this._isDSTShifted;
291 | } function Va() {
292 | return !this._isUTC;
293 | } function Wa() {
294 | return this._isUTC;
295 | } function Xa() {
296 | return this._isUTC&&0===this._offset;
297 | } function Ya(a, b) {
298 | var c, d, e, g=a, h=null; return Ia(a)?g={ms: a._milliseconds, d: a._days, M: a._months}:'number'==typeof a?(g={}, b?g[b]=a:g.milliseconds=a):(h=yd.exec(a))?(c='-'===h[1]?-1:1, g={y: 0, d: q(h[hd])*c, h: q(h[id])*c, m: q(h[jd])*c, s: q(h[kd])*c, ms: q(h[ld])*c}):(h=zd.exec(a))?(c='-'===h[1]?-1:1, g={y: Za(h[2], c), M: Za(h[3], c), d: Za(h[4], c), h: Za(h[5], c), m: Za(h[6], c), s: Za(h[7], c), w: Za(h[8], c)}):null==g?g={}:'object'==typeof g&&('from'in g||'to'in g)&&(e=_a(Da(g.from), Da(g.to)), g={}, g.ms=e.milliseconds, g.M=e.months), d=new Ha(g), Ia(a)&&f(a, '_locale')&&(d._locale=a._locale), d;
299 | } function Za(a, b) {
300 | var c=a&&parseFloat(a.replace(',', '.')); return (isNaN(c)?0:c)*b;
301 | } function $a(a, b) {
302 | var c={milliseconds: 0, months: 0}; return c.months=b.month()-a.month()+12*(b.year()-a.year()), a.clone().add(c.months, 'M').isAfter(b)&&--c.months, c.milliseconds=+b-+a.clone().add(c.months, 'M'), c;
303 | } function _a(a, b) {
304 | var c; return b=La(b, a), a.isBefore(b)?c=$a(a, b):(c=$a(b, a), c.milliseconds=-c.milliseconds, c.months=-c.months), c;
305 | } function ab(a, b) {
306 | return function(c, d) {
307 | var e, f; return null===d||isNaN(+d)||(ba(b, 'moment().'+b+'(period, number) is deprecated. Please use moment().'+b+'(number, period).'), f=c, c=d, d=f), c='string'==typeof c?+c:c, e=Ya(c, d), bb(this, e, a), this;
308 | };
309 | } function bb(b, c, d, e) {
310 | var f=c._milliseconds, g=c._days, h=c._months; e=null==e?!0:e, f&&b._d.setTime(+b._d+f*d), g&&E(b, 'Date', D(b, 'Date')+g*d), h&&X(b, D(b, 'Month')+h*d), e&&a.updateOffset(b, g||h);
311 | } function cb(a, b) {
312 | var c=a||Da(), d=La(c, this).startOf('day'), e=this.diff(d, 'days', !0), f=-6>e?'sameElse':-1>e?'lastWeek':0>e?'lastDay':1>e?'sameDay':2>e?'nextDay':7>e?'nextWeek':'sameElse'; return this.format(b&&b[f]||this.localeData().calendar(f, this, Da(c)));
313 | } function db() {
314 | return new n(this);
315 | } function eb(a, b) {
316 | var c; return b=A('undefined'!=typeof b?b:'millisecond'), 'millisecond'===b?(a=o(a)?a:Da(a), +this>+a):(c=o(a)?+a:+Da(a), c<+this.clone().startOf(b));
317 | } function fb(a, b) {
318 | var c; return b=A('undefined'!=typeof b?b:'millisecond'), 'millisecond'===b?(a=o(a)?a:Da(a), +a>+this):(c=o(a)?+a:+Da(a), +this.clone().endOf(b)<c);
319 | } function gb(a, b, c) {
320 | return this.isAfter(a, c)&&this.isBefore(b, c);
321 | } function hb(a, b) {
322 | var c; return b=A(b||'millisecond'), 'millisecond'===b?(a=o(a)?a:Da(a), +this===+a):(c=+Da(a), +this.clone().startOf(b)<=c&&c<=+this.clone().endOf(b));
323 | } function ib(a, b, c) {
324 | var d, e, f=La(a, this), g=6e4*(f.utcOffset()-this.utcOffset()); return b=A(b), 'year'===b||'month'===b||'quarter'===b?(e=jb(this, f), 'quarter'===b?e/=3:'year'===b&&(e/=12)):(d=this-f, e='second'===b?d/1e3:'minute'===b?d/6e4:'hour'===b?d/36e5:'day'===b?(d-g)/864e5:'week'===b?(d-g)/6048e5:d), c?e:p(e);
325 | } function jb(a, b) {
326 | var c, d, e=12*(b.year()-a.year())+(b.month()-a.month()), f=a.clone().add(e, 'months'); return 0>b-f?(c=a.clone().add(e-1, 'months'), d=(b-f)/(f-c)):(c=a.clone().add(e+1, 'months'), d=(b-f)/(c-f)), -(e+d);
327 | } function kb() {
328 | return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
329 | } function lb() {
330 | var a=this.clone().utc(); return 0<a.year()&&a.year()<=9999?'function'==typeof Date.prototype.toISOString?this.toDate().toISOString():K(a, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]'):K(a, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
331 | } function mb(b) {
332 | var c=K(this, b||a.defaultFormat); return this.localeData().postformat(c);
333 | } function nb(a, b) {
334 | return this.isValid()?Ya({to: this, from: a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate();
335 | } function ob(a) {
336 | return this.from(Da(), a);
337 | } function pb(a, b) {
338 | return this.isValid()?Ya({from: this, to: a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate();
339 | } function qb(a) {
340 | return this.to(Da(), a);
341 | } function rb(a) {
342 | var b; return void 0===a?this._locale._abbr:(b=y(a), null!=b&&(this._locale=b), this);
343 | } function sb() {
344 | return this._locale;
345 | } function tb(a) {
346 | switch (a=A(a)) {
347 | case 'year': this.month(0); case 'quarter': case 'month': this.date(1); case 'week': case 'isoWeek': case 'day': this.hours(0); case 'hour': this.minutes(0); case 'minute': this.seconds(0); case 'second': this.milliseconds(0);
348 | } return 'week'===a&&this.weekday(0), 'isoWeek'===a&&this.isoWeekday(1), 'quarter'===a&&this.month(3*Math.floor(this.month()/3)), this;
349 | } function ub(a) {
350 | return a=A(a), void 0===a||'millisecond'===a?this:this.startOf(a).add(1, 'isoWeek'===a?'week':a).subtract(1, 'ms');
351 | } function vb() {
352 | return +this._d-6e4*(this._offset||0);
353 | } function wb() {
354 | return Math.floor(+this/1e3);
355 | } function xb() {
356 | return this._offset?new Date(+this):this._d;
357 | } function yb() {
358 | var a=this; return [a.year(), a.month(), a.date(), a.hour(), a.minute(), a.second(), a.millisecond()];
359 | } function zb() {
360 | var a=this; return {years: a.year(), months: a.month(), date: a.date(), hours: a.hours(), minutes: a.minutes(), seconds: a.seconds(), milliseconds: a.milliseconds()};
361 | } function Ab() {
362 | return k(this);
363 | } function Bb() {
364 | return g({}, j(this));
365 | } function Cb() {
366 | return j(this).overflow;
367 | } function Db(a, b) {
368 | H(0, [a, a.length], 0, b);
369 | } function Eb(a, b, c) {
370 | return ja(Da([a, 11, 31+b-c]), b, c).week;
371 | } function Fb(a) {
372 | var b=ja(this, this.localeData()._week.dow, this.localeData()._week.doy).year; return null==a?b:this.add(a-b, 'y');
373 | } function Gb(a) {
374 | var b=ja(this, 1, 4).year; return null==a?b:this.add(a-b, 'y');
375 | } function Hb() {
376 | return Eb(this.year(), 1, 4);
377 | } function Ib() {
378 | var a=this.localeData()._week; return Eb(this.year(), a.dow, a.doy);
379 | } function Jb(a) {
380 | return null==a?Math.ceil((this.month()+1)/3):this.month(3*(a-1)+this.month()%3);
381 | } function Kb(a, b) {
382 | return 'string'!=typeof a?a:isNaN(a)?(a=b.weekdaysParse(a), 'number'==typeof a?a:null):parseInt(a, 10);
383 | } function Lb(a) {
384 | return this._weekdays[a.day()];
385 | } function Mb(a) {
386 | return this._weekdaysShort[a.day()];
387 | } function Nb(a) {
388 | return this._weekdaysMin[a.day()];
389 | } function Ob(a) {
390 | var b, c, d; for (this._weekdaysParse=this._weekdaysParse||[], b=0; 7>b; b++) if (this._weekdaysParse[b]||(c=Da([2e3, 1]).day(b), d='^'+this.weekdays(c, '')+'|^'+this.weekdaysShort(c, '')+'|^'+this.weekdaysMin(c, ''), this._weekdaysParse[b]=new RegExp(d.replace('.', ''), 'i')), this._weekdaysParse[b].test(a)) return b;
391 | } function Pb(a) {
392 | var b=this._isUTC?this._d.getUTCDay():this._d.getDay(); return null!=a?(a=Kb(a, this.localeData()), this.add(a-b, 'd')):b;
393 | } function Qb(a) {
394 | var b=(this.day()+7-this.localeData()._week.dow)%7; return null==a?b:this.add(a-b, 'd');
395 | } function Rb(a) {
396 | return null==a?this.day()||7:this.day(this.day()%7?a:a-7);
397 | } function Sb(a, b) {
398 | H(a, 0, 0, function() {
399 | return this.localeData().meridiem(this.hours(), this.minutes(), b);
400 | });
401 | } function Tb(a, b) {
402 | return b._meridiemParse;
403 | } function Ub(a) {
404 | return 'p'===(a+'').toLowerCase().charAt(0);
405 | } function Vb(a, b, c) {
406 | return a>11?c?'pm':'PM':c?'am':'AM';
407 | } function Wb(a, b) {
408 | b[ld]=q(1e3*('0.'+a));
409 | } function Xb() {
410 | return this._isUTC?'UTC':'';
411 | } function Yb() {
412 | return this._isUTC?'Coordinated Universal Time':'';
413 | } function Zb(a) {
414 | return Da(1e3*a);
415 | } function $b() {
416 | return Da(...arguments).parseZone();
417 | } function _b(a, b, c) {
418 | var d=this._calendar[a]; return 'function'==typeof d?d.call(b, c):d;
419 | } function ac(a) {
420 | var b=this._longDateFormat[a], c=this._longDateFormat[a.toUpperCase()]; return b||!c?b:(this._longDateFormat[a]=c.replace(/MMMM|MM|DD|dddd/g, function(a) {
421 | return a.slice(1);
422 | }), this._longDateFormat[a]);
423 | } function bc() {
424 | return this._invalidDate;
425 | } function cc(a) {
426 | return this._ordinal.replace('%d', a);
427 | } function dc(a) {
428 | return a;
429 | } function ec(a, b, c, d) {
430 | var e=this._relativeTime[c]; return 'function'==typeof e?e(a, b, c, d):e.replace(/%d/i, a);
431 | } function fc(a, b) {
432 | var c=this._relativeTime[a>0?'future':'past']; return 'function'==typeof c?c(b):c.replace(/%s/i, b);
433 | } function gc(a) {
434 | var b, c; for (c in a)b=a[c], 'function'==typeof b?this[c]=b:this['_'+c]=b; this._ordinalParseLenient=new RegExp(this._ordinalParse.source+'|'+/\d{1,2}/.source);
435 | } function hc(a, b, c, d) {
436 | var e=y(), f=h().set(d, b); return e[c](f, a);
437 | } function ic(a, b, c, d, e) {
438 | if ('number'==typeof a&&(b=a, a=void 0), a=a||'', null!=b) return hc(a, b, c, e); var f, g=[]; for (f=0; d>f; f++)g[f]=hc(a, f, c, e); return g;
439 | } function jc(a, b) {
440 | return ic(a, b, 'months', 12, 'month');
441 | } function kc(a, b) {
442 | return ic(a, b, 'monthsShort', 12, 'month');
443 | } function lc(a, b) {
444 | return ic(a, b, 'weekdays', 7, 'day');
445 | } function mc(a, b) {
446 | return ic(a, b, 'weekdaysShort', 7, 'day');
447 | } function nc(a, b) {
448 | return ic(a, b, 'weekdaysMin', 7, 'day');
449 | } function oc() {
450 | var a=this._data; return this._milliseconds=Wd(this._milliseconds), this._days=Wd(this._days), this._months=Wd(this._months), a.milliseconds=Wd(a.milliseconds), a.seconds=Wd(a.seconds), a.minutes=Wd(a.minutes), a.hours=Wd(a.hours), a.months=Wd(a.months), a.years=Wd(a.years), this;
451 | } function pc(a, b, c, d) {
452 | var e=Ya(b, c); return a._milliseconds+=d*e._milliseconds, a._days+=d*e._days, a._months+=d*e._months, a._bubble();
453 | } function qc(a, b) {
454 | return pc(this, a, b, 1);
455 | } function rc(a, b) {
456 | return pc(this, a, b, -1);
457 | } function sc(a) {
458 | return 0>a?Math.floor(a):Math.ceil(a);
459 | } function tc() {
460 | var a, b, c, d, e, f=this._milliseconds, g=this._days, h=this._months, i=this._data; return f>=0&&g>=0&&h>=0||0>=f&&0>=g&&0>=h||(f+=864e5*sc(vc(h)+g), g=0, h=0), i.milliseconds=f%1e3, a=p(f/1e3), i.seconds=a%60, b=p(a/60), i.minutes=b%60, c=p(b/60), i.hours=c%24, g+=p(c/24), e=p(uc(g)), h+=e, g-=sc(vc(e)), d=p(h/12), h%=12, i.days=g, i.months=h, i.years=d, this;
461 | } function uc(a) {
462 | return 4800*a/146097;
463 | } function vc(a) {
464 | return 146097*a/4800;
465 | } function wc(a) {
466 | var b, c, d=this._milliseconds; if (a=A(a), 'month'===a||'year'===a) return b=this._days+d/864e5, c=this._months+uc(b), 'month'===a?c:c/12; switch (b=this._days+Math.round(vc(this._months)), a) {
467 | case 'week': return b/7+d/6048e5; case 'day': return b+d/864e5; case 'hour': return 24*b+d/36e5; case 'minute': return 1440*b+d/6e4; case 'second': return 86400*b+d/1e3; case 'millisecond': return Math.floor(864e5*b)+d; default: throw new Error('Unknown unit '+a);
468 | }
469 | } function xc() {
470 | return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*q(this._months/12);
471 | } function yc(a) {
472 | return function() {
473 | return this.as(a);
474 | };
475 | } function zc(a) {
476 | return a=A(a), this[a+'s']();
477 | } function Ac(a) {
478 | return function() {
479 | return this._data[a];
480 | };
481 | } function Bc() {
482 | return p(this.days()/7);
483 | } function Cc(a, b, c, d, e) {
484 | return e.relativeTime(b||1, !!c, a, d);
485 | } function Dc(a, b, c) {
486 | var d=Ya(a).abs(), e=ke(d.as('s')), f=ke(d.as('m')), g=ke(d.as('h')), h=ke(d.as('d')), i=ke(d.as('M')), j=ke(d.as('y')), k=e<le.s&&['s', e]||1===f&&['m']||f<le.m&&['mm', f]||1===g&&['h']||g<le.h&&['hh', g]||1===h&&['d']||h<le.d&&['dd', h]||1===i&&['M']||i<le.M&&['MM', i]||1===j&&['y']||['yy', j]; return k[2]=b, k[3]=+a>0, k[4]=c, Cc(...k);
487 | } function Ec(a, b) {
488 | return void 0===le[a]?!1:void 0===b?le[a]:(le[a]=b, !0);
489 | } function Fc(a) {
490 | var b=this.localeData(), c=Dc(this, !a, b); return a&&(c=b.pastFuture(+this, c)), b.postformat(c);
491 | } function Gc() {
492 | var a, b, c, d=me(this._milliseconds)/1e3, e=me(this._days), f=me(this._months); a=p(d/60), b=p(a/60), d%=60, a%=60, c=p(f/12), f%=12; var g=c, h=f, i=e, j=b, k=a, l=d, m=this.asSeconds(); return m?(0>m?'-':'')+'P'+(g?g+'Y':'')+(h?h+'M':'')+(i?i+'D':'')+(j||k||l?'T':'')+(j?j+'H':'')+(k?k+'M':'')+(l?l+'S':''):'P0D';
493 | } var Hc, Ic, Jc=a.momentProperties=[], Kc=!1, Lc={}, Mc={}, Nc=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, Oc=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, Pc={}, Qc={}, Rc=/\d/, Sc=/\d\d/, Tc=/\d{3}/, Uc=/\d{4}/, Vc=/[+-]?\d{6}/, Wc=/\d\d?/, Xc=/\d{1,3}/, Yc=/\d{1,4}/, Zc=/[+-]?\d{1,6}/, $c=/\d+/, _c=/[+-]?\d+/, ad=/Z|[+-]\d\d:?\d\d/gi, bd=/[+-]?\d+(\.\d{1,3})?/, cd=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i, dd={}, ed={}, fd=0, gd=1, hd=2, id=3, jd=4, kd=5, ld=6; H('M', ['MM', 2], 'Mo', function() {
494 | return this.month()+1;
495 | }), H('MMM', 0, 0, function(a) {
496 | return this.localeData().monthsShort(this, a);
497 | }), H('MMMM', 0, 0, function(a) {
498 | return this.localeData().months(this, a);
499 | }), z('month', 'M'), N('M', Wc), N('MM', Wc, Sc), N('MMM', cd), N('MMMM', cd), Q(['M', 'MM'], function(a, b) {
500 | b[gd]=q(a)-1;
501 | }), Q(['MMM', 'MMMM'], function(a, b, c, d) {
502 | var e=c._locale.monthsParse(a, d, c._strict); null!=e?b[gd]=e:j(c).invalidMonth=a;
503 | }); var md='January_February_March_April_May_June_July_August_September_October_November_December'.split('_'), nd='Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'), od={}; a.suppressDeprecationWarnings=!1; var pd=/^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/, qd=[['YYYYYY-MM-DD', /[+-]\d{6}-\d{2}-\d{2}/], ['YYYY-MM-DD', /\d{4}-\d{2}-\d{2}/], ['GGGG-[W]WW-E', /\d{4}-W\d{2}-\d/], ['GGGG-[W]WW', /\d{4}-W\d{2}/], ['YYYY-DDD', /\d{4}-\d{3}/]], rd=[['HH:mm:ss.SSSS', /(T| )\d\d:\d\d:\d\d\.\d+/], ['HH:mm:ss', /(T| )\d\d:\d\d:\d\d/], ['HH:mm', /(T| )\d\d:\d\d/], ['HH', /(T| )\d\d/]], sd=/^\/?Date\((\-?\d+)/i; a.createFromInputFallback=aa('moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.', function(a) {
504 | a._d=new Date(a._i+(a._useUTC?' UTC':''));
505 | }), H(0, ['YY', 2], 0, function() {
506 | return this.year()%100;
507 | }), H(0, ['YYYY', 4], 0, 'year'), H(0, ['YYYYY', 5], 0, 'year'), H(0, ['YYYYYY', 6, !0], 0, 'year'), z('year', 'y'), N('Y', _c), N('YY', Wc, Sc), N('YYYY', Yc, Uc), N('YYYYY', Zc, Vc), N('YYYYYY', Zc, Vc), Q(['YYYYY', 'YYYYYY'], fd), Q('YYYY', function(b, c) {
508 | c[fd]=2===b.length?a.parseTwoDigitYear(b):q(b);
509 | }), Q('YY', function(b, c) {
510 | c[fd]=a.parseTwoDigitYear(b);
511 | }), a.parseTwoDigitYear=function(a) {
512 | return q(a)+(q(a)>68?1900:2e3);
513 | }; var td=C('FullYear', !1); H('w', ['ww', 2], 'wo', 'week'), H('W', ['WW', 2], 'Wo', 'isoWeek'), z('week', 'w'), z('isoWeek', 'W'), N('w', Wc), N('ww', Wc, Sc), N('W', Wc), N('WW', Wc, Sc), R(['w', 'ww', 'W', 'WW'], function(a, b, c, d) {
514 | b[d.substr(0, 1)]=q(a);
515 | }); var ud={dow: 0, doy: 6}; H('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear'), z('dayOfYear', 'DDD'), N('DDD', Xc), N('DDDD', Tc), Q(['DDD', 'DDDD'], function(a, b, c) {
516 | c._dayOfYear=q(a);
517 | }), a.ISO_8601=function() {}; var vd=aa('moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548', function() {
518 | var a=Da(...arguments); return this>a?this:a;
519 | }), wd=aa('moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548', function() {
520 | var a=Da(...arguments); return a> this?this:a;
521 | }); Ja('Z', ':'), Ja('ZZ', ''), N('Z', ad), N('ZZ', ad), Q(['Z', 'ZZ'], function(a, b, c) {
522 | c._useUTC=!0, c._tzm=Ka(a);
523 | }); var xd=/([\+\-]|\d\d)/gi; a.updateOffset=function() {}; var yd=/(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/, zd=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/; Ya.fn=Ha.prototype; var Ad=ab(1, 'add'), Bd=ab(-1, 'subtract'); a.defaultFormat='YYYY-MM-DDTHH:mm:ssZ'; var Cd=aa('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function(a) {
524 | return void 0===a?this.localeData():this.locale(a);
525 | }); H(0, ['gg', 2], 0, function() {
526 | return this.weekYear()%100;
527 | }), H(0, ['GG', 2], 0, function() {
528 | return this.isoWeekYear()%100;
529 | }), Db('gggg', 'weekYear'), Db('ggggg', 'weekYear'), Db('GGGG', 'isoWeekYear'), Db('GGGGG', 'isoWeekYear'), z('weekYear', 'gg'), z('isoWeekYear', 'GG'), N('G', _c), N('g', _c), N('GG', Wc, Sc), N('gg', Wc, Sc), N('GGGG', Yc, Uc), N('gggg', Yc, Uc), N('GGGGG', Zc, Vc), N('ggggg', Zc, Vc), R(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function(a, b, c, d) {
530 | b[d.substr(0, 2)]=q(a);
531 | }), R(['gg', 'GG'], function(b, c, d, e) {
532 | c[e]=a.parseTwoDigitYear(b);
533 | }), H('Q', 0, 0, 'quarter'), z('quarter', 'Q'), N('Q', Rc), Q('Q', function(a, b) {
534 | b[gd]=3*(q(a)-1);
535 | }), H('D', ['DD', 2], 'Do', 'date'), z('date', 'D'), N('D', Wc), N('DD', Wc, Sc), N('Do', function(a, b) {
536 | return a?b._ordinalParse:b._ordinalParseLenient;
537 | }), Q(['D', 'DD'], hd), Q('Do', function(a, b) {
538 | b[hd]=q(a.match(Wc)[0], 10);
539 | }); var Dd=C('Date', !0); H('d', 0, 'do', 'day'), H('dd', 0, 0, function(a) {
540 | return this.localeData().weekdaysMin(this, a);
541 | }), H('ddd', 0, 0, function(a) {
542 | return this.localeData().weekdaysShort(this, a);
543 | }), H('dddd', 0, 0, function(a) {
544 | return this.localeData().weekdays(this, a);
545 | }), H('e', 0, 0, 'weekday'), H('E', 0, 0, 'isoWeekday'), z('day', 'd'), z('weekday', 'e'), z('isoWeekday', 'E'), N('d', Wc), N('e', Wc), N('E', Wc), N('dd', cd), N('ddd', cd), N('dddd', cd), R(['dd', 'ddd', 'dddd'], function(a, b, c) {
546 | var d=c._locale.weekdaysParse(a); null!=d?b.d=d:j(c).invalidWeekday=a;
547 | }), R(['d', 'e', 'E'], function(a, b, c, d) {
548 | b[d]=q(a);
549 | }); var Ed='Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'), Fd='Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'), Gd='Su_Mo_Tu_We_Th_Fr_Sa'.split('_'); H('H', ['HH', 2], 0, 'hour'), H('h', ['hh', 2], 0, function() {
550 | return this.hours()%12||12;
551 | }), Sb('a', !0), Sb('A', !1), z('hour', 'h'), N('a', Tb), N('A', Tb), N('H', Wc), N('h', Wc), N('HH', Wc, Sc), N('hh', Wc, Sc), Q(['H', 'HH'], id), Q(['a', 'A'], function(a, b, c) {
552 | c._isPm=c._locale.isPM(a), c._meridiem=a;
553 | }), Q(['h', 'hh'], function(a, b, c) {
554 | b[id]=q(a), j(c).bigHour=!0;
555 | }); var Hd=/[ap]\.?m?\.?/i, Id=C('Hours', !0); H('m', ['mm', 2], 0, 'minute'), z('minute', 'm'), N('m', Wc), N('mm', Wc, Sc), Q(['m', 'mm'], jd); var Jd=C('Minutes', !1); H('s', ['ss', 2], 0, 'second'), z('second', 's'), N('s', Wc), N('ss', Wc, Sc), Q(['s', 'ss'], kd); var Kd=C('Seconds', !1); H('S', 0, 0, function() {
556 | return ~~(this.millisecond()/100);
557 | }), H(0, ['SS', 2], 0, function() {
558 | return ~~(this.millisecond()/10);
559 | }), H(0, ['SSS', 3], 0, 'millisecond'), H(0, ['SSSS', 4], 0, function() {
560 | return 10*this.millisecond();
561 | }), H(0, ['SSSSS', 5], 0, function() {
562 | return 100*this.millisecond();
563 | }), H(0, ['SSSSSS', 6], 0, function() {
564 | return 1e3*this.millisecond();
565 | }), H(0, ['SSSSSSS', 7], 0, function() {
566 | return 1e4*this.millisecond();
567 | }), H(0, ['SSSSSSSS', 8], 0, function() {
568 | return 1e5*this.millisecond();
569 | }), H(0, ['SSSSSSSSS', 9], 0, function() {
570 | return 1e6*this.millisecond();
571 | }), z('millisecond', 'ms'), N('S', Xc, Rc), N('SS', Xc, Sc), N('SSS', Xc, Tc); var Ld; for (Ld='SSSS'; Ld.length<=9; Ld+='S')N(Ld, $c); for (Ld='S'; Ld.length<=9; Ld+='S')Q(Ld, Wb); var Md=C('Milliseconds', !1); H('z', 0, 0, 'zoneAbbr'), H('zz', 0, 0, 'zoneName'); var Nd=n.prototype; Nd.add=Ad, Nd.calendar=cb, Nd.clone=db, Nd.diff=ib, Nd.endOf=ub, Nd.format=mb, Nd.from=nb, Nd.fromNow=ob, Nd.to=pb, Nd.toNow=qb, Nd.get=F, Nd.invalidAt=Cb, Nd.isAfter=eb, Nd.isBefore=fb, Nd.isBetween=gb, Nd.isSame=hb, Nd.isValid=Ab, Nd.lang=Cd, Nd.locale=rb, Nd.localeData=sb, Nd.max=wd, Nd.min=vd, Nd.parsingFlags=Bb, Nd.set=F, Nd.startOf=tb, Nd.subtract=Bd, Nd.toArray=yb, Nd.toObject=zb, Nd.toDate=xb, Nd.toISOString=lb, Nd.toJSON=lb, Nd.toString=kb, Nd.unix=wb, Nd.valueOf=vb, Nd.year=td, Nd.isLeapYear=ia, Nd.weekYear=Fb, Nd.isoWeekYear=Gb, Nd.quarter=Nd.quarters=Jb, Nd.month=Y, Nd.daysInMonth=Z, Nd.week=Nd.weeks=na, Nd.isoWeek=Nd.isoWeeks=oa, Nd.weeksInYear=Ib, Nd.isoWeeksInYear=Hb, Nd.date=Dd, Nd.day=Nd.days=Pb, Nd.weekday=Qb, Nd.isoWeekday=Rb, Nd.dayOfYear=qa, Nd.hour=Nd.hours=Id, Nd.minute=Nd.minutes=Jd, Nd.second=Nd.seconds=Kd,
572 | Nd.millisecond=Nd.milliseconds=Md, Nd.utcOffset=Na, Nd.utc=Pa, Nd.local=Qa, Nd.parseZone=Ra, Nd.hasAlignedHourOffset=Sa, Nd.isDST=Ta, Nd.isDSTShifted=Ua, Nd.isLocal=Va, Nd.isUtcOffset=Wa, Nd.isUtc=Xa, Nd.isUTC=Xa, Nd.zoneAbbr=Xb, Nd.zoneName=Yb, Nd.dates=aa('dates accessor is deprecated. Use date instead.', Dd), Nd.months=aa('months accessor is deprecated. Use month instead', Y), Nd.years=aa('years accessor is deprecated. Use year instead', td), Nd.zone=aa('moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779', Oa); var Od=Nd, Pd={sameDay: '[Today at] LT', nextDay: '[Tomorrow at] LT', nextWeek: 'dddd [at] LT', lastDay: '[Yesterday at] LT', lastWeek: '[Last] dddd [at] LT', sameElse: 'L'}, Qd={LTS: 'h:mm:ss A', LT: 'h:mm A', L: 'MM/DD/YYYY', LL: 'MMMM D, YYYY', LLL: 'MMMM D, YYYY h:mm A', LLLL: 'dddd, MMMM D, YYYY h:mm A'}, Rd='Invalid date', Sd='%d', Td=/\d{1,2}/, Ud={future: 'in %s', past: '%s ago', s: 'a few seconds', m: 'a minute', mm: '%d minutes', h: 'an hour', hh: '%d hours', d: 'a day', dd: '%d days', M: 'a month', MM: '%d months', y: 'a year', yy: '%d years'}, Vd=s.prototype; Vd._calendar=Pd, Vd.calendar=_b, Vd._longDateFormat=Qd, Vd.longDateFormat=ac, Vd._invalidDate=Rd, Vd.invalidDate=bc, Vd._ordinal=Sd, Vd.ordinal=cc, Vd._ordinalParse=Td, Vd.preparse=dc, Vd.postformat=dc, Vd._relativeTime=Ud, Vd.relativeTime=ec, Vd.pastFuture=fc, Vd.set=gc, Vd.months=U, Vd._months=md, Vd.monthsShort=V, Vd._monthsShort=nd, Vd.monthsParse=W, Vd.week=ka, Vd._week=ud, Vd.firstDayOfYear=ma, Vd.firstDayOfWeek=la, Vd.weekdays=Lb, Vd._weekdays=Ed, Vd.weekdaysMin=Nb, Vd._weekdaysMin=Gd, Vd.weekdaysShort=Mb, Vd._weekdaysShort=Fd, Vd.weekdaysParse=Ob, Vd.isPM=Ub, Vd._meridiemParse=Hd, Vd.meridiem=Vb, w('en', {ordinalParse: /\d{1,2}(th|st|nd|rd)/, ordinal: function(a) {
573 | var b=a%10, c=1===q(a%100/10)?'th':1===b?'st':2===b?'nd':3===b?'rd':'th'; return a+c;
574 | }}), a.lang=aa('moment.lang is deprecated. Use moment.locale instead.', w), a.langData=aa('moment.langData is deprecated. Use moment.localeData instead.', y); var Wd=Math.abs, Xd=yc('ms'), Yd=yc('s'), Zd=yc('m'), $d=yc('h'), _d=yc('d'), ae=yc('w'), be=yc('M'), ce=yc('y'), de=Ac('milliseconds'), ee=Ac('seconds'), fe=Ac('minutes'), ge=Ac('hours'), he=Ac('days'), ie=Ac('months'), je=Ac('years'), ke=Math.round, le={s: 45, m: 45, h: 22, d: 26, M: 11}, me=Math.abs, ne=Ha.prototype; ne.abs=oc, ne.add=qc, ne.subtract=rc, ne.as=wc, ne.asMilliseconds=Xd, ne.asSeconds=Yd, ne.asMinutes=Zd, ne.asHours=$d, ne.asDays=_d, ne.asWeeks=ae, ne.asMonths=be, ne.asYears=ce, ne.valueOf=xc, ne._bubble=tc, ne.get=zc, ne.milliseconds=de, ne.seconds=ee, ne.minutes=fe, ne.hours=ge, ne.days=he, ne.weeks=Bc, ne.months=ie, ne.years=je, ne.humanize=Fc, ne.toISOString=Gc, ne.toString=Gc, ne.toJSON=Gc, ne.locale=rb, ne.localeData=sb, ne.toIsoString=aa('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', Gc), ne.lang=Cd, H('X', 0, 0, 'unix'), H('x', 0, 0, 'valueOf'), N('x', _c), N('X', bd), Q('X', function(a, b, c) {
575 | c._d=new Date(1e3*parseFloat(a, 10));
576 | }), Q('x', function(a, b, c) {
577 | c._d=new Date(q(a));
578 | }), a.version='2.10.6', b(Da), a.fn=Od, a.min=Fa, a.max=Ga, a.utc=h, a.unix=Zb, a.months=jc, a.isDate=d, a.locale=w, a.invalid=l, a.duration=Ya, a.isMoment=o, a.weekdays=lc, a.parseZone=$b, a.localeData=y, a.isDuration=Ia, a.monthsShort=kc, a.weekdaysMin=nc, a.defineLocale=x, a.weekdaysShort=mc, a.normalizeUnits=A, a.relativeTimeThreshold=Ec; var oe=a; return oe;
579 | });
580 | 


--------------------------------------------------------------------------------
/sheets/forms/forms.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | 
 17 | // [START apps_script_sheets_custom_form_responses_quickstart]
 18 | /**
 19 |  * A special function that inserts a custom menu when the spreadsheet opens.
 20 |  */
 21 | function onOpen() {
 22 |   const menu = [{name: 'Set up conference', functionName: 'setUpConference_'}];
 23 |   try {
 24 |     SpreadsheetApp.getActive().addMenu('Conference', menu);
 25 |   } catch (e) {
 26 |     // TODO (Developer) - Handle Exception
 27 |     console.log('Failed with error: %s' + e.error);
 28 |   }
 29 | }
 30 | 
 31 | /**
 32 |  * A set-up function that uses the conference data in the spreadsheet to create
 33 |  * Google Calendar events, a Google Form, and a trigger that allows the script
 34 |  * to react to form responses.
 35 |  */
 36 | function setUpConference_() {
 37 |   if (ScriptProperties.getProperty('calId')) {
 38 |     Browser.msgBox('Your conference is already set up. Look in Google Drive!');
 39 |   }
 40 | 
 41 |   try {
 42 |     const ss = SpreadsheetApp.getActive();
 43 |     const sheet = ss.getSheetByName('Conference Setup');
 44 |     const range = sheet.getDataRange();
 45 |     const values = range.getValues();
 46 |     setUpCalendar_(values, range);
 47 |     setUpForm_(ss, values);
 48 |     ScriptApp.newTrigger('onFormSubmit').forSpreadsheet(ss).onFormSubmit()
 49 |         .create();
 50 |     ss.removeMenu('Conference');
 51 |   } catch (e) {
 52 |     // TODO (Developer) - Handle Exception
 53 |     console.log('Failed with error: %s' + e.error);
 54 |   }
 55 | }
 56 | 
 57 | /**
 58 |  * Creates a Google Calendar with events for each conference session in the
 59 |  * spreadsheet, then writes the event IDs to the spreadsheet for future use.
 60 |  * @param {Array<string[]>} values Cell values for the spreadsheet range.
 61 |  * @param {Range} range A spreadsheet range that contains conference data.
 62 |  */
 63 | function setUpCalendar_(values, range) {
 64 |   try {
 65 |     const cal = CalendarApp.createCalendar('Conference Calendar');
 66 |     for (var i = 1; i < values.length; i++) {
 67 |       const session = values[i];
 68 |       const title = session[0];
 69 |       const start = joinDateAndTime_(session[1], session[2]);
 70 |       const end = joinDateAndTime_(session[1], session[3]);
 71 |       const options = {location: session[4], sendInvites: true};
 72 |       const event = cal.createEvent(title, start, end, options)
 73 |           .setGuestsCanSeeGuests(false);
 74 |       session[5] = event.getId();
 75 |     }
 76 |     range.setValues(values);
 77 | 
 78 |     // Store the ID for the Calendar, which is needed to retrieve events by ID.
 79 |     ScriptProperties.setProperty('calId', cal.getId());
 80 |   } catch (e) {
 81 |     // TODO (Developer) - Handle Exception
 82 |     console.log('Failed with error: %s' + e.error);
 83 |   }
 84 | }
 85 | 
 86 | /**
 87 |  * Creates a single Date object from separate date and time cells.
 88 |  *
 89 |  * @param {Date} date A Date object from which to extract the date.
 90 |  * @param {Date} time A Date object from which to extract the time.
 91 |  * @return {Date} A Date object representing the combined date and time.
 92 |  */
 93 | function joinDateAndTime_(date, time) {
 94 |   date = new Date(date);
 95 |   date.setHours(time.getHours());
 96 |   date.setMinutes(time.getMinutes());
 97 |   return date;
 98 | }
 99 | 
100 | /**
101 |  * Creates a Google Form that allows respondents to select which conference
102 |  * sessions they would like to attend, grouped by date and start time.
103 |  *
104 |  * @param {Spreadsheet} ss The spreadsheet that contains the conference data.
105 |  * @param {Array<String[]>} values Cell values for the spreadsheet range.
106 |  */
107 | function setUpForm_(ss, values) {
108 |   // Group the sessions by date and time so that they can be passed to the form.
109 |   const schedule = {};
110 |   for (let i = 1; i < values.length; i++) {
111 |     const session = values[i];
112 |     const day = session[1].toLocaleDateString();
113 |     const time = session[2].toLocaleTimeString();
114 |     if (!schedule[day]) {
115 |       schedule[day] = {};
116 |     }
117 |     if (!schedule[day][time]) {
118 |       schedule[day][time] = [];
119 |     }
120 |     schedule[day][time].push(session[0]);
121 |   }
122 | 
123 |   try {
124 |     // Create the form and add a multiple-choice question for each timeslot.
125 |     const form = FormApp.create('Conference Form');
126 |     form.setDestination(FormApp.DestinationType.SPREADSHEET, ss.getId());
127 |     form.addTextItem().setTitle('Name').setRequired(true);
128 |     form.addTextItem().setTitle('Email').setRequired(true);
129 |     for (const day of schedule) {
130 |       const header = form.addSectionHeaderItem().setTitle(
131 |           'Sessions for ' + day);
132 |       for (const time of schedule[day]) {
133 |         const item = form.addMultipleChoiceItem().setTitle(time + ' ' + day)
134 |             .setChoiceValues(schedule[day][time]);
135 |       }
136 |     }
137 |   } catch (e) {
138 |     // TODO (Developer) - Handle Exception
139 |     console.log('Failed with error: %s' + e.error);
140 |   }
141 | }
142 | 
143 | /**
144 |  * A trigger-driven function that sends out calendar invitations and a
145 |  * personalized Google Docs itinerary after a user responds to the form.
146 |  *
147 |  * @param {Object} e The event parameter for form submission to a spreadsheet;
148 |  *     see https://developers.google.com/apps-script/understanding_events
149 |  */
150 | function onFormSubmit(e) {
151 |   const user = {name: e.namedValues['Name'][0],
152 |     email: e.namedValues['Email'][0]};
153 | 
154 |   // Grab the session data again so that we can match it to the user's choices.
155 |   const response = [];
156 |   try {
157 |     values = SpreadsheetApp.getActive()
158 |         .getSheetByName('Conference Setup').getDataRange().getValues();
159 |     for (let i = 1; i < values.length; i++) {
160 |       const session = values[i];
161 |       const title = session[0];
162 |       const day = session[1].toLocaleDateString();
163 |       const time = session[2].toLocaleTimeString();
164 |       const timeslot = time + ' ' + day;
165 | 
166 |       // For every selection in the response, find the matching timeslot and
167 |       // title in the spreadsheet and add the session data to the response array.
168 |       if (e.namedValues[timeslot] && e.namedValues[timeslot] === title) {
169 |         response.push(session);
170 |       }
171 |     }
172 |     sendInvites_(user, response);
173 |     sendDoc_(user, response);
174 |   } catch (e) {
175 |     // TODO (Developer) - Handle Exception
176 |     console.log('Failed with error: %s' + e.error);
177 |   }
178 | }
179 | 
180 | /**
181 |  * Add the user as a guest for every session he or she selected.
182 |  * @param {object} user An object that contains the user's name and email.
183 |  * @param {Array<String[]>} response An array of data for the user's session choices.
184 |  */
185 | function sendInvites_(user, response) {
186 |   try {
187 |     const id = ScriptProperties.getProperty('calId');
188 |     const cal = CalendarApp.getCalendarById(id);
189 |     for (let i = 0; i < response.length; i++) {
190 |       cal.getEventSeriesById(response[i][5]).addGuest(user.email);
191 |     }
192 |   } catch (e) {
193 |     // TODO (Developer) - Handle Exception
194 |     console.log('Failed with error: %s' + e.error);
195 |   }
196 | }
197 | 
198 | /**
199 |  * Create and share a personalized Google Doc that shows the user's itinerary.
200 |  * @param {object} user An object that contains the user's name and email.
201 |  * @param {Array<string[]>} response An array of data for the user's session choices.
202 |  */
203 | function sendDoc_(user, response) {
204 |   try {
205 |     const doc = DocumentApp.create('Conference Itinerary for ' + user.name)
206 |         .addEditor(user.email);
207 |     const body = doc.getBody();
208 |     let table = [['Session', 'Date', 'Time', 'Location']];
209 |     for (let i = 0; i < response.length; i++) {
210 |       table.push([response[i][0], response[i][1].toLocaleDateString(),
211 |         response[i][2].toLocaleTimeString(), response[i][4]]);
212 |     }
213 |     body.insertParagraph(0, doc.getName())
214 |         .setHeading(DocumentApp.ParagraphHeading.HEADING1);
215 |     table = body.appendTable(table);
216 |     table.getRow(0).editAsText().setBold(true);
217 |     doc.saveAndClose();
218 | 
219 |     // Email a link to the Doc as well as a PDF copy.
220 |     MailApp.sendEmail({
221 |       to: user.email,
222 |       subject: doc.getName(),
223 |       body: 'Thanks for registering! Here\'s your itinerary: ' + doc.getUrl(),
224 |       attachments: doc.getAs(MimeType.PDF)
225 |     });
226 |   } catch (e) {
227 |     // TODO (Developer) - Handle Exception
228 |     console.log('Failed with error: %s' + e.error);
229 |   }
230 | }
231 | // [END apps_script_sheets_custom_form_responses_quickstart]
232 | 
233 | 


--------------------------------------------------------------------------------
/sheets/maps/maps.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | 
 17 | // [START apps_script_sheets_restaurant_locations_map]
 18 | /**
 19 |  * Returns restaurant locations on a map.
 20 |  */
 21 | function restaurantLocationsMap() {
 22 |   // Get the sheet named 'restaurants'
 23 |   var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('restaurants');
 24 | 
 25 |   // Store the restaurant name and address data in a 2-dimensional array called
 26 |   // restaurantInfo. This is the data in cells A2:B4
 27 |   var restaurantInfo = sheet.getRange(2, 1, sheet.getLastRow() - 1, 2).getValues();
 28 | 
 29 |   // Create a new StaticMap
 30 |   var restaurantMap = Maps.newStaticMap();
 31 | 
 32 |   // Create a new UI Application, which we use to display the map
 33 |   var ui = UiApp.createApplication();
 34 | 
 35 |   // Create a grid widget to use for displaying the text of the restaurant names
 36 |   // and addresses. Start by populating the header row in the grid.
 37 |   var grid = ui.createGrid(restaurantInfo.length + 1, 3);
 38 |   grid.setWidget(0, 0, ui.createLabel('Store #').setStyleAttribute('fontWeight', 'bold'));
 39 |   grid.setWidget(0, 1, ui.createLabel('Store Name').setStyleAttribute('fontWeight', 'bold'));
 40 |   grid.setWidget(0, 2, ui.createLabel('Address').setStyleAttribute('fontWeight', 'bold'));
 41 | 
 42 |   // For each entry in restaurantInfo, create a map marker with the address and
 43 |   // the style we want. Also add the address info for this restaurant to the
 44 |   // grid widget.
 45 |   for (var i = 0; i < restaurantInfo.length; i++) {
 46 |     restaurantMap.setMarkerStyle(Maps.StaticMap.MarkerSize.MID,
 47 |                                  Maps.StaticMap.Color.GREEN,
 48 |                                  i + 1);
 49 |     restaurantMap.addMarker(restaurantInfo[i][1]);
 50 | 
 51 |     grid.setWidget(i + 1, 0, ui.createLabel((i + 1).toString()));
 52 |     grid.setWidget(i + 1, 1, ui.createLabel(restaurantInfo[i][0]));
 53 |     grid.setWidget(i + 1, 2, ui.createLabel(restaurantInfo[i][1]));
 54 |   }
 55 | 
 56 |   // Create a Flow Panel widget. We add the map and the grid to this panel.
 57 |   // The height needs to be able to accomodate the number of restaurants, so we
 58 |   // use a calculation to scale it based on the number of restaurants.
 59 |   var panel = ui.createFlowPanel().setSize('500px', 515 + (restaurantInfo.length * 25) + 'px');
 60 | 
 61 |   // Get the URL of the restaurant map and use that to create an image and add
 62 |   // it to the panel. Next add the grid to the panel.
 63 |   panel.add(ui.createImage(restaurantMap.getMapUrl()));
 64 |   panel.add(grid);
 65 | 
 66 |   // Finally, add the panel widget to our UI instance, and set its height,
 67 |   // width, and title.
 68 |   ui.add(panel);
 69 |   ui.setHeight(515 + (restaurantInfo.length * 25));
 70 |   ui.setWidth(500);
 71 |   ui.setTitle('Restaurant Locations');
 72 | 
 73 |   // Make the UI visible in the spreadsheet.
 74 |   SpreadsheetApp.getActiveSpreadsheet().show(ui);
 75 | }
 76 | // [END apps_script_sheets_restaurant_locations_map]
 77 | 
 78 | // [START apps_script_sheets_driving_directions]
 79 | /**
 80 |  * Gets driving directions from Mountain View to San Francisco.
 81 |  * Displays a map inside Google Spreadsheets.
 82 |  */
 83 | function getDrivingDirections() {
 84 |   // Set starting and ending addresses
 85 |   var start = '1600 Amphitheatre Pkwy, Mountain View, CA 94043';
 86 |   var end = '345 Spear St, San Francisco, CA 94105';
 87 | 
 88 |   // These regular expressions will be used to strip out
 89 |   // unneeded HTML tags
 90 |   var r1 = new RegExp('<b>', 'g');
 91 |   var r2 = new RegExp('</b>', 'g');
 92 |   var r3 = new RegExp('<div style="font-size:0.9em">', 'g');
 93 |   var r4 = new RegExp('</div>', 'g');
 94 | 
 95 |   // points is used for storing the points in the step-by-step directions
 96 |   var points = [];
 97 | 
 98 |   // currentLabel is used for number the steps in the directions
 99 |   var currentLabel = 0;
100 | 
101 |   // This will be the map on which we display the path
102 |   var map = Maps.newStaticMap().setSize(500, 350);
103 | 
104 |   // Create a new UI Application, which we use to display the map
105 |   var ui = UiApp.createApplication();
106 |   // Create a Flow Panel widget, which we use for the directions text
107 |   var directionsPanel = ui.createFlowPanel();
108 | 
109 |   // Create a new DirectionFinder with our start and end addresses, and request the directions
110 |   // The response is a JSON object, which contains the directions
111 |   var directions = Maps.newDirectionFinder().setOrigin(start).setDestination(end).getDirections();
112 | 
113 |   // Much of this code is based on the template referenced in
114 |   // http://googleappsdeveloper.blogspot.com/2010/06/automatically-generate-maps-and.html
115 |   for (var i in directions.routes) {
116 |     for (var j in directions.routes[i].legs) {
117 |       for (var k in directions.routes[i].legs[j].steps) {
118 |         // Parse out the current step in the directions
119 |         var step = directions.routes[i].legs[j].steps[k];
120 | 
121 |         // Call Maps.decodePolyline() to decode the polyline for
122 |         // this step into an array of latitudes and longitudes
123 |         var path = Maps.decodePolyline(step.polyline.points);
124 |         points = points.concat(path);
125 | 
126 |         // Pull out the direction information from step.html_instructions
127 |         // Because we only want to display text, we will strip out the
128 |         // HTML tags that are present in the html_instructions
129 |         var text = step.html_instructions;
130 |         text = text.replace(r1, ' ');
131 |         text = text.replace(r2, ' ');
132 |         text = text.replace(r3, ' ');
133 |         text = text.replace(r4, ' ');
134 | 
135 |         // Add each step in the directions to the directionsPanel
136 |         directionsPanel.add(ui.createLabel((++currentLabel) + ' - ' + text));
137 |       }
138 |     }
139 |   }
140 | 
141 |   // be conservative and only sample 100 times to create our polyline path
142 |   var lpoints=[];
143 |   if (points.length < 200) {
144 |     lpoints = points;
145 |   } else {
146 |     var pCount = (points.length / 2);
147 |     var step = parseInt(pCount / 100);
148 |     for (var i = 0; i < 100; ++i) {
149 |       lpoints.push(points[i * step * 2]);
150 |       lpoints.push(points[(i * step * 2) + 1]);
151 |     }
152 |   }
153 | 
154 |   // make the polyline
155 |   if (lpoints.length > 0) {
156 |     // Maps.encodePolyline turns an array of latitudes and longitudes
157 |     // into an encoded polyline
158 |     var pline = Maps.encodePolyline(lpoints);
159 | 
160 |     // Once we have the encoded polyline, add that path to the map
161 |     map.addPath(pline);
162 |   }
163 | 
164 |   // Create a FlowPanel to hold the map
165 |   var panel = ui.createFlowPanel().setSize('500px', '350px');
166 | 
167 |   // Get the URL of the map and use that to create an image and add
168 |   // it to the panel.
169 |   panel.add(ui.createImage(map.getMapUrl()));
170 | 
171 |   // Add both the map panel and the directions panel to the UI instance
172 |   ui.add(panel);
173 |   ui.add(directionsPanel);
174 | 
175 |   // Next set the title, height, and width of the UI instance
176 |   ui.setTitle('Driving Directions');
177 |   ui.setHeight(525);
178 |   ui.setWidth(500);
179 | 
180 |   // Finally, display the UI within the spreadsheet
181 |   SpreadsheetApp.getActiveSpreadsheet().show(ui);
182 | }
183 | // [END apps_script_sheets_driving_directions]
184 | 
185 | // [START apps_script_sheets_analyze_locations]
186 | /**
187 |  * Analyzes locations of Google offices.
188 |  */
189 | function analyzeLocations() {
190 |   // Select the sheet named 'geocoder and elevation'
191 |   var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('geocoder and elevation');
192 | 
193 |   // Store the address data in an array called
194 |   // locationInfo. This is the data in cells A2:A20
195 |   var locationInfo = sheet.getRange(2, 1, sheet.getLastRow() - 1, 1).getValues();
196 | 
197 |   // Set up some values to use for comparisons.
198 |   // latitudes run from -90 to 90, so we start with a max of -90 for comparison
199 |   var maxLatitude = -90;
200 |   var indexOfMaxLatitude = 0;
201 | 
202 |   // Set the starting max elevation to 0, or sea level
203 |   var maxElevation = 0;
204 |   var indexOfMaxElevation = 0;
205 | 
206 |   // geoResults will hold the JSON results array that we get when calling geocode()
207 |   var geoResults;
208 | 
209 |   // elevationResults will hold the results object that we get when calling sampleLocation()
210 |   var elevationResults;
211 | 
212 |   // lat and lng will temporarily hold the latitude and longitude of each
213 |   // address
214 |   var lat;
215 |   var lng;
216 | 
217 |   for (var i = 0; i < locationInfo.length; i++) {
218 |     // Get the latitude and longitude for an address. For more details on
219 |     // the JSON results array, geoResults, see
220 |     // http://code.google.com/apis/maps/documentation/geocoding/#Results
221 |     geoResults = Maps.newGeocoder().geocode(locationInfo[i]);
222 | 
223 |     // Get the latitude and longitude
224 |     lat = geoResults.results[0].geometry.location.lat;
225 |     lng = geoResults.results[0].geometry.location.lng;
226 | 
227 |     // Use the latitude and longitude to call sampleLocation and get the
228 |     // elevation. For more details on the JSON-formatted results object,
229 |     // elevationResults, see
230 |     // http://code.google.com/apis/maps/documentation/elevation/#ElevationResponses
231 |     elevationResults = Maps.newElevationSampler().sampleLocation(parseFloat(lat), parseFloat(lng));
232 | 
233 |     // Check to see if the current latitude is greater than our max latitude
234 |     // so far. If so, set maxLatitude and indexOfMaxLatitude
235 |     if (lat > maxLatitude) {
236 |       maxLatitude = lat;
237 |       indexOfMaxLatitude = i;
238 |     }
239 | 
240 |     // Check if elevationResults has a good status and also if the current
241 |     // elevation is greater than the max elevation so far. If so, set
242 |     // maxElevation and indexOfMaxElevation
243 |     if (elevationResults.status == 'OK' && elevationResults.results[0].elevation > maxElevation) {
244 |       maxElevation = elevationResults.results[0].elevation;
245 |       indexOfMaxElevation = i;
246 |     }
247 |   }
248 | 
249 |   // User Browser.msgBox as a simple way to display the info about highest
250 |   // elevation and northernmost office.
251 |   Browser.msgBox('The US Google office with the highest elevation is: ' +
252 |     locationInfo[indexOfMaxElevation] +
253 |     '. The northernmost US Google office is: ' +
254 |     locationInfo[indexOfMaxLatitude]);
255 | }
256 | // [END apps_script_sheets_analyze_locations]
257 | 


--------------------------------------------------------------------------------
/sheets/next18/Constants.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | 
18 | /* Salesforce config */
19 | 
20 | // Salesforce OAuth configuration, which you get by creating a developer project
21 | // with OAuth authentication on Salesforce.
22 | var SALESFORCE_CLIENT_ID = '<FILL IN WITH YOUR CLIENT ID>';
23 | var SALESFORCE_CLIENT_SECRET = '<FILL IN WITH YOUR CLIENT SECRET>';
24 | 
25 | // The Salesforce instance to talk to.
26 | var SALESFORCE_INSTANCE = 'na1';
27 | 
28 | /* Invoice generation config */
29 | 
30 | // The ID of a Google Doc that is used as a template. Defaults to
31 | // https://docs.google.com/document/d/1awKvXXMOQomdD68PGMpP5j1kNZwk_2Z0wBbwUgjKKws/view
32 | var INVOICE_TEMPLATE = '1awKvXXMOQomdD68PGMpP5j1kNZwk_2Z0wBbwUgjKKws';
33 | 
34 | // The ID of a Drive folder that the generated invoices are created in. Create
35 | // a new folder that your Google account has edit access to.
36 | var INVOICES_FOLDER = '';
37 | 


--------------------------------------------------------------------------------
/sheets/next18/Invoice.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | 
 17 | 
 18 | /**
 19 |  * Generates invoices based on the selected rows in the spreadsheet. Assumes
 20 |  * that the Salesforce accountId is in the first selected column and the
 21 |  * amount owed is the 4th selected column.
 22 |  */
 23 | function generateInvoices() {
 24 |   var range = SpreadsheetApp.getActiveRange();
 25 |   var values = range.getDisplayValues();
 26 |   var sheet = SpreadsheetApp.getActiveSheet();
 27 | 
 28 |   for (var i = 0; i < values.length; i++) {
 29 |     var row = values[i];
 30 |     var accountId = row[0];
 31 |     var amount = row[3];
 32 |     var invoiceUrl = generateInvoice(accountId, amount);
 33 |     sheet.getRange(range.getRow() + i, range.getLastColumn() + 1)
 34 |         .setValue(invoiceUrl);
 35 |   }
 36 | }
 37 | 
 38 | /**
 39 |  * Generates a single invoice in Google Docs for a given Salesforce account and
 40 |  * an owed amount.
 41 |  *
 42 |  * @param {string} accountId The Salesforce account Id to invoice
 43 |  * @param {string} amount The owed amount to invoice
 44 |  * @return {string} the url of the created invoice
 45 |  */
 46 | function generateInvoice(accountId, amount) {
 47 |   var folder = DriveApp.getFolderById(INVOICES_FOLDER);
 48 |   var copied = DriveApp.getFileById(INVOICE_TEMPLATE)
 49 |       .makeCopy('Invoice for ' + accountId, folder);
 50 |   var invoice = DocumentApp.openById(copied.getId());
 51 |   var results = fetchSoqlResults(
 52 |       'select Name, BillingAddress from Account where Id = \'' +
 53 |       accountId + '\'');
 54 |   var account = results['records'][0];
 55 | 
 56 |   invoice.getBody().replaceText(
 57 |       '{{account name}}', account['Name']);
 58 |   invoice.getBody().replaceText(
 59 |       '{{account address}}', account['BillingAddress']['street']);
 60 |   invoice.getBody().replaceText(
 61 |       '{{date}}', Utilities.formatDate(new Date(), 'GMT', 'yyyy-MM-dd'));
 62 |   invoice.getBody().replaceText('{{amount}}', amount);
 63 |   invoice.saveAndClose();
 64 |   return invoice.getUrl();
 65 | }
 66 | 
 67 | /**
 68 |  * Generates a report in Google Slides with a chart generated from the sheet.
 69 |  */
 70 | function generateReport() {
 71 |   var sheet = SpreadsheetApp.getActiveSheet();
 72 |   var chart = sheet.newChart()
 73 |     .asColumnChart()
 74 |     .addRange(sheet.getRange('A:A'))
 75 |     .addRange(sheet.getRange('C:D'))
 76 |     .setNumHeaders(1)
 77 |     .setMergeStrategy(Charts.ChartMergeStrategy.MERGE_COLUMNS)
 78 |     .setOption('useFirstColumnAsDomain', true)
 79 |     .setOption('isStacked', 'absolute')
 80 |     .setOption('title', 'Expected Payments')
 81 |     .setOption('treatLabelsAsText', false)
 82 |     .setXAxisTitle('AccountId')
 83 |     .setPosition(3, 1, 114, 138)
 84 |     .build();
 85 | 
 86 |   sheet.insertChart(chart);
 87 | 
 88 |   // Force the chart to be created before adding it to the presentation
 89 |   SpreadsheetApp.flush();
 90 | 
 91 |   var preso = SlidesApp.create('Invoicing Report');
 92 |   var titleSlide = preso.getSlides()[0];
 93 | 
 94 |   var titleShape = titleSlide.getPlaceholder(
 95 |       SlidesApp.PlaceholderType.CENTERED_TITLE).asShape();
 96 |   titleShape.getText().setText('Invoicing Report');
 97 | 
 98 |   var newSlide = preso.appendSlide(SlidesApp.PredefinedLayout.BLANK);
 99 |   newSlide.insertSheetsChart(chart);
100 | 
101 |   showLinkDialog(preso.getUrl(), 'Open report', 'Report created');
102 | }
103 | 


--------------------------------------------------------------------------------
/sheets/next18/README.md:
--------------------------------------------------------------------------------
 1 | # Invoicing Demo for Google Sheets
 2 | 
 3 | This sample was created for a talk for Google Cloud NEXT'18 entitled "Building
 4 | on the Docs Editors: APIs and Apps Script". It is an implementation of a
 5 | Google Sheets add-on that:
 6 | 
 7 | * Authenticates with Salesforce via OAuth2, using the
 8 | [Apps Script OAuth2 library](https://github.com/googleworkspace/apps-script-oauth2).
 9 | * Runs [SOQL](https://developer.salesforce.com/docs/atlas.en-us.soql_sosl.meta/soql_sosl/sforce_api_calls_soql_sosl_intro.htm)
10 |   queries against Salesforce and outputs the results into a new sheet
11 | * Creates invoices in Google Docs and a sample presentation in Google Slides
12 |   using the imported data.
13 | 
14 | ![Demo gif](demo.gif?raw=true "Demo")
15 | 
16 | 
17 | ## Getting started
18 | 
19 | * Install [clasp](https://github.com/google/clasp)
20 | * Run `clasp create <script name>` to create a new script
21 | * Follow Salesforce's [instructions](https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/quickstart.htm)
22 |   to sign up as a developer and create an OAuth2 application
23 |   * Set your callback URL to `https://script.google.com/macros/d/{SCRIPT ID}/usercallback`
24 |     where `{SCRIPT ID}` is taken from the URL outputted by `clasp create`.
25 | * Update `Constants.gs` with your Salesforce client ID and client secret
26 | * Run `clasp push` to upload the contents of this folder to Apps Script
27 | * Run `clasp open` to open the project in the Apps Script IDE
28 | * Follow the [Test as Add-on](https://developers.google.com/apps-script/add-ons/test)
29 |   instructions to run the add-on in a spreadsheet
30 |   * On your test spreadsheet's menu, visit Add-ons -> &lt;script name&gt; ->
31 |     Login to Salesforce to sign in to Salesforce.
32 | 


--------------------------------------------------------------------------------
/sheets/next18/Salesforce.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | 
 17 | 
 18 | /**
 19 |  * Creates an add-on menu, the main entry point for this add-on
 20 |  */
 21 | function onOpen() {
 22 |   SpreadsheetApp.getUi().createAddonMenu()
 23 |       .addItem('Login To Salesforce', 'login')
 24 |       .addItem('Run SOQL Query', 'promptQuery')
 25 |       .addSeparator()
 26 |       .addItem('Logout From Salesforce', 'logout')
 27 |       .addSeparator()
 28 |       .addItem('Generate Invoices', 'generateInvoices')
 29 |       .addItem('Generate Report', 'generateReport')
 30 |       .addToUi();
 31 | }
 32 | 
 33 | /** Ensure the menu is created when the add-on is installed */
 34 | function onInstall() {
 35 |   onOpen();
 36 | }
 37 | 
 38 | /**
 39 |  * If we dont have a Salesforce OAuth token, starts the OAuth flow with
 40 |  * Salesforce.
 41 |  */
 42 | function login() {
 43 |   var salesforce = getSalesforceService();
 44 |   if (!salesforce.hasAccess()) {
 45 |     showLinkDialog(salesforce.getAuthorizationUrl(),
 46 |         'Sign-in to Salesforce', 'Sign-in');
 47 |   }
 48 | }
 49 | 
 50 | /**
 51 |  * Displays a modal dialog with a simple HTML link that opens in a new tab.
 52 |  *
 53 |  * @param {string} url the URL to link to
 54 |  * @param {string} message the message to display to the user as a link
 55 |  * @param {string} title the title of the dialog
 56 |  */
 57 | function showLinkDialog(url, message, title) {
 58 |   var template = HtmlService.createTemplateFromFile('LinkDialog');
 59 |   template.url = url;
 60 |   template.message = message;
 61 |   SpreadsheetApp.getUi().showModalDialog(template.evaluate(), title);
 62 | }
 63 | 
 64 | /**
 65 |  * Creates a Salesforce OAuth2 service, using the Apps Script OAuth2 library:
 66 |  * https://github.com/googleworkspace/apps-script-oauth2
 67 |  *
 68 |  * @return {Object} a Salesforce OAuth2 service
 69 |  */
 70 | function getSalesforceService() {
 71 |   return OAuth2.createService('salesforce')
 72 |     .setAuthorizationBaseUrl(
 73 |         'https://login.salesforce.com/services/oauth2/authorize')
 74 |     .setTokenUrl('https://login.salesforce.com/services/oauth2/token')
 75 |     .setClientId(SALESFORCE_CLIENT_ID)
 76 |     .setClientSecret(SALESFORCE_CLIENT_SECRET)
 77 |     .setCallbackFunction('authCallback')
 78 |     .setPropertyStore(PropertiesService.getUserProperties());
 79 | }
 80 | 
 81 | /**
 82 |  * Authentication callback for OAuth2: called when Salesforce redirects back to
 83 |  * Apps Script after sign-in.
 84 |  *
 85 |  * @param {Object} request the HTTP request, provided by Apps Script
 86 |  * @return {Object} HTMLOutput to render the callback as a web page
 87 |  */
 88 | function authCallback(request) {
 89 |   var salesforce = getSalesforceService();
 90 |   var isAuthorized = salesforce.handleCallback(request);
 91 |   var message = isAuthorized ?
 92 |       'Success! You can close this tab and the dialog in Sheets.'
 93 |       : 'Denied. You can close this tab and the dialog in Sheets.';
 94 | 
 95 |   return HtmlService.createHtmlOutput(message);
 96 | }
 97 | 
 98 | /**
 99 |  * Prompts the user to enter a SOQL (Salesforce Object Query Language) query
100 |  * to execute. If given, the query is run and its results are added as a new
101 |  * sheet.
102 |  */
103 | function promptQuery() {
104 |   var ui = SpreadsheetApp.getUi();
105 |   var response = ui.prompt('Run SOQL Query',
106 |       'Enter your query, ex: "select Id from Opportunity"',
107 |       ui.ButtonSet.OK_CANCEL);
108 |   var query = response.getResponseText();
109 |   if (response.getSelectedButton() === ui.Button.OK) {
110 |     executeQuery(query);
111 |   }
112 | }
113 | 
114 | /**
115 |  * Executes the given SOQL query and copies its results to a new sheet.
116 |  *
117 |  * @param {string} query the SOQL to execute
118 |  */
119 | function executeQuery(query) {
120 |   var response = fetchSoqlResults(query);
121 |   var outputSheet = SpreadsheetApp.getActive().insertSheet();
122 |   var records = response['records'];
123 |   var fields = getFields(records[0]);
124 | 
125 |   // Builds the new sheet's contents as a 2D array that can be passed in
126 |   // to setValues() at once. This gives better performance than updating
127 |   // a single cell at a time.
128 |   var outputValues = [];
129 |   outputValues.push(fields);
130 |   for (var i = 0; i < records.length; i++) {
131 |     var row = [];
132 |     var record = records[i];
133 |     for (var j = 0; j < fields.length; j++) {
134 |       var fieldName = fields[j];
135 |       row.push(record[fieldName]);
136 |     }
137 |     outputValues.push(row);
138 |   }
139 | 
140 |   outputSheet.getRange(1, 1, outputValues.length, fields.length)
141 |       .setValues(outputValues);
142 | }
143 | 
144 | /**
145 |  * Makes an API call to Salesforce to execute a given SOQL query.
146 |  *
147 |  * @param {string} query the SOQL query to execute
148 |  * @return {Object} the API response from Salesforce, as a parsed JSON object.
149 |  */
150 | function fetchSoqlResults(query) {
151 |   var salesforce = getSalesforceService();
152 |   if (!salesforce.hasAccess()) {
153 |     throw new Error('Please login first');
154 |   } else {
155 |     var params = {
156 |       'headers': {
157 |         'Authorization': 'Bearer ' + salesforce.getAccessToken(),
158 |         'Content-Type': 'application/json'
159 |       }
160 |     };
161 |     var url = 'https://' + SALESFORCE_INSTANCE +
162 |         '.salesforce.com/services/data/v30.0/query';
163 |     var response = UrlFetchApp.fetch(url +
164 |         '?q=' + encodeURIComponent(query), params);
165 |     return JSON.parse(response.getContentText());
166 |   }
167 | }
168 | 
169 | /**
170 |  * Parses the Salesforce response and extracts the list of field names in the
171 |  * result set.
172 |  *
173 |  * @param {Object} record a single Salesforce response record
174 |  * @return {Array<string>} an array of string keys of that record
175 |  */
176 | function getFields(record) {
177 |   var fields = [];
178 |   for (var field in record) {
179 |     if (record.hasOwnProperty(field) && field !== 'attributes') {
180 |       fields.push(field);
181 |     }
182 |   }
183 |   return fields;
184 | }
185 | 
186 | /** Resets the Salesforce service, removing any saved OAuth tokens. */
187 | function logout() {
188 |   getSalesforceService().reset();
189 | }
190 | 


--------------------------------------------------------------------------------
/sheets/quickstart/quickstart.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | // [START sheets_quickstart]
17 | /**
18 |  * Creates a Sheets API service object and prints the names and majors of
19 |  * students in a sample spreadsheet:
20 |  * https://docs.google.com/spreadsheets/d/1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms/edit
21 |  * @see https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/get
22 |  */
23 | function logNamesAndMajors() {
24 |   const spreadsheetId = '1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms';
25 |   const rangeName = 'Class Data!A2:E';
26 |   try {
27 |     // Get the values from the spreadsheet using spreadsheetId and range.
28 |     const values = Sheets.Spreadsheets.Values.get(spreadsheetId, rangeName).values;
29 |     //  Print the values from spreadsheet if values are available.
30 |     if (!values) {
31 |       console.log('No data found.');
32 |       return;
33 |     }
34 |     console.log('Name, Major:');
35 |     for (const row in values) {
36 |       // Print columns A and E, which correspond to indices 0 and 4.
37 |       console.log(' - %s, %s', values[row][0], values[row][4]);
38 |     }
39 |   } catch (err) {
40 |     // TODO (developer) - Handle Values.get() exception from Sheet API
41 |     console.log(err.message);
42 |   }
43 | }
44 | // [END sheets_quickstart]
45 | 


--------------------------------------------------------------------------------
/sheets/removingDuplicates/removingDuplicates.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | // [START apps_script_sheets_remove_duplicates]
18 | /**
19 |  * Removes duplicate rows from the current sheet.
20 |  */
21 | function removeDuplicates() {
22 |   // [START apps_script_sheets_sheet]
23 |   const sheet = SpreadsheetApp.getActiveSheet();
24 |   const data = sheet.getDataRange().getValues();
25 |   // [END apps_script_sheets_sheet]
26 |   const uniqueData = {};
27 |   for (let row of data) {
28 |     const key = row.join();
29 |     // [START apps_script_sheets_duplicate]
30 |     uniqueData[key] = uniqueData[key] || row;
31 |     // [END apps_script_sheets_duplicate]
32 |   }
33 |   // [START apps_script_sheets_clear]
34 |   sheet.clearContents();
35 |   // [START apps_script_sheets_new_data]
36 |   const newData = Object.values(uniqueData);
37 |   // [END apps_script_sheets_new_data]
38 |   sheet.getRange(1, 1, newData.length, newData[0].length).setValues(newData);
39 |   // [END apps_script_sheets_clear]
40 | }
41 | // [END apps_script_sheets_remove_duplicates]
42 | 


--------------------------------------------------------------------------------
/slides/README.md:
--------------------------------------------------------------------------------
 1 | # Quickstarts: Add-ons for Google Slides
 2 | 
 3 | Sample Google Apps Script add-ons for Google Slides.
 4 | 
 5 | ## [Translate](https://developers.google.com/apps-script/guides/slides/samples/translate)
 6 | 
 7 | This add-on translates selected text from one language to another.
 8 | 
 9 | ![Translate](https://user-images.githubusercontent.com/380123/45050204-9f383a00-b04e-11e8-9dc8-30fcc5e9fdd7.png)
10 | 
11 | ## [Progress Bars](https://developers.google.com/apps-script/guides/slides/samples/progress-bar)
12 | 
13 | This add-on adds a progress bar to your presentation.
14 | 
15 | ![Progress Bars](https://user-images.githubusercontent.com/380123/45050203-9f383a00-b04e-11e8-9abf-042ce463a149.png)
16 | 
17 | ## Speaker Notes Script
18 | 
19 | This add-on extracts all the Speaker Notes from your presentation and creates a Document in your
20 | Drive directory with a formatted "script".
21 | 
22 | ![Script](https://user-images.githubusercontent.com/380123/45051769-022bd000-b053-11e8-9700-7a67e89cc4c9.png)
23 | 


--------------------------------------------------------------------------------
/slides/SpeakerNotesScript/README.md:
--------------------------------------------------------------------------------
 1 | # Speaker Notes Script
 2 | 
 3 | This add-on will extract all your Speaker Notes and creates a Google Doc with your 'formatted' script.
 4 | To run this add-on, first go to your Google slides with Speaker Notes.
 5 | 
 6 | ![scriptscreenshot](https://user-images.githubusercontent.com/380123/45267455-878bf780-b43a-11e8-9aeb-9c909feb9613.jpg)
 7 | 
 8 | ## Set Up
 9 | 
10 | 1. From within your new presentation, select the menu item
11 |    **Tools > Script editor**. If you are presented with a welcome screen, click **Blank Project**.
12 | 1. Delete any code in the script editor and rename `Code.gs` to `scriptGen.gs`. Copy and paste the contents of `scriptGen.gs` into this file.
13 | 1. Then select the menu item **View > Show manifest file** in your Script Editor screen. Copy and paste the contents of `appsscript.json` in here. You need 2 scopes to run this sample:
14 |     * To create and write a document: `https://www.googleapis.com/auth/documents`
15 |     * To read the current presentation: `https://www.googleapis.com/auth/presentations.currentonly`
16 | 
17 | ## Try It Out
18 | 
19 | 1. Switch back to your presentation and reload the page.
20 | 1. After a few seconds, a **Speaker Notes Script** sub-menu appears under the
21 |    **Add-ons** menu. Click **Add-ons > Speaker Notes Script > Generate Script Document**.
22 | 1. A dialog box indicates that the script requires authorization.
23 |    Click **Continue**. A second dialog box requests authorization for
24 |    specific Google services. Click **Allow**.
25 | 1. Check your Drive folder for script!
26 | 


--------------------------------------------------------------------------------
/slides/SpeakerNotesScript/scriptGen.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | // [START apps_script_slides_speaker_notes_script]
18 | /**
19 |  * Runs when the add-on is installed.
20 |  * @param {object} e The event parameter for a simple onInstall trigger. To
21 |  *     determine which authorization mode (ScriptApp.AuthMode) the trigger is
22 |  *     running in, inspect e.authMode. (In practice, onInstall triggers always
23 |  *     run in AuthMode.FULL, but onOpen triggers may be AuthMode.LIMITED or
24 |  *     AuthMode.NONE.)
25 |  */
26 | function onInstall(e) {
27 |   onOpen();
28 | }
29 | 
30 | /**
31 |  * Trigger for opening a presentation.
32 |  * @param {object} e The onOpen event.
33 |  */
34 | function onOpen(e) {
35 |   SlidesApp.getUi().createAddonMenu()
36 |       .addItem('Generate Script Document', 'generateSlidesScript')
37 |       .addToUi();
38 | }
39 | 
40 | /**
41 |  * Creates a 'script' for the presentation user in a document
42 |  * with the speaker notes for each slide.
43 |  */
44 | function generateSlidesScript() {
45 |   var presentation = SlidesApp.getActivePresentation();
46 |   var docTitle = presentation.getName() + ' Script';
47 |   var slides = presentation.getSlides();
48 | 
49 |   // Creates a document in the user's home Drive directory.
50 |   var speakerNotesDoc = DocumentApp.create(docTitle);
51 |   console.log('Created document with id %s', speakerNotesDoc.getId());
52 | 
53 |   var docBody = speakerNotesDoc.getBody();
54 |   var header = docBody.appendParagraph(docTitle);
55 |   header.setHeading(DocumentApp.ParagraphHeading.HEADING1);
56 | 
57 |   // Iterate through each slide and extract the speaker notes
58 |   // into the document body.
59 |   for (var i = 0; i < slides.length; i++) {
60 |     var section = docBody.appendParagraph('Slide ' + (i + 1))
61 |         .setHeading(DocumentApp.ParagraphHeading.HEADING2);
62 | 
63 |     var notes = slides[i].getNotesPage().getSpeakerNotesShape().getText().asString();
64 |     docBody.appendParagraph(notes)
65 |         .appendHorizontalRule();
66 |   }
67 | 
68 |   SlidesApp.getUi().alert(speakerNotesDoc.getName() + ' has been created in your Drive files.');
69 | }
70 | // [END apps_script_slides_speaker_notes_script]
71 | 


--------------------------------------------------------------------------------
/slides/api/Helpers.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | 
 17 | /**
 18 |  * Helper functions.
 19 |  */
 20 | function Helpers() {
 21 |   this.filesToDelete = [];
 22 | }
 23 | 
 24 | Helpers.prototype.reset = function() {
 25 |   this.filesToDelete = [];
 26 | };
 27 | 
 28 | Helpers.prototype.deleteFileOnCleanup = function(id) {
 29 |   this.filesToDelete.push(id);
 30 | };
 31 | 
 32 | Helpers.prototype.cleanup = function() {
 33 |   this.filesToDelete.forEach(Drive.Files.remove);
 34 | };
 35 | 
 36 | Helpers.prototype.createTestPresentation = function() {
 37 |   const presentation = Slides.Presentations.create({
 38 |     title: 'Test Preso'
 39 |   });
 40 |   this.deleteFileOnCleanup(presentation.presentationId);
 41 |   return presentation.presentationId;
 42 | };
 43 | 
 44 | Helpers.prototype.addSlides = function(presentationId, num, layout) {
 45 |   let requests = [];
 46 |   let slideIds = [];
 47 |   for (let i = 0; i < num; ++i) {
 48 |     slideIds.push('slide_' + i);
 49 |     requests.push({
 50 |       createSlide: {
 51 |         objectId: slideIds[i],
 52 |         slideLayoutReference: {
 53 |           predefinedLayout: layout
 54 |         }
 55 |       }
 56 |     });
 57 |   }
 58 |   Slides.Presentations.batchUpdate({requests: requests}, presentationId);
 59 |   return slideIds;
 60 | };
 61 | 
 62 | Helpers.prototype.createTestTextbox = function(presentationId, pageId, callback) {
 63 |   const boxId = 'MyTextBox_01';
 64 |   const pt350 = {
 65 |     magnitude: 350,
 66 |     unit: 'PT'
 67 |   };
 68 |   const requests = [{
 69 |     createShape: {
 70 |       objectId: boxId,
 71 |       shapeType: 'TEXT_BOX',
 72 |       elementProperties: {
 73 |         pageObjectId: pageId,
 74 |         size: {
 75 |           height: pt350,
 76 |           width: pt350
 77 |         },
 78 |         transform: {
 79 |           scaleX: 1,
 80 |           scaleY: 1,
 81 |           translateX: 350,
 82 |           translateY: 100,
 83 |           unit: 'PT'
 84 |         }
 85 |       }
 86 |     }
 87 |   }, {
 88 |     insertText: {
 89 |       objectId: boxId,
 90 |       insertionIndex: 0,
 91 |       text: 'New Box Text Inserted'
 92 |     }
 93 |   }];
 94 |   const createTextboxResponse = Slides.Presentations.batchUpdate({
 95 |     requests: requests
 96 |   }, presentationId);
 97 |   return createTextboxResponse.replies[0].createShape.objectId;
 98 | };
 99 | 
100 | Helpers.prototype.createTestSheetsChart = function(presentationId, pageId,
101 |                                                    spreadsheetId, sheetChartId, callback) {
102 |   const chartId = 'MyChart_01';
103 |   const emu4M = {
104 |     magnitude: 4000000,
105 |     unit: 'EMU'
106 |   };
107 |   const requests = [{
108 |     createSheetsChart: {
109 |       objectId: chartId,
110 |       spreadsheetId: spreadsheetId,
111 |       chartId: sheetChartId,
112 |       linkingMode: 'LINKED',
113 |       elementProperties: {
114 |         pageObjectId: pageId,
115 |         size: {
116 |           height: emu4M,
117 |           width: emu4M
118 |         },
119 |         transform: {
120 |           scaleX: 1,
121 |           scaleY: 1,
122 |           translateX: 100000,
123 |           translateY: 100000,
124 |           unit: 'EMU'
125 |         }
126 |       }
127 |     }
128 |   }];
129 |   const createSheetsChartResponse = Slides.Presentations.batchUpdate({
130 |     requests: requests
131 |   }, presentationId);
132 |   return createSheetsChartResponse.replies[0].createSheetsChart.objectId;
133 | };


--------------------------------------------------------------------------------
/slides/api/Snippets.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | const title = 'my title';
 17 | 
 18 | // [START slides_create_presentation]
 19 | /**
 20 |  * Creates a presentation
 21 |  * @returns {*} the created presentation
 22 |  */
 23 | function createPresentation() {
 24 |   try {
 25 |     const presentation = Slides.Presentations.create({
 26 |       title: title
 27 |     });
 28 |     console.log('Created presentation with ID: %s', presentation.presentationId);
 29 | 
 30 |     return presentation;
 31 |   } catch (err) {
 32 |     // TODO (Developer) - Handle exception
 33 |     console.log('Failed with error: %s', err.error);
 34 |   }
 35 | };
 36 | // [END slides_create_presentation]
 37 | 
 38 | // [START slides_copy_presentation]
 39 | /**
 40 |  * create a presentation and copy it
 41 |  * @param {string} presentationId - ID of presentation to copy
 42 |  * @returns {*} the copy's presentation id
 43 |  */
 44 | function copyPresentation(presentationId) {
 45 |   const copyTitle = 'Copy Title';
 46 | 
 47 |   let copyFile = {
 48 |     title: copyTitle,
 49 |     parents: [{id: 'root'}]
 50 |   };
 51 |   try {
 52 |     copyFile = Drive.Files.copy(copyFile, presentationId);
 53 |     // (optional) copyFile.id can be returned directly
 54 |     const presentationCopyId = copyFile.id;
 55 | 
 56 |     return presentationCopyId;
 57 |   } catch (err) {
 58 |     // TODO (Developer) - Handle exception
 59 |     console.log('Failed with error: %s', err.error);
 60 |   }
 61 | };
 62 | // [END slides_copy_presentation]
 63 | 
 64 | // [START slides_create_slide]
 65 | /**
 66 |  * Creates a slide
 67 |  * @param {string} presentationId
 68 |  * @param {string} pageId
 69 |  * @returns {*}
 70 |  */
 71 | function createSlide(presentationId, pageId) {
 72 |   // See Presentation.insertSlide(...) to learn how to add a slide using SlidesApp.
 73 |   // http://developers.google.com/apps-script/reference/slides/presentation#appendslidelayout
 74 |   const requests = [{
 75 |     createSlide: {
 76 |       objectId: pageId,
 77 |       insertionIndex: '1',
 78 |       slideLayoutReference: {
 79 |         predefinedLayout: 'TITLE_AND_TWO_COLUMNS'
 80 |       }
 81 |     }
 82 |   }];
 83 | 
 84 |   // If you wish to populate the slide with elements, add element create requests here,
 85 |   // using the pageId.
 86 | 
 87 |   // Execute the request.
 88 |   try {
 89 |     const createSlideResponse = Slides.Presentations.batchUpdate({
 90 |       requests: requests
 91 |     }, presentationId);
 92 |     console.log('Created slide with ID: %s', createSlideResponse.replies[0].createSlide.objectId);
 93 |     return createSlideResponse;
 94 |   } catch (err) {
 95 |     // TODO (Developer) - Handle exception
 96 |     console.log('Failed with error: %s', err.error);
 97 |   }
 98 | };
 99 | // [END slides_create_slide]
100 | 
101 | // [START slides_create_textbox_with_text]
102 | /**
103 |  * Create a new square textbox, using the supplied element ID.
104 |  * @param {string} presentationId
105 |  * @param {string} pageId
106 |  * @returns {*}
107 |  */
108 | function createTextboxWithText(presentationId, pageId) {
109 |   const elementId = 'MyTextBox_01';
110 |   const pt350 = {
111 |     magnitude: 350,
112 |     unit: 'PT'
113 |   };
114 |   const requests = [
115 |     {
116 |       createShape: {
117 |         objectId: elementId,
118 |         shapeType: 'TEXT_BOX',
119 |         elementProperties: {
120 |           pageObjectId: pageId,
121 |           size: {
122 |             height: pt350,
123 |             width: pt350
124 |           },
125 |           transform: {
126 |             scaleX: 1,
127 |             scaleY: 1,
128 |             translateX: 350,
129 |             translateY: 100,
130 |             unit: 'PT'
131 |           }
132 |         }
133 |       }
134 |     },
135 |     // Insert text into the box, using the supplied element ID.
136 |     {
137 |       insertText: {
138 |         objectId: elementId,
139 |         insertionIndex: 0,
140 |         text: 'New Box Text Inserted!'
141 |       }
142 |     }
143 |   ];
144 | 
145 |   // Execute the request.
146 |   try {
147 |     const createTextboxWithTextResponse = Slides.Presentations.batchUpdate({
148 |       requests: requests
149 |     }, presentationId);
150 |     const createShapeResponse = createTextboxWithTextResponse.replies[0].createShape;
151 |     console.log('Created textbox with ID: %s', createShapeResponse.objectId);
152 | 
153 |     return createTextboxWithTextResponse;
154 |   } catch (err) {
155 |     // TODO (Developer) - Handle exception
156 |     console.log('Failed with error: %s', err.error);
157 |   }
158 | };
159 | // [END slides_create_textbox_with_text]
160 | 
161 | // [START slides_create_image]
162 | /**
163 |  * Create a new image, using the supplied object ID, with content downloaded from imageUrl.
164 |  * @param {string} presentationId
165 |  * @param {string} pageId
166 |  * @returns {*}
167 |  */
168 | function createImage(presentationId, pageId) {
169 |   let requests = [];
170 |   const imageId = 'MyImage_01';
171 |   const imageUrl = 'https://www.google.com/images/branding/googlelogo/2x/' +
172 |       'googlelogo_color_272x92dp.png';
173 |   const emu4M = {
174 |     magnitude: 4000000,
175 |     unit: 'EMU'
176 |   };
177 |   requests.push({
178 |     createImage: {
179 |       objectId: imageId,
180 |       url: imageUrl,
181 |       elementProperties: {
182 |         pageObjectId: pageId,
183 |         size: {
184 |           height: emu4M,
185 |           width: emu4M
186 |         },
187 |         transform: {
188 |           scaleX: 1,
189 |           scaleY: 1,
190 |           translateX: 100000,
191 |           translateY: 100000,
192 |           unit: 'EMU'
193 |         }
194 |       }
195 |     }
196 |   });
197 | 
198 |   // Execute the request.
199 |   try {
200 |     const response = Slides.Presentations.batchUpdate({
201 |       requests: requests
202 |     }, presentationId);
203 | 
204 |     const createImageResponse = response.replies;
205 |     console.log('Created image with ID: %s', createImageResponse[0].createImage.objectId);
206 | 
207 |     return createImageResponse;
208 |   } catch (err) {
209 |     // TODO (Developer) - Handle exception
210 |     console.log('Failed with error: %s', err.error);
211 |   }
212 | };
213 | // [END slides_create_image]
214 | 
215 | // [START slides_text_merging]
216 | /**
217 |  * Use the Sheets API to load data, one record per row.
218 |  * @param {string} templatePresentationId
219 |  * @param {string} dataSpreadsheetId
220 |  * @returns {*[]}
221 |  */
222 | function textMerging(templatePresentationId, dataSpreadsheetId) {
223 |   let responses = [];
224 |   const dataRangeNotation = 'Customers!A2:M6';
225 |   try {
226 |     let values = SpreadsheetApp.openById(dataSpreadsheetId).getRange(dataRangeNotation).getValues();
227 | 
228 |     // For each record, create a new merged presentation.
229 |     for (let i = 0; i < values.length; ++i) {
230 |       const row = values[i];
231 |       const customerName = row[2]; // name in column 3
232 |       const caseDescription = row[5]; // case description in column 6
233 |       const totalPortfolio = row[11]; // total portfolio in column 12
234 | 
235 |       // Duplicate the template presentation using the Drive API.
236 |       const copyTitle = customerName + ' presentation';
237 |       let copyFile = {
238 |         title: copyTitle,
239 |         parents: [{id: 'root'}]
240 |       };
241 |       copyFile = Drive.Files.copy(copyFile, templatePresentationId);
242 |       const presentationCopyId = copyFile.id;
243 | 
244 |       // Create the text merge (replaceAllText) requests for this presentation.
245 |       const requests = [{
246 |         replaceAllText: {
247 |           containsText: {
248 |             text: '{{customer-name}}',
249 |             matchCase: true
250 |           },
251 |           replaceText: customerName
252 |         }
253 |       }, {
254 |         replaceAllText: {
255 |           containsText: {
256 |             text: '{{case-description}}',
257 |             matchCase: true
258 |           },
259 |           replaceText: caseDescription
260 |         }
261 |       }, {
262 |         replaceAllText: {
263 |           containsText: {
264 |             text: '{{total-portfolio}}',
265 |             matchCase: true
266 |           },
267 |           replaceText: totalPortfolio + ''
268 |         }
269 |       }];
270 | 
271 |       // Execute the requests for this presentation.
272 |       const result = Slides.Presentations.batchUpdate({
273 |         requests: requests
274 |       }, presentationCopyId);
275 |       // Count the total number of replacements made.
276 |       let numReplacements = 0;
277 |       result.replies.forEach(function(reply) {
278 |         numReplacements += reply.replaceAllText.occurrencesChanged;
279 |       });
280 |       console.log('Created presentation for %s with ID: %s', customerName, presentationCopyId);
281 |       console.log('Replaced %s text instances', numReplacements);
282 |       // [START_EXCLUDE silent]
283 |       responses.push(result.replies);
284 |       if (responses.length === values.length) { // return for the last value
285 |         return responses;
286 |       }
287 |       // [END_EXCLUDE]
288 |     }
289 |   } catch (err) {
290 |     // TODO (Developer) - Handle exception
291 |     console.log('Failed with error: %s', err.error);
292 |   }
293 | };
294 | // [END slides_text_merging]
295 | 
296 | // [START slides_image_merging]
297 | /**
298 |  * Duplicate the template presentation using the Drive API.
299 |  * @param {string} templatePresentationId
300 |  * @param {string} imageUrl
301 |  * @param {string} customerName
302 |  * @returns {*}
303 |  */
304 | function imageMerging(templatePresentationId, imageUrl, customerName) {
305 |   const logoUrl = imageUrl;
306 |   const customerGraphicUrl = imageUrl;
307 | 
308 |   const copyTitle = customerName + ' presentation';
309 |   let copyFile = {
310 |     title: copyTitle,
311 |     parents: [{id: 'root'}]
312 |   };
313 | 
314 |   try {
315 |     copyFile = Drive.Files.copy(copyFile, templatePresentationId);
316 |     const presentationCopyId = copyFile.id;
317 | 
318 |     // Create the image merge (replaceAllShapesWithImage) requests.
319 |     const requests = [{
320 |       replaceAllShapesWithImage: {
321 |         imageUrl: logoUrl,
322 |         imageReplaceMethod: 'CENTER_INSIDE',
323 |         containsText: {
324 |           text: '{{company-logo}}',
325 |           matchCase: true
326 |         }
327 |       }
328 |     }, {
329 |       replaceAllShapesWithImage: {
330 |         imageUrl: customerGraphicUrl,
331 |         imageReplaceMethod: 'CENTER_INSIDE',
332 |         containsText: {
333 |           text: '{{customer-graphic}}',
334 |           matchCase: true
335 |         }
336 |       }
337 |     }];
338 | 
339 |     // Execute the requests for this presentation.
340 |     let batchUpdateResponse = Slides.Presentations.batchUpdate({
341 |       requests: requests
342 |     }, presentationCopyId);
343 |     let numReplacements = 0;
344 |     batchUpdateResponse.replies.forEach(function(reply) {
345 |       numReplacements += reply.replaceAllShapesWithImage.occurrencesChanged;
346 |     });
347 |     console.log('Created merged presentation with ID: %s', presentationCopyId);
348 |     console.log('Replaced %s shapes with images.', numReplacements);
349 | 
350 |     return batchUpdateResponse;
351 |   } catch (err) {
352 |     // TODO (Developer) - Handle exception
353 |     console.log('Failed with error: %s', err.error);
354 |   }
355 | };
356 | // [END slides_image_merging]
357 | 
358 | // [START slides_simple_text_replace]
359 | /**
360 |  * Remove existing text in the shape, then insert new text.
361 |  * @param {string} presentationId
362 |  * @param {string?} shapeId
363 |  * @param {string} replacementText
364 |  * @returns {*}
365 |  */
366 | function simpleTextReplace(presentationId, shapeId, replacementText) {
367 |   const requests = [{
368 |     deleteText: {
369 |       objectId: shapeId,
370 |       textRange: {
371 |         type: 'ALL'
372 |       }
373 |     }
374 |   }, {
375 |     insertText: {
376 |       objectId: shapeId,
377 |       insertionIndex: 0,
378 |       text: replacementText
379 |     }
380 |   }];
381 | 
382 |   // Execute the requests.
383 |   try {
384 |     const batchUpdateResponse = Slides.Presentations.batchUpdate({
385 |       requests: requests
386 |     }, presentationId);
387 |     console.log('Replaced text in shape with ID: %s', shapeId);
388 | 
389 |     return batchUpdateResponse;
390 |   } catch (err) {
391 |     // TODO (Developer) - Handle exception
392 |     console.log('Failed with error: %s', err.error);
393 |   }
394 | };
395 | // [END slides_simple_text_replace]
396 | 
397 | // [START slides_text_style_update]
398 | /**
399 |  * Update the text style so that the first 5 characters are bolded
400 |  * and italicized, the next 5 are displayed in blue 14 pt Times
401 |  * New Roman font, and the next 5 are hyperlinked.
402 |  * @param {string} presentationId
403 |  * @param {string} shapeId
404 |  * @returns {*}
405 |  */
406 | function textStyleUpdate(presentationId, shapeId) {
407 |   const requests = [{
408 |     updateTextStyle: {
409 |       objectId: shapeId,
410 |       textRange: {
411 |         type: 'FIXED_RANGE',
412 |         startIndex: 0,
413 |         endIndex: 5
414 |       },
415 |       style: {
416 |         bold: true,
417 |         italic: true
418 |       },
419 |       fields: 'bold,italic'
420 |     }
421 |   }, {
422 |     updateTextStyle: {
423 |       objectId: shapeId,
424 |       textRange: {
425 |         type: 'FIXED_RANGE',
426 |         startIndex: 5,
427 |         endIndex: 10
428 |       },
429 |       style: {
430 |         fontFamily: 'Times New Roman',
431 |         fontSize: {
432 |           magnitude: 14,
433 |           unit: 'PT'
434 |         },
435 |         foregroundColor: {
436 |           opaqueColor: {
437 |             rgbColor: {
438 |               blue: 1.0,
439 |               green: 0.0,
440 |               red: 0.0
441 |             }
442 |           }
443 |         }
444 |       },
445 |       fields: 'foregroundColor,fontFamily,fontSize'
446 |     }
447 |   }, {
448 |     updateTextStyle: {
449 |       objectId: shapeId,
450 |       textRange: {
451 |         type: 'FIXED_RANGE',
452 |         startIndex: 10,
453 |         endIndex: 15
454 |       },
455 |       style: {
456 |         link: {
457 |           url: 'www.example.com'
458 |         }
459 |       },
460 |       fields: 'link'
461 |     }
462 |   }];
463 | 
464 |   // Execute the requests.
465 |   try {
466 |     const batchUpdateResponse = Slides.Presentations.batchUpdate({
467 |       requests: requests
468 |     }, presentationId);
469 |     console.log('Updated the text style for shape with ID: %s', shapeId);
470 | 
471 |     return batchUpdateResponse;
472 |   } catch (err) {
473 |     // TODO (Developer) - Handle exception
474 |     console.log('Failed with error: %s', err.error);
475 |   }
476 | };
477 | // [END slides_text_style_update]
478 | 
479 | // [START slides_create_bulleted_text]
480 | /**
481 |  * Add arrow-diamond-disc bullets to all text in the shape.
482 |  */
483 | function createBulletedText(presentationId, shapeId) {
484 |   const requests = [{
485 |     createParagraphBullets: {
486 |       objectId: shapeId,
487 |       textRange: {
488 |         type: 'ALL'
489 |       },
490 |       bulletPreset: 'BULLET_ARROW_DIAMOND_DISC'
491 |     }
492 |   }];
493 | 
494 |   // Execute the requests.
495 |   try {
496 |     const batchUpdateResponse = Slides.Presentations.batchUpdate({
497 |       requests: requests
498 |     }, presentationId);
499 |     console.log('Added bullets to text in shape with ID: %s', shapeId);
500 | 
501 |     return batchUpdateResponse;
502 |   } catch (err) {
503 |     // TODO (Developer) - Handle exception
504 |     console.log('Failed with error: %s', err.error);
505 |   }
506 | };
507 | // [END slides_create_bulleted_text]
508 | 
509 | // [START slides_create_sheets_chart]
510 | /**
511 |  * Embed a Sheets chart (indicated by the spreadsheetId and sheetChartId) onto
512 |  *   a page in the presentation. Setting the linking mode as 'LINKED' allows the
513 |  *   chart to be refreshed if the Sheets version is updated.
514 |  * @param {string} presentationId
515 |  * @param {string} pageId
516 |  * @param {string} shapeId
517 |  * @param {string} sheetChartId
518 |  * @returns {*}
519 |  */
520 | function createSheetsChart(presentationId, pageId, shapeId, sheetChartId) {
521 |   const emu4M = {
522 |     magnitude: 4000000,
523 |     unit: 'EMU'
524 |   };
525 |   const presentationChartId = 'MyEmbeddedChart';
526 |   const requests = [{
527 |     createSheetsChart: {
528 |       objectId: presentationChartId,
529 |       spreadsheetId: shapeId,
530 |       chartId: sheetChartId,
531 |       linkingMode: 'LINKED',
532 |       elementProperties: {
533 |         pageObjectId: pageId,
534 |         size: {
535 |           height: emu4M,
536 |           width: emu4M
537 |         },
538 |         transform: {
539 |           scaleX: 1,
540 |           scaleY: 1,
541 |           translateX: 100000,
542 |           translateY: 100000,
543 |           unit: 'EMU'
544 |         }
545 |       }
546 |     }
547 |   }];
548 | 
549 |   // Execute the request.
550 |   try {
551 |     const batchUpdateResponse = Slides.Presentations.batchUpdate({
552 |       requests: requests
553 |     }, presentationId);
554 |     console.log('Added a linked Sheets chart with ID: %s', presentationChartId);
555 | 
556 |     return batchUpdateResponse;
557 |   } catch (err) {
558 |     // TODO (Developer) - Handle exception
559 |     console.log('Failed with error: %s', err.error);
560 |   }
561 | };
562 | // [END slides_create_sheets_chart]
563 | 
564 | // [START slides_refresh_sheets_chart]
565 | /**
566 |  * Refresh the sheets charts
567 |  * @param {string} presentationId
568 |  * @param {string} presentationChartId
569 |  * @returns {*}
570 |  */
571 | function refreshSheetsChart(presentationId, presentationChartId) {
572 |   const requests = [{
573 |     refreshSheetsChart: {
574 |       objectId: presentationChartId
575 |     }
576 |   }];
577 | 
578 |   // Execute the request.
579 |   try {
580 |     const batchUpdateResponse = Slides.Presentations.batchUpdate({
581 |       requests: requests
582 |     }, presentationId);
583 |     console.log('Refreshed a linked Sheets chart with ID: %s', presentationChartId);
584 | 
585 |     return batchUpdateResponse;
586 |   } catch (err) {
587 |     // TODO (Developer) - Handle exception
588 |     console.log('Failed with error: %s', err.error);
589 |   }
590 | };
591 | // [END slides_refresh_sheets_chart]
592 | 


--------------------------------------------------------------------------------
/slides/api/Tests.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | const helpers = new Helpers();
 17 | 
 18 | // Constants
 19 | const IMAGE_URL =
 20 |     'https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png';
 21 | const TEMPLATE_PRESENTATION_ID = '1iwq83aR9SIQbqVY-3ozLkJjKhdXErfS_m3zD8VZhtFA';
 22 | const DATA_SPREADSHEET_ID = '1Y3GVGdJHDzlyMB9aLDWV2o_e2RstzUHK1iLDaBgbMwc';
 23 | const CHART_ID = 1107320627;
 24 | const CUSTOMER_NAME = 'Fake Customer';
 25 | 
 26 | /**
 27 |  * A simple existance assertion. Logs if the value is falsy.
 28 |  * @param {object} value The value we expect to exist.
 29 |  */
 30 | function expectToExist(value) {
 31 |   if (!value) {
 32 |     console.log('DNE');
 33 |   }
 34 | }
 35 | 
 36 | /**
 37 |  * A simple equality assertion. Logs if there is a mismatch.
 38 |  * @param {object} expected The expected value.
 39 |  * @param {object} actual The actual value.
 40 |  */
 41 | function expectToEqual(expected, actual) {
 42 |   if (actual !== expected) {
 43 |     console.log('actual: %s expected: %s', actual, expected);
 44 |   }
 45 | }
 46 | 
 47 | /**
 48 |  * Runs all tests.
 49 |  */
 50 | function RUN_ALL_TESTS() {
 51 |   itShouldCreateAPresentation();
 52 |   itShouldCopyAPresentation();
 53 |   itShouldCreateASlide();
 54 |   itShouldCreateATextboxWithText();
 55 |   itShouldCreateAnImage();
 56 |   itShouldMergeText();
 57 |   itShouldImageMerge();
 58 |   itShouldSimpleTextReplace();
 59 |   itShouldTextStyleUpdate();
 60 |   itShouldCreateBulletedText();
 61 |   itShouldCreateSheetsChart();
 62 |   itShouldRefreshSheetsChart();
 63 | }
 64 | 
 65 | /**
 66 |  * Creates a presentation.
 67 |  */
 68 | function itShouldCreateAPresentation() {
 69 |   console.log('> itShouldCreateAPresentation');
 70 |   const presentation = createPresentation();
 71 |   expectToExist(presentation.presentationId);
 72 |   helpers.deleteFileOnCleanup(presentation.presentationId);
 73 | }
 74 | 
 75 | /**
 76 |  * Copies a presentation.
 77 |  */
 78 | function itShouldCopyAPresentation() {
 79 |   console.log('> itShouldCopyAPresentation');
 80 |   const presentationId = helpers.createTestPresentation();
 81 |   const copyId = copyPresentation(presentationId, 'My Duplicate, Presentation');
 82 |   expectToExist(copyId);
 83 |   helpers.deleteFileOnCleanup(copyId);
 84 | }
 85 | 
 86 | /**
 87 |  * Creates a new slide.
 88 |  */
 89 | function itShouldCreateASlide() {
 90 |   console.log('> itShouldCreateASlide');
 91 |   const presentationId = helpers.createTestPresentation();
 92 |   helpers.addSlides(presentationId, 3, 'TITLE_AND_TWO_COLUMNS');
 93 |   const pageId = 'my_page_id';
 94 |   const response = createSlide(presentationId, pageId);
 95 |   expectToExist(response.replies[0].createSlide.objectId);
 96 | }
 97 | 
 98 | /**
 99 |  * Creates a slide with text.
100 |  */
101 | function itShouldCreateATextboxWithText() {
102 |   console.log('> itShouldCreateATextboxWithText');
103 |   const presentationId = helpers.createTestPresentation();
104 |   const ids = helpers.addSlides(presentationId, 3, 'TITLE_AND_TWO_COLUMNS');
105 |   const pageId = ids[0];
106 |   const response = createTextboxWithText(presentationId, pageId);
107 |   expectToEqual(2, response.replies.length);
108 |   const boxId = response.replies[0].createShape.objectId;
109 |   expectToExist(boxId);
110 | }
111 | 
112 | /**
113 |  * Adds an image to a slide.
114 |  */
115 | function itShouldCreateAnImage() {
116 |   console.log('> itShouldCreateAnImage');
117 |   const presentationId = helpers.createTestPresentation();
118 |   const ids = helpers.addSlides(presentationId, 1, 'BLANK');
119 |   const pageId = ids[0];
120 |   const response = createImage(presentationId, pageId);
121 |   expectToEqual(1, response.length);
122 |   const imageId = response[0].createImage.objectId;
123 |   expectToExist(imageId);
124 | }
125 | 
126 | /**
127 |  * Merges presentation text from a spreadsheet.
128 |  */
129 | function itShouldMergeText() {
130 |   console.log('> itShouldMergeText');
131 |   let responses = textMerging(TEMPLATE_PRESENTATION_ID, DATA_SPREADSHEET_ID);
132 |   expectToEqual(5, responses.length);
133 |   responses.forEach(function(response) {
134 |     let numReplacements = 0;
135 |     response.forEach(function(res) {
136 |       numReplacements += res.replaceAllText.occurrencesChanged;
137 |     });
138 |     expectToEqual(4, numReplacements);
139 |   });
140 | }
141 | 
142 | /**
143 |  * Merges images into a spreadsheet.
144 |  */
145 | function itShouldImageMerge() {
146 |   console.log('> itShouldImageMerge');
147 |   let response = imageMerging(TEMPLATE_PRESENTATION_ID, IMAGE_URL, CUSTOMER_NAME);
148 |   expectToEqual(2, response.replies.length);
149 |   let numReplacements = 0;
150 |   response.replies.forEach(function(reply) {
151 |     numReplacements += reply.replaceAllShapesWithImage.occurrencesChanged;
152 |   });
153 |   expectToEqual(2, numReplacements);
154 | }
155 | 
156 | /**
157 |  * Replaces a text box with some text.
158 |  */
159 | function itShouldSimpleTextReplace() {
160 |   console.log('> itShouldSimpleTextReplace');
161 |   const presentationId = helpers.createTestPresentation();
162 |   const pageIds = helpers.addSlides(presentationId, 1, 'BLANK');
163 |   const pageId = pageIds[0];
164 |   const boxId = helpers.createTestTextbox(presentationId, pageId);
165 |   const response = simpleTextReplace(presentationId, boxId, 'MY NEW TEXT');
166 |   expectToEqual(2, response.replies.length);
167 | }
168 | 
169 | /**
170 |  * Updates style for text.
171 |  */
172 | function itShouldTextStyleUpdate() {
173 |   console.log('> itShouldTextStyleUpdate');
174 |   const presentationId = helpers.createTestPresentation();
175 |   const pageIds = helpers.addSlides(presentationId, 1, 'BLANK');
176 |   const pageId = pageIds[0];
177 |   const boxId = helpers.createTestTextbox(presentationId, pageId);
178 |   const response = textStyleUpdate(presentationId, boxId);
179 |   expectToEqual(3, response.replies.length);
180 | }
181 | 
182 | /**
183 |  * Creates bulleted text.
184 |  */
185 | function itShouldCreateBulletedText() {
186 |   console.log('> itShouldCreateBulletedText');
187 |   const presentationId = helpers.createTestPresentation();
188 |   const pageIds = helpers.addSlides(presentationId, 1, 'BLANK');
189 |   const pageId = pageIds[0];
190 |   const boxId = helpers.createTestTextbox(presentationId, pageId);
191 |   const response = createBulletedText(presentationId, boxId);
192 |   expectToEqual(1, response.replies.length);
193 | }
194 | 
195 | /**
196 |  * Adds a sheets chart in a presentation.
197 |  */
198 | function itShouldCreateSheetsChart() {
199 |   console.log('> itShouldCreateSheetsChart');
200 |   const presentationId = helpers.createTestPresentation();
201 |   const pageIds = helpers.addSlides(presentationId, 1, 'BLANK');
202 |   const pageId = pageIds[0];
203 |   const response = createSheetsChart(presentationId, pageId, DATA_SPREADSHEET_ID, CHART_ID);
204 |   expectToEqual(1, response.replies.length);
205 |   const chartId = response.replies[0].createSheetsChart.objectId;
206 |   expectToExist(chartId);
207 | }
208 | 
209 | /**
210 |  * Refreshes a sheets chart in a presentation.
211 |  */
212 | function itShouldRefreshSheetsChart() {
213 |   console.log('> itShouldRefreshSheetsChart');
214 |   const presentationId = helpers.createTestPresentation();
215 |   const pageIds = helpers.addSlides(presentationId, 1, 'BLANK');
216 |   const pageId = pageIds[0];
217 |   const sheetChartId = helpers.createTestSheetsChart(presentationId, pageId, DATA_SPREADSHEET_ID,
218 |       CHART_ID);
219 |   const response = refreshSheetsChart(presentationId, sheetChartId);
220 |   expectToEqual(1, response.replies.length);
221 | }


--------------------------------------------------------------------------------
/slides/imageSlides/imageSlides.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | 
 17 | // [START apps_script_slides_image_create]
 18 | var NAME = 'My favorite images';
 19 | var deck = SlidesApp.create(NAME);
 20 | // [END apps_script_slides_image_create]
 21 | 
 22 | // [START apps_script_slides_image_add_image]
 23 | /**
 24 |  * Adds an image to a presentation at a given slide index.
 25 |  * @param {string} imageUrl The image URL
 26 |  * @param {number} index The slide index to add the image to
 27 |  */
 28 |  function addImageSlide(imageUrl, index) {
 29 |   var slide = deck.appendSlide(SlidesApp.PredefinedLayout.BLANK);
 30 |   var image = slide.insertImage(imageUrl);
 31 |  }
 32 | // [END apps_script_slides_image_add_image]
 33 | 
 34 | // [START apps_script_slides_image_main]
 35 | /**
 36 |  * Adds images to a slides presentation.
 37 |  */
 38 | function main() {
 39 |   var images = [
 40 |     'https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png',
 41 |     'http://www.google.com/services/images/phone-animation-results_2x.png',
 42 |     'http://www.google.com/services/images/section-work-card-img_2x.jpg',
 43 |     'http://gsuite.google.com/img/icons/product-lockup.png',
 44 |     'http://gsuite.google.com/img/home-hero_2x.jpg'
 45 |   ];
 46 |   var [title, subtitle] = deck.getSlides()[0].getPageElements();
 47 |   title.asShape().getText().setText(NAME);
 48 |   subtitle.asShape().getText().setText('Google Apps Script\nSlides Service demo');
 49 |   images.forEach(addImageSlide);
 50 | }
 51 | // [END apps_script_slides_image_main]
 52 | 
 53 | // [START apps_script_slides_image_add_image_slide]
 54 | /**
 55 |  * Creates a single slide using the image from the given link;
 56 |  * used directly by foreach(), hence the parameters are fixed.
 57 |  * @param {string} imageUrl A String object representing an image URL
 58 |  * @param {number} index The index into the array; unused (req'd by forEach)
 59 |  */
 60 | function addImageSlide(imageUrl, index) {
 61 |     var slide = deck.appendSlide(SlidesApp.PredefinedLayout.BLANK);
 62 |     var image = slide.insertImage(imageUrl);
 63 |     var imgWidth = image.getWidth();
 64 |     var imgHeight = image.getHeight();
 65 |     var pageWidth = deck.getPageWidth();
 66 |     var pageHeight = deck.getPageHeight();
 67 |     var newX = pageWidth/2. - imgWidth/2.;
 68 |     var newY = pageHeight/2. - imgHeight/2.;
 69 |     image.setLeft(newX).setTop(newY);
 70 | }
 71 | // [END apps_script_slides_image_add_image_slide]
 72 | 
 73 | 
 74 | // [START apps_script_slides_image_full_script]
 75 | var NAME = 'My favorite images';
 76 | var presentation = SlidesApp.create(NAME);
 77 | 
 78 | /**
 79 |  * Creates a single slide using the image from the given link;
 80 |  * used directly by foreach(), hence the parameters are fixed.
 81 |  * @param {string} imageUrl A String object representing an image URL
 82 |  * @param {number} index The index into the array; unused (req'd by forEach)
 83 |  */
 84 | function addImageSlide(imageUrl, index) {
 85 |     var slide = presentation.appendSlide(SlidesApp.PredefinedLayout.BLANK);
 86 |     var image = slide.insertImage(imageUrl);
 87 |     var imgWidth = image.getWidth();
 88 |     var imgHeight = image.getHeight();
 89 |     var pageWidth = presentation.getPageWidth();
 90 |     var pageHeight = presentation.getPageHeight();
 91 |     var newX = pageWidth/2. - imgWidth/2.;
 92 |     var newY = pageHeight/2. - imgHeight/2.;
 93 |     image.setLeft(newX).setTop(newY);
 94 | }
 95 | 
 96 | /**
 97 |  * The driver application features an array of image URLs, setting of the
 98 |  * main title & subtitle, and creation of individual slides for each image.
 99 |  */
100 | function main() {
101 |   var images = [
102 |     'http://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png',
103 |     'http://www.google.com/services/images/phone-animation-results_2x.png',
104 |     'http://www.google.com/services/images/section-work-card-img_2x.jpg',
105 |     'http://gsuite.google.com/img/icons/product-lockup.png',
106 |     'http://gsuite.google.com/img/home-hero_2x.jpg'
107 |   ];
108 |   var [title, subtitle] = presentation.getSlides()[0].getPageElements();
109 |   title.asShape().getText().setText(NAME);
110 |   subtitle.asShape().getText().setText('Google Apps Script\nSlides Service demo');
111 |   images.forEach(addImageSlide);
112 | }
113 | // [END apps_script_slides_image_full_script]
114 | 


--------------------------------------------------------------------------------
/slides/progress/progress.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | // [START apps_script_slides_progress]
17 | /**
18 |  * @OnlyCurrentDoc Adds progress bars to a presentation.
19 |  */
20 | const BAR_ID = 'PROGRESS_BAR_ID';
21 | const BAR_HEIGHT = 10; // px
22 | 
23 | /**
24 |  * Runs when the add-on is installed.
25 |  * @param {object} e The event parameter for a simple onInstall trigger. To
26 |  *     determine which authorization mode (ScriptApp.AuthMode) the trigger is
27 |  *     running in, inspect e.authMode. (In practice, onInstall triggers always
28 |  *     run in AuthMode.FULL, but onOpen triggers may be AuthMode.LIMITED or
29 |  *     AuthMode.NONE.)
30 |  */
31 | function onInstall(e) {
32 |   onOpen();
33 | }
34 | 
35 | /**
36 |  * Trigger for opening a presentation.
37 |  * @param {object} e The onOpen event.
38 |  */
39 | function onOpen(e) {
40 |   SlidesApp.getUi().createAddonMenu()
41 |       .addItem('Show progress bar', 'createBars')
42 |       .addItem('Hide progress bar', 'deleteBars')
43 |       .addToUi();
44 | }
45 | 
46 | /**
47 |  * Create a rectangle on every slide with different bar widths.
48 |  */
49 | function createBars() {
50 |   deleteBars(); // Delete any existing progress bars
51 |   const presentation = SlidesApp.getActivePresentation();
52 |   const slides = presentation.getSlides();
53 |   for (let i = 0; i < slides.length; ++i) {
54 |     const ratioComplete = (i / (slides.length - 1));
55 |     const x = 0;
56 |     const y = presentation.getPageHeight() - BAR_HEIGHT;
57 |     const barWidth = presentation.getPageWidth() * ratioComplete;
58 |     if (barWidth > 0) {
59 |       const bar = slides[i].insertShape(SlidesApp.ShapeType.RECTANGLE, x, y,
60 |           barWidth, BAR_HEIGHT);
61 |       bar.getBorder().setTransparent();
62 |       bar.setLinkUrl(BAR_ID);
63 |     }
64 |   }
65 | }
66 | 
67 | /**
68 |  * Deletes all progress bar rectangles.
69 |  */
70 | function deleteBars() {
71 |   const presentation = SlidesApp.getActivePresentation();
72 |   const slides = presentation.getSlides();
73 |   for (let i = 0; i < slides.length; ++i) {
74 |     const elements = slides[i].getPageElements();
75 |     for (const el of elements) {
76 |       if (el.getPageElementType() === SlidesApp.PageElementType.SHAPE &&
77 |         el.asShape().getLink() &&
78 |         el.asShape().getLink().getUrl() === BAR_ID) {
79 |         el.remove();
80 |       }
81 |     }
82 |   }
83 | }
84 | // [END apps_script_slides_progress]
85 | 


--------------------------------------------------------------------------------
/slides/quickstart/quickstart.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | // [START slides_quickstart]
17 | /**
18 |  * Creates a Slides API service object and logs the number of slides and
19 |  * elements in a sample presentation:
20 |  * https://docs.google.com/presentation/d/1EAYk18WDjIG-zp_0vLm3CsfQh_i8eXc67Jo2O9C6Vuc/edit
21 |  */
22 | function logSlidesAndElements() {
23 |   const presentationId = '1EAYk18WDjIG-zp_0vLm3CsfQh_i8eXc67Jo2O9C6Vuc';
24 |   try {
25 |     // Gets the specified presentation using presentationId
26 |     const presentation = Slides.Presentations.get(presentationId);
27 |     const slides = presentation.slides;
28 |     // Print the number of slides and elements in presentation
29 |     console.log('The presentation contains %s slides:', slides.length);
30 |     for ( let i = 0; i < slides.length; i++) {
31 |       console.log('- Slide # %s contains %s elements.', i + 1, slides[i].pageElements.length);
32 |     }
33 |   } catch (err) {
34 |     // TODO (developer) - Handle  Presentation.get() exception from Slides API
35 |     console.log('Failed to found Presentation with error %s', err.message);
36 |   }
37 | }
38 | // [END slides_quickstart]
39 | 


--------------------------------------------------------------------------------
/slides/selection/selection.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the 'License');
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an 'AS IS' BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | 
 17 | // [START apps_script_slides_get_selection]
 18 | const selection = SlidesApp.getActivePresentation().getSelection();
 19 | // [END apps_script_slides_get_selection]
 20 | 
 21 | // [START apps_script_slides_get_current_page]
 22 | const currentPage = SlidesApp.getActivePresentation().getSelection().getCurrentPage();
 23 | // [END apps_script_slides_get_current_page]
 24 | 
 25 | /**
 26 |  * Selection type to read the current selection in a type-appropriate way.
 27 |  */
 28 | function slidesSelectionTypes() {
 29 |   // [START apps_script_slides_selection_type]
 30 |   const selection = SlidesApp.getActivePresentation().getSelection();
 31 |   const selectionType = selection.getSelectionType();
 32 |   let currentPage;
 33 |   switch (selectionType) {
 34 |     case SlidesApp.SelectionType.NONE:
 35 |       console.log('Nothing selected');
 36 |       break;
 37 |     case SlidesApp.SelectionType.CURRENT_PAGE:
 38 |       currentPage = selection.getCurrentPage();
 39 |       console.log('Selection is a page with ID: ' + currentPage.getObjectId());
 40 |       break;
 41 |     case SlidesApp.SelectionType.PAGE_ELEMENT:
 42 |       const pageElements = selection.getPageElementRange().getPageElements();
 43 |       console.log('There are ' + pageElements.length + ' page elements selected.');
 44 |       break;
 45 |     case SlidesApp.SelectionType.TEXT:
 46 |       const tableCellRange = selection.getTableCellRange();
 47 |       if (tableCellRange !== null) {
 48 |         const tableCell = tableCellRange.getTableCells()[0];
 49 |         console.log('Selected text is in a table at row ' +
 50 |           tableCell.getRowIndex() + ', column ' +
 51 |           tableCell.getColumnIndex());
 52 |       }
 53 |       const textRange = selection.getTextRange();
 54 |       if (textRange.getStartIndex() === textRange.getEndIndex()) {
 55 |         console.log('Text cursor position: ' + textRange.getStartIndex());
 56 |       } else {
 57 |         console.log('Selection is a text range from: ' + textRange.getStartIndex() + ' to: ' +
 58 |           textRange.getEndIndex() + ' is selected');
 59 |       }
 60 |       break;
 61 |     case SlidesApp.SelectionType.TABLE_CELL:
 62 |       const tableCells = selection.getTableCellRange().getTableCells();
 63 |       const table = tableCells[0].getParentTable();
 64 |       console.log('There are ' + tableCells.length + ' table cells selected.');
 65 |       break;
 66 |     case SlidesApp.SelectionType.PAGE:
 67 |       const pages = selection.getPageRange().getPages();
 68 |       console.log('There are ' + pages.length + ' pages selected.');
 69 |       break;
 70 |     default:
 71 |       break;
 72 |   }
 73 | // [END apps_script_slides_selection_type]
 74 | }
 75 | /**
 76 |  * Selecting the current page
 77 |  */
 78 | function slideSelect() {
 79 | // [START apps_script_slides_select]
 80 | // Select the first slide as the current page selection and remove any previous selection.
 81 |   const selection = SlidesApp.getActivePresentation().getSelection();
 82 |   const slide = SlidesApp.getActivePresentation().getSlides()[0];
 83 |   slide.selectAsCurrentPage();
 84 | // State of selection
 85 | //
 86 | // selection.getSelectionType() = SlidesApp.SelectionType.CURRENT_PAGE
 87 | // selection.getCurrentPage() = slide
 88 | //
 89 | // [END apps_script_slides_select]
 90 | }
 91 | /**
 92 |  * Selecting a page element.
 93 |  */
 94 | function selectPageElement() {
 95 | // [START apps_script_slides_select_page_element]
 96 |   const slide = SlidesApp.getActivePresentation().getSlides()[0];
 97 |   const pageElement = slide.getPageElements()[0];
 98 |   // Only select this page element and remove any previous selection.
 99 |   pageElement.select();
100 | // State of selection
101 | //
102 | // selection.getSelectionType() = SlidesApp.SelectionType.PAGE_ELEMENT
103 | // selection.getCurrentPage() = slide
104 | // selection.getPageElementRange().getPageElements()[0] = pageElement
105 | //
106 | // [END apps_script_slides_select_page_element]
107 | }
108 | /**
109 |  * Selecting multiple page elements
110 |  */
111 | function selectMultiplePageElement() {
112 | // [START apps_script_slides_select_multiple_page_elements]
113 |   const slide = SlidesApp.getActivePresentation().getSlides()[0];
114 |   // First select the slide page, as the current page selection.
115 |   slide.selectAsCurrentPage();
116 |   // Then select all the page elements in the selected slide page.
117 |   const pageElements = slide.getPageElements();
118 |   for (let i = 0; i < pageElements.length; i++) {
119 |     pageElements[i].select(false);
120 |   }
121 | // State of selection
122 | //
123 | // selection.getSelectionType() = SlidesApp.SelectionType.PAGE_ELEMENT
124 | // selection.getCurrentPage() = slide
125 | // selection.getPageElementRange().getPageElements() = pageElements
126 | //
127 | // [END apps_script_slides_select_multiple_page_elements]
128 | }
129 | /**
130 |  *This shows how selection can be transformed by manipulating
131 |  * selected page elements.
132 |  */
133 | function slideTransformSelection() {
134 | // [START apps_script_slides_transform_selection]
135 |   const slide = SlidesApp.getActivePresentation().getSlides()[0];
136 |   const shape1 = slide.getPageElements()[0].asShape();
137 |   const shape2 = slide.getPageElements()[1].asShape();
138 |   // Select both the shapes.
139 |   shape1.select();
140 |   shape2.select(false);
141 |   // State of selection
142 |   //
143 |   // selection.getSelectionType() = SlidesApp.SelectionType.PAGE_ELEMENT
144 |   // selection.getCurrentPage() = slide
145 |   // selection.getPageElementRange().getPageElements() = [shape1, shape2]
146 |   //
147 |   // Remove one shape.
148 |   shape2.remove();
149 | // State of selection
150 | //
151 | // selection.getSelectionType() = SlidesApp.SelectionType.PAGE_ELEMENT
152 | // selection.getCurrentPage() = slide
153 | // selection.getPageElementRange().getPageElements() = [shape1]
154 | //
155 | // [END apps_script_slides_transform_selection]
156 | }
157 | /**
158 |  * Range selection within text contained in a shape.
159 |  */
160 | function slidesRangeSelection() {
161 | // [START apps_script_slides_range_selection_in_shape]
162 |   const slide = SlidesApp.getActivePresentation().getSlides()[0];
163 |   const shape = slide.getPageElements()[0].asShape();
164 |   shape.getText().setText('Hello');
165 |   // Range selection: Select the text range 'He'.
166 |   shape.getText().getRange(0, 2).select();
167 | // State of selection
168 | //
169 | // selection.getSelectionType() = SlidesApp.SelectionType.TEXT
170 | // selection.getCurrentPage() = slide
171 | // selection.getPageElementRange().getPageElements()[0] = shape
172 | // selection.getTextRange().getStartIndex() = 0
173 | // selection.getTextRange().getEndIndex() = 2
174 | //
175 | // [END apps_script_slides_range_selection_in_shape]
176 | }
177 | /**
178 |  * Cursor selection within text contained in a shape.
179 |  */
180 | function slidesCursorSelection() {
181 | // [START apps_script_slides_cursor_selection_in_shape]
182 |   const slide = SlidesApp.getActivePresentation().getSlides()[0];
183 |   const shape = slide.getPageElements()[0].asShape();
184 |   shape.getText().setText('Hello');
185 |   // Cursor selection: Place the cursor after 'H' like 'H|ello'.
186 |   shape.getText().getRange(1, 1).select();
187 | // State of selection
188 | //
189 | // selection.getSelectionType() = SlidesApp.SelectionType.TEXT
190 | // selection.getCurrentPage() = slide
191 | // selection.getPageElementRange().getPageElements()[0] = shape
192 | // selection.getTextRange().getStartIndex() = 1
193 | // selection.getTextRange().getEndIndex() = 1
194 | //
195 | // [END apps_script_slides_cursor_selection_in_shape]
196 | }
197 | /**
198 |  * Range selection in table cell.
199 |  */
200 | function slideRangeSelection() {
201 | // [START apps_script_slides_range_selection_in_table]
202 |   const slide = SlidesApp.getActivePresentation().getSlides()[0];
203 |   const table = slide.getPageElements()[0].asTable();
204 |   const tableCell = table.getCell(0, 1);
205 |   tableCell.getText().setText('Hello');
206 |   // Range selection: Select the text range 'He'.
207 |   tableCell.getText().getRange(0, 2).select();
208 | // State of selection
209 | //
210 | // selection.getSelectionType() = SlidesApp.SelectionType.TEXT
211 | // selection.getCurrentPage() = slide
212 | // selection.getPageElementRange().getPageElements()[0] = table
213 | // selection.getTableCellRange().getTableCells()[0] = tableCell
214 | // selection.getTextRange().getStartIndex() = 0
215 | // selection.getTextRange().getEndIndex() = 2
216 | //
217 | // [END apps_script_slides_range_selection_in_table]
218 | }
219 | /**
220 |  * Cursor selection in table cell.
221 |  */
222 | function cursorSelection() {
223 | // [START apps_script_slides_cursor_selection_in_table]
224 |   const slide = SlidesApp.getActivePresentation().getSlides()[0];
225 |   const table = slide.getPageElements()[0].asTable();
226 |   const tableCell = table.getCell(0, 1);
227 |   tableCell.getText().setText('Hello');
228 |   // Cursor selection: Place the cursor after 'H' like 'H|ello'.
229 |   tableCell.getText().getRange(1, 1).select();
230 | // State of selection
231 | //
232 | // selection.getSelectionType() = SlidesApp.SelectionType.TEXT
233 | // selection.getCurrentPage() = slide
234 | // selection.getPageElementRange().getPageElements()[0] = table
235 | // selection.getTableCellRange().getTableCells()[0] = tableCell
236 | // selection.getTextRange().getStartIndex() = 1
237 | // selection.getTextRange().getEndIndex() = 1
238 | //
239 | // [END apps_script_slides_cursor_selection_in_table]
240 | }
241 | /**
242 |  * This shows how the selection can be transformed by editing the selected text.
243 |  */
244 | function selectTransformation() {
245 | // [START apps_script_slides_selection_transformation]
246 |   const slide = SlidesApp.getActivePresentation().getSlides()[0];
247 |   const shape = slide.getPageElements()[0].asShape();
248 |   const textRange = shape.getText();
249 |   textRange.setText('World');
250 |   // Select all the text 'World'.
251 |   textRange.select();
252 |   // State of selection
253 |   //
254 |   // selection.getSelectionType() = SlidesApp.SelectionType.TEXT
255 |   // selection.getCurrentPage() = slide
256 |   // selection.getPageElementRange().getPageElements()[0] = shape
257 |   // selection.getTextRange().getStartIndex() = 0
258 |   // selection.getTextRange().getEndIndex() = 6
259 |   //
260 |   // Add some text to the shape, and the selection will be transformed.
261 |   textRange.insertText(0, 'Hello ');
262 | 
263 | // State of selection
264 | //
265 | // selection.getSelectionType() = SlidesApp.SelectionType.TEXT
266 | // selection.getCurrentPage() = slide
267 | // selection.getPageElementRange().getPageElements()[0] = shape
268 | // selection.getTextRange().getStartIndex() = 0
269 | // selection.getTextRange().getEndIndex() = 12
270 | //
271 | // [END apps_script_slides_selection_transformation]
272 | }
273 | /**
274 |  * The following example shows how to unselect any current selections on a page
275 |  * by setting that page as the current page.
276 |  */
277 | function slidesUnselectingCurrentPage() {
278 | // [START apps_script_slides_unselecting]
279 | // Unselect one or more page elements already selected.
280 | //
281 | // In case one or more page elements in the first slide are selected, setting the
282 | // same (or any other) slide page as the current page would do the unselect.
283 | //
284 |   const slide = SlidesApp.getActivePresentation().getSlides()[0];
285 |   slide.selectAsCurrentPage();
286 | // [END apps_script_slides_unselecting]
287 | }
288 | /**
289 |  * The following example shows how to unselect any current selections on a page
290 |  * by selecting one page element, thus removing all other items from the selection.
291 |  */
292 | function slideUnselectingPageElements() {
293 | // [START apps_script_slides_selecting]
294 | // Unselect one or more page elements already selected.
295 | //
296 | // In case one or more page elements in the first slide are selected,
297 | // selecting any pageElement in the first slide (or any other pageElement) would
298 | // do the unselect and select that pageElement.
299 | //
300 |   const slide = SlidesApp.getActivePresentation().getSlides()[0];
301 |   slide.getPageElements()[0].select();
302 | // [END apps_script_slides_selecting]
303 | }
304 | 


--------------------------------------------------------------------------------
/slides/style/style.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | function setTextHelloWorld() {
 17 | // [START apps_script_slides_hello]
 18 |   try {
 19 |     // Get the first slide of active presentation
 20 |     const slide = SlidesApp.getActivePresentation().getSlides()[0];
 21 |     // Insert shape in the slide with dimensions
 22 |     const shape = slide.insertShape(SlidesApp.ShapeType.TEXT_BOX, 100, 200, 300, 60);
 23 |     const textRange = shape.getText();
 24 |     // Set text in TEXT_BOX
 25 |     textRange.setText('Hello world!');
 26 |     console.log('Start: ' + textRange.getStartIndex() + '; End: ' +
 27 |       textRange.getEndIndex() + '; Content: ' + textRange.asString());
 28 |     const subRange = textRange.getRange(0, 5);
 29 |     console.log('Sub-range Start: ' + subRange.getStartIndex() + '; Sub-range End: ' +
 30 |       subRange.getEndIndex() + '; Sub-range Content: ' + subRange.asString());
 31 |   } catch (err) {
 32 |     // TODO (developer) - Handle exception
 33 |     console.log('Failed with an error %s ', err.message);
 34 |   }
 35 | // [END apps_script_slides_hello]
 36 | }
 37 | /**
 38 |  * Insert Text in shape.
 39 |  */
 40 | function insertText() {
 41 | // [START apps_script_slides_insert_text]
 42 |   try {
 43 |     // Get the first slide of active presentation
 44 |     const slide = SlidesApp.getActivePresentation().getSlides()[0];
 45 |     // Insert shape in the slide with dimensions
 46 |     const shape = slide.insertShape(SlidesApp.ShapeType.TEXT_BOX, 100, 200, 300, 60);
 47 |     const textRange = shape.getText();
 48 |     textRange.setText('Hello world!');
 49 |     textRange.clear(6, 11);
 50 |     // Insert text in TEXT_BOX
 51 |     textRange.insertText(6, 'galaxy');
 52 |     console.log('Start: ' + textRange.getStartIndex() + '; End: ' +
 53 |       textRange.getEndIndex() + '; Content: ' + textRange.asString());
 54 |   } catch (err) {
 55 |     // TODO (developer) - Handle exception
 56 |     console.log('Failed with an error %s ', err.message);
 57 |   }
 58 | // [END apps_script_slides_insert_text]
 59 | }
 60 | /**
 61 |  * Style the text
 62 |  */
 63 | function styleText() {
 64 | // [START apps_script_slides_style_text]
 65 |   try {
 66 |     // Get the first slide of active presentation
 67 |     const slide = SlidesApp.getActivePresentation().getSlides()[0];
 68 |     // Insert shape in the slide with dimensions
 69 |     const shape = slide.insertShape(SlidesApp.ShapeType.TEXT_BOX, 100, 200, 300, 60);
 70 |     const textRange = shape.getText();
 71 |     // Set text in TEXT_BOX
 72 |     textRange.setText('Hello ');
 73 |     // Append text in TEXT_BOX
 74 |     const insertedText = textRange.appendText('world!');
 75 |     // Style the text with url,bold
 76 |     insertedText.getTextStyle()
 77 |         .setBold(true)
 78 |         .setLinkUrl('www.example.com')
 79 |         .setForegroundColor('#ff0000');
 80 |     const helloRange = textRange.getRange(0, 5);
 81 |     console.log('Text: ' + helloRange.asString() + '; Bold: ' + helloRange.getTextStyle().isBold());
 82 |     console.log('Text: ' + insertedText.asString() + '; Bold: ' +
 83 |       insertedText.getTextStyle().isBold());
 84 |     console.log('Text: ' + textRange.asString() + '; Bold: ' + textRange.getTextStyle().isBold());
 85 |   } catch (err) {
 86 |     // TODO (developer) - Handle exception
 87 |     console.log('Failed with an error %s ', err.message);
 88 |   }
 89 | // [END apps_script_slides_style_text]
 90 | }
 91 | 
 92 | /**
 93 |  * Style the paragraph
 94 |  */
 95 | function paragraphStyling() {
 96 | // [START apps_script_slides_paragraph_styling]
 97 |   try {
 98 |     // Get the first slide of active presentation
 99 |     const slide = SlidesApp.getActivePresentation().getSlides()[0];
100 |     // Insert shape in the slide with dimensions
101 |     const shape = slide.insertShape(SlidesApp.ShapeType.TEXT_BOX, 50, 50, 300, 300);
102 |     const textRange = shape.getText();
103 |     // Set the text in the shape/TEXT_BOX
104 |     textRange.setText('Paragraph 1\nParagraph2\nParagraph 3\nParagraph 4');
105 |     const paragraphs = textRange.getParagraphs();
106 |     // Style the paragraph alignment center.
107 |     for (let i = 0; i <= 3; i++) {
108 |       const paragraphStyle = paragraphs[i].getRange().getParagraphStyle();
109 |       paragraphStyle.setParagraphAlignment(SlidesApp.ParagraphAlignment.CENTER);
110 |     }
111 |   } catch (err) {
112 |     // TODO (developer) - Handle exception
113 |     console.log('Failed with an error %s ', err.message);
114 |   }
115 | // [END apps_script_slides_paragraph_styling]
116 | }
117 | /**
118 |  * Style the list
119 |  */
120 | function listStyling() {
121 | // [START apps_script_slides_list_styling]
122 |   try {
123 |     // Get the first slide of active presentation
124 |     const slide = SlidesApp.getActivePresentation().getSlides()[0];
125 |     // Insert shape in the slide with dimensions
126 |     const shape = slide.insertShape(SlidesApp.ShapeType.TEXT_BOX, 50, 50, 300, 300);
127 |     // Add and style the list
128 |     const textRange = shape.getText();
129 |     textRange.appendText('Item 1\n')
130 |         .appendText('\tItem 2\n')
131 |         .appendText('\t\tItem 3\n')
132 |         .appendText('Item 4');
133 |     // Preset patterns of glyphs for lists in text.
134 |     textRange.getListStyle().applyListPreset(SlidesApp.ListPreset.DIGIT_ALPHA_ROMAN);
135 |     const paragraphs = textRange.getParagraphs();
136 |     for (let i = 0; i < paragraphs.length; i++) {
137 |       const listStyle = paragraphs[i].getRange().getListStyle();
138 |       console.log('Paragraph ' + (i + 1) + '\'s nesting level: ' + listStyle.getNestingLevel());
139 |     }
140 |   } catch (err) {
141 |     // TODO (developer) - Handle exception
142 |     console.log('Failed with an error %s ', err.message);
143 |   }
144 | // [END apps_script_slides_list_styling]
145 | }
146 | 


--------------------------------------------------------------------------------
/slides/style/test_style.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | /**
18 |  * runs all the test
19 |  */
20 | function RUN_ALL_TESTS() {
21 |   console.log('> itShouldSetTextHelloWorld');
22 |   setTextHelloWorld();
23 |   console.log('> itShouldInsertText');
24 |   insertText();
25 |   console.log('> itShouldStyleText');
26 |   styleText();
27 |   console.log('> itShouldStyleParagraph');
28 |   paragraphStyling();
29 |   console.log('> itShouldListStyling');
30 |   listStyling();
31 | }
32 | 


--------------------------------------------------------------------------------
/slides/translate/translate.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | // [START apps_script_slides_translate_quickstart]
 17 | /**
 18 |  * @OnlyCurrentDoc Limits the script to only accessing the current presentation.
 19 |  */
 20 | 
 21 | /**
 22 |  * Create a open translate menu item.
 23 |  * @param {Event} event The open event.
 24 |  */
 25 | function onOpen(event) {
 26 |   SlidesApp.getUi().createAddonMenu()
 27 |       .addItem('Open Translate', 'showSidebar')
 28 |       .addToUi();
 29 | }
 30 | 
 31 | /**
 32 |  * Open the Add-on upon install.
 33 |  * @param {Event} event The install event.
 34 |  */
 35 | function onInstall(event) {
 36 |   onOpen(event);
 37 | }
 38 | 
 39 | /**
 40 |  * Opens a sidebar in the document containing the add-on's user interface.
 41 |  */
 42 | function showSidebar() {
 43 |   const ui = HtmlService
 44 |       .createHtmlOutputFromFile('sidebar')
 45 |       .setTitle('Translate');
 46 |   SlidesApp.getUi().showSidebar(ui);
 47 | }
 48 | 
 49 | /**
 50 |  * Recursively gets child text elements a list of elements.
 51 |  * @param {PageElement[]} elements The elements to get text from.
 52 |  * @return {Text[]} An array of text elements.
 53 |  */
 54 | function getElementTexts(elements) {
 55 |   let texts = [];
 56 |   elements.forEach((element)=> {
 57 |     switch (element.getPageElementType()) {
 58 |       case SlidesApp.PageElementType.GROUP:
 59 |         element.asGroup().getChildren().forEach((child)=> {
 60 |           texts = texts.concat(getElementTexts(child));
 61 |         });
 62 |         break;
 63 |       case SlidesApp.PageElementType.TABLE:
 64 |         const table = element.asTable();
 65 |         for (let y = 0; y < table.getNumColumns(); ++y) {
 66 |           for (let x = 0; x < table.getNumRows(); ++x) {
 67 |             texts.push(table.getCell(x, y).getText());
 68 |           }
 69 |         }
 70 |         break;
 71 |       case SlidesApp.PageElementType.SHAPE:
 72 |         texts.push(element.asShape().getText());
 73 |         break;
 74 |     }
 75 |   });
 76 |   return texts;
 77 | }
 78 | 
 79 | /**
 80 |  * Translates selected slide elements to the target language using Apps Script's Language service.
 81 |  *
 82 |  * @param {string} targetLanguage The two-letter short form for the target language. (ISO 639-1)
 83 |  * @return {number} The number of elements translated.
 84 |  */
 85 | function translateSelectedElements(targetLanguage) {
 86 |   // Get selected elements.
 87 |   const selection = SlidesApp.getActivePresentation().getSelection();
 88 |   const selectionType = selection.getSelectionType();
 89 |   let texts = [];
 90 |   switch (selectionType) {
 91 |     case SlidesApp.SelectionType.PAGE:
 92 |       selection.getPageRange().getPages().forEach((page)=> {
 93 |         texts = texts.concat(getElementTexts(page.getPageElements()));
 94 |       });
 95 |       break;
 96 |     case SlidesApp.SelectionType.PAGE_ELEMENT:
 97 |       const pageElements = selection.getPageElementRange().getPageElements();
 98 |       texts = texts.concat(getElementTexts(pageElements));
 99 |       break;
100 |     case SlidesApp.SelectionType.TABLE_CELL:
101 |       selection.getTableCellRange().getTableCells().forEach((cell)=> {
102 |         texts.push(cell.getText());
103 |       });
104 |       break;
105 |     case SlidesApp.SelectionType.TEXT:
106 |       selection.getPageElementRange().getPageElements().forEach((element) =>{
107 |         texts.push(element.asShape().getText());
108 |       });
109 |       break;
110 |   }
111 | 
112 |   // Translate all elements in-place.
113 |   texts.forEach((text)=> {
114 |     text.setText(LanguageApp.translate(text.asRenderedString(), '', targetLanguage));
115 |   });
116 | 
117 |   return texts.length;
118 | }
119 | // [END apps_script_slides_translate_quickstart]
120 | 


--------------------------------------------------------------------------------
/solutions/add-on/book-smartchip/Code.js:
--------------------------------------------------------------------------------
 1 | function getBook(id) {
 2 |   const apiKey = 'YOUR_API_KEY'; // Replace with your API key
 3 |   const apiEndpoint = `https://www.googleapis.com/books/v1/volumes/${id}?key=${apiKey}&country=US`;
 4 |   const response = UrlFetchApp.fetch(apiEndpoint);
 5 |   return JSON.parse(response);
 6 | }
 7 | 
 8 | function bookLinkPreview(event) {
 9 |  if (event.docs.matchedUrl.url) {
10 |     const segments = event.docs.matchedUrl.url.split('/');
11 |     const volumeID = segments[segments.length - 1];
12 | 
13 |     const bookData = getBook(volumeID);
14 |     const bookTitle = bookData.volumeInfo.title;
15 |     const bookDescription = bookData.volumeInfo.description;
16 |     const bookImage = bookData.volumeInfo.imageLinks.small;
17 |     const bookAuthors = bookData.volumeInfo.authors;
18 |     const bookPageCount = bookData.volumeInfo.pageCount;
19 | 
20 |     const previewHeader = CardService.newCardHeader()
21 |       .setSubtitle('By ' + bookAuthors)
22 |       .setTitle(bookTitle);
23 | 
24 |     const previewPages = CardService.newDecoratedText()
25 |       .setTopLabel('Page count')
26 |       .setText(bookPageCount);
27 |     
28 |     const previewDescription = CardService.newDecoratedText()
29 |       .setTopLabel('About this book')
30 |       .setText(bookDescription).setWrapText(true);
31 | 
32 |     const previewImage = CardService.newImage()
33 |       .setAltText('Image of book cover')
34 |       .setImageUrl(bookImage);
35 | 
36 |     const buttonBook = CardService.newTextButton()
37 |       .setText('View book')
38 |       .setOpenLink(CardService.newOpenLink()
39 |         .setUrl(event.docs.matchedUrl.url));
40 | 
41 |     const cardSectionBook = CardService.newCardSection()
42 |       .addWidget(previewImage)
43 |       .addWidget(previewPages)
44 |       .addWidget(CardService.newDivider())
45 |       .addWidget(previewDescription)
46 |       .addWidget(buttonBook);
47 | 
48 |     return CardService.newCardBuilder()
49 |     .setHeader(previewHeader)
50 |     .addSection(cardSectionBook)
51 |     .build();
52 |   }
53 | }
54 | 


--------------------------------------------------------------------------------
/solutions/add-on/book-smartchip/README.md:
--------------------------------------------------------------------------------
1 | # Preview links from Google Books with smart chips
2 | 
3 | See 
4 | https://developers.google.com/workspace/add-ons/samples/preview-links-google-books
5 | for additional details.
6 | 


--------------------------------------------------------------------------------
/solutions/add-on/share-macro/Code.js:
--------------------------------------------------------------------------------
  1 | // To learn how to use this script, refer to the documentation:
  2 | // https://developers.devsite.corp.google.com/apps-script/add-ons/share-macro
  3 | 
  4 | /*
  5 | Copyright 2022 Google LLC
  6 | 
  7 | Licensed under the Apache License, Version 2.0 (the "License");
  8 | you may not use this file except in compliance with the License.
  9 | You may obtain a copy of the License at
 10 | 
 11 |     https://www.apache.org/licenses/LICENSE-2.0
 12 | 
 13 | Unless required by applicable law or agreed to in writing, software
 14 | distributed under the License is distributed on an "AS IS" BASIS,
 15 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 16 | See the License for the specific language governing permissions and
 17 | limitations under the License.
 18 | */
 19 | 
 20 | /**
 21 |  * Uses Apps Script API to copy source Apps Script project 
 22 |  * to destination Google Spreadsheet container.
 23 |  * 
 24 |  * @param {string} sourceScriptId - Script ID of the source project.
 25 |  * @param {string} targetSpreadsheetUrl - URL if the target spreadsheet.
 26 |  */
 27 | function shareMacro_(sourceScriptId, targetSpreadsheetUrl) {
 28 | 
 29 |   // Gets the source project content using the Apps Script API.
 30 |   const sourceProject = APPS_SCRIPT_API.get(sourceScriptId);
 31 |   const sourceFiles = APPS_SCRIPT_API.getContent(sourceScriptId);
 32 | 
 33 |   // Opens the target spreadsheet and gets its ID.
 34 |   const parentSSId = SpreadsheetApp.openByUrl(targetSpreadsheetUrl).getId();
 35 | 
 36 |   // Creates an Apps Script project that's bound to the target spreadsheet.
 37 |   const targetProjectObj = APPS_SCRIPT_API.create(sourceProject.title, parentSSId);
 38 | 
 39 |   // Updates the Apps Script project with the source project content.
 40 |   APPS_SCRIPT_API.updateContent(targetProjectObj.scriptId, sourceFiles);
 41 | 
 42 | }
 43 | 
 44 | /**
 45 |  * Function that encapsulates Apps Script API project manipulation. 
 46 | */
 47 | const APPS_SCRIPT_API = {
 48 |   accessToken: ScriptApp.getOAuthToken(),
 49 | 
 50 |   /* APPS_SCRIPT_API.get
 51 |    * Gets Apps Script source project.
 52 |    * @param {string} scriptId - Script ID of the source project.
 53 |    * @return {Object} - JSON representation of source project.
 54 |    */
 55 |   get: function (scriptId) {
 56 |     const url = ('https://script.googleapis.com/v1/projects/' + scriptId);
 57 |     const options = {
 58 |       "method": 'get',
 59 |       "headers": {
 60 |         "Authorization": "Bearer " + this.accessToken
 61 |       },
 62 |       "muteHttpExceptions": true,
 63 |     };
 64 |     const res = UrlFetchApp.fetch(url, options);
 65 |     if (res.getResponseCode() == 200) {
 66 |       return JSON.parse(res);
 67 |     } else {
 68 |       console.log('An error occurred gettting the project details');
 69 |       console.log(res.getResponseCode());
 70 |       console.log(res.getContentText());
 71 |       console.log(res);
 72 |       return false;
 73 |     }
 74 |   },
 75 | 
 76 |   /* APPS_SCRIPT_API.create
 77 |    * Creates new Apps Script project in the target spreadsheet.
 78 |    * @param {string} title - Name of Apps Script project.
 79 |    * @param {string} parentId - Internal ID of target spreadsheet.
 80 |    * @return {Object} - JSON representation completed project creation.
 81 |    */
 82 |   create: function (title, parentId) {
 83 |     const url = 'https://script.googleapis.com/v1/projects';
 84 |     const options = {
 85 |       "headers": {
 86 |         "Authorization": "Bearer " + this.accessToken,
 87 |         "Content-Type": "application/json"
 88 |       },
 89 |       "muteHttpExceptions": true,
 90 |       "method": "POST",
 91 |       "payload": { "title": title }
 92 |     }
 93 |     if (parentId) {
 94 |       options.payload.parentId = parentId;
 95 |     }
 96 |     options.payload = JSON.stringify(options.payload);
 97 |     let res = UrlFetchApp.fetch(url, options);
 98 |     if (res.getResponseCode() == 200) {
 99 |       res = JSON.parse(res);
100 |       return res;
101 |     } else {
102 |       console.log("An error occurred while creating the project");
103 |       console.log(res.getResponseCode());
104 |       console.log(res.getContentText());
105 |       console.log(res);
106 |       return false;
107 |     }
108 |   },
109 |    /* APPS_SCRIPT_API.getContent
110 |    * Gets the content of the source Apps Script project.
111 |    * @param {string} scriptId - Script ID of the source project.
112 |    * @return {Object} - JSON representation of Apps Script project content.
113 |    */
114 |    getContent: function (scriptId) {
115 |     const url = "https://script.googleapis.com/v1/projects/" + scriptId + "/content";
116 |     const options = {
117 |       "method": 'get',
118 |       "headers": {
119 |         "Authorization": "Bearer " + this.accessToken
120 |       },
121 |       "muteHttpExceptions": true,
122 |     };
123 |     let res = UrlFetchApp.fetch(url, options);
124 |     if (res.getResponseCode() == 200) {
125 |       res = JSON.parse(res);
126 |       return res['files'];
127 |     } else {
128 |       console.log('An error occurred obtaining the content from the source script');
129 |       console.log(res.getResponseCode());
130 |       console.log(res.getContentText());
131 |       console.log(res);
132 |       return false;
133 |     }
134 |   },
135 | 
136 |   /* APPS_SCRIPT_API.updateContent
137 |    * Updates (copies) content from source to target Apps Script project.
138 |    * @param {string} scriptId - Script ID of the source project.
139 |    * @param {Object} files - JSON representation of Apps Script project content.
140 |    * @return {boolean} - Result status of the function.
141 |    */
142 |   updateContent: function (scriptId, files) {
143 |     const url = "https://script.googleapis.com/v1/projects/" + scriptId + "/content";
144 |     const options = {
145 |       "method": 'put',
146 |       "headers": {
147 |         "Authorization": "Bearer " + this.accessToken
148 |       },
149 |       "contentType": "application/json",
150 |       "payload": JSON.stringify({ "files": files }),
151 |       "muteHttpExceptions": true,
152 |     };
153 |     let res = UrlFetchApp.fetch(url, options);
154 |     if (res.getResponseCode() == 200) {
155 |       return true;
156 |     } else {
157 |       console.log(`An error occurred updating content of script ${scriptId}`);
158 |       console.log(res.getResponseCode());
159 |       console.log(res.getContentText());
160 |       console.log(res);
161 |       return false;
162 |     }
163 |   }
164 | }
165 | 


--------------------------------------------------------------------------------
/solutions/add-on/share-macro/README.md:
--------------------------------------------------------------------------------
1 | # Copy macros to other spreadsheets
2 | 
3 | See [developers.google.com](https://developers.google.com/apps-script/add-ons/share-macro) for additional details.
4 | 
5 | 


--------------------------------------------------------------------------------
/solutions/add-on/share-macro/UI.js:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright 2022 Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *      http://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | 
 17 | // Change application logo here (and in manifest) as desired.
 18 | const ADDON_LOGO = 'https://www.gstatic.com/images/branding/product/2x/apps_script_48dp.png';
 19 | 
 20 | /**
 21 |  * Callback function for rendering the main card.
 22 |  * @return {CardService.Card} The card to show the user.
 23 |  */
 24 | function onHomepage(e) {
 25 |   return createSelectionCard(e);
 26 | }
 27 | 
 28 | /**
 29 |  * Builds the primary card interface used to collect user inputs.
 30 |  * 
 31 |  * @param {Object} e - Add-on event object.
 32 |  * @param {string} sourceScriptId - Script ID of the source project.
 33 |  * @param {string} targetSpreadsheetUrl - URL of the target spreadsheet.
 34 |  * @param {string[]} errors - Array of error messages. 
 35 |  * 
 36 |  * @return {CardService.Card} The card to show to the user for inputs.
 37 |  */
 38 | function createSelectionCard(e, sourceScriptId, targetSpreadsheetUrl, errors) {
 39 | 
 40 |   // Configures card header.
 41 |   let cardHeader = CardService.newCardHeader()
 42 |     .setTitle('Share macros with other spreadheets!')
 43 |     .setImageUrl(ADDON_LOGO)
 44 |     .setImageStyle(CardService.ImageStyle.SQUARE);
 45 | 
 46 |   // If form errors exist, configures section with error messages.
 47 |   let showErrors = false;
 48 | 
 49 |   if (errors && errors.length) {
 50 |     showErrors = true;
 51 |     let msg = errors.reduce((str, err) => `${str}• ${err}<br>`, '');
 52 |     msg = `<b>Form submission errors:</b><br><font color="#ba0000">${msg}</font>`;
 53 | 
 54 |     // Builds error message section.
 55 |     sectionErrors = CardService.newCardSection()
 56 |       .addWidget(CardService.newDecoratedText()
 57 |         .setText(msg)
 58 |         .setWrapText(true));
 59 |   }
 60 | 
 61 |   // Configures source project section.
 62 |   let sectionSource = CardService.newCardSection()
 63 |     .addWidget(CardService.newDecoratedText()
 64 |       .setText('<b>Source macro</b><br>The Apps Script project to copy'))
 65 | 
 66 |     .addWidget(CardService.newTextInput()
 67 |       .setFieldName('sourceScriptId')
 68 |       .setValue(sourceScriptId || '')
 69 |       .setTitle('Script ID of the source macro')
 70 |       .setHint('You must have at least edit permission for the source spreadsheet to access its script project'))
 71 | 
 72 |     .addWidget(CardService.newTextButton()
 73 |       .setText('Find the script ID')
 74 |       .setOpenLink(CardService.newOpenLink()
 75 |         .setUrl('https://developers.google.com/apps-script/api/samples/execute')
 76 |         .setOpenAs(CardService.OpenAs.FULL_SIZE)
 77 |         .setOnClose(CardService.OnClose.NOTHING)));
 78 | 
 79 |   // Configures target spreadsheet section.
 80 |   let sectionTarget = CardService.newCardSection()
 81 |     .addWidget(CardService.newDecoratedText()
 82 |       .setText('<b>Target spreadsheet</b>'))
 83 | 
 84 |     .addWidget(CardService.newTextInput()
 85 |       .setFieldName('targetSpreadsheetUrl')
 86 |       .setValue(targetSpreadsheetUrl || '')
 87 |       .setHint('You must have at least edit permission for the target spreadsheet')
 88 |       .setTitle('Target spreadsheet URL'));
 89 | 
 90 |   // Configures help section.
 91 |   let sectionHelp = CardService.newCardSection()
 92 |     .addWidget(CardService.newDecoratedText()
 93 |       .setText('<b><font color=#c80000>NOTE: </font></b>' +
 94 |         'The Apps Script API must be turned on.')
 95 |       .setWrapText(true))
 96 | 
 97 |     .addWidget(CardService.newTextButton()
 98 |       .setText('Turn on Apps Script API')
 99 |       .setOpenLink(CardService.newOpenLink()
100 |         .setUrl('https://script.google.com/home/usersettings')
101 |         .setOpenAs(CardService.OpenAs.FULL_SIZE)
102 |         .setOnClose(CardService.OnClose.NOTHING)));
103 | 
104 |   // Configures card footer with action to copy the macro.
105 |   var cardFooter = CardService.newFixedFooter()
106 |     .setPrimaryButton(CardService.newTextButton()
107 |       .setText('Share macro')
108 |       .setOnClickAction(CardService.newAction()
109 |         .setFunctionName('onClickFunction_')));
110 | 
111 |   // Begins building the card.
112 |   let builder = CardService.newCardBuilder()
113 |     .setHeader(cardHeader);
114 | 
115 |   // Adds error section if applicable.
116 |   if (showErrors) {
117 |     builder.addSection(sectionErrors)
118 |   }
119 | 
120 |   // Adds final sections & footer.
121 |   builder
122 |     .addSection(sectionSource)
123 |     .addSection(sectionTarget)
124 |     .addSection(sectionHelp)
125 |     .setFixedFooter(cardFooter);
126 | 
127 |   return builder.build();
128 | }
129 | 
130 | /**
131 |  * Action handler that validates user inputs and calls shareMacro_
132 |  * function to copy Apps Script project to target spreadsheet.
133 |  * 
134 |  * @param {Object} e - Add-on event object.
135 |  * 
136 |  * @return {CardService.Card} Responds with either a success or error card.
137 |  */
138 | function onClickFunction_(e) {
139 | 
140 |   const sourceScriptId = e.formInput.sourceScriptId;
141 |   const targetSpreadsheetUrl = e.formInput.targetSpreadsheetUrl;
142 | 
143 |   // Validates inputs for errors.
144 |   const errors = [];
145 | 
146 |   // Pushes an error message if the Script ID parameter is missing.
147 |   if (!sourceScriptId) {
148 |     errors.push('Missing script ID');
149 |   } else {
150 | 
151 |     // Gets the Apps Script project if the Script ID parameter is valid.
152 |     const sourceProject = APPS_SCRIPT_API.get(sourceScriptId);
153 |     if (!sourceProject) {
154 |       // Pushes an error message if the Script ID parameter isn't valid.
155 |       errors.push('Invalid script ID');
156 |     }
157 |   }
158 | 
159 |   // Pushes an error message if the spreadsheet URL is missing.
160 |   if (!targetSpreadsheetUrl) {
161 |     errors.push('Missing Spreadsheet URL');
162 |   } else
163 |     try {
164 |       // Tests for valid spreadsheet URL to get the spreadsheet ID.
165 |       const ssId = SpreadsheetApp.openByUrl(targetSpreadsheetUrl).getId();
166 |     } catch (err) {
167 |       // Pushes an error message if the spreadsheet URL parameter isn't valid.
168 |       errors.push('Invalid spreadsheet URL');
169 |     }
170 | 
171 |   if (errors && errors.length) {
172 |     // Redisplays form if inputs are missing or invalid.
173 |     return createSelectionCard(e, sourceScriptId, targetSpreadsheetUrl, errors);
174 | 
175 |   } else {
176 |     // Calls shareMacro function to copy the project.
177 |     shareMacro_(sourceScriptId, targetSpreadsheetUrl);
178 | 
179 |     // Creates a success card to display to users.
180 |     return buildSuccessCard(e, targetSpreadsheetUrl);
181 |   }
182 | }
183 | 
184 | /**
185 |  * Builds success card to inform user & let them open the spreadsheet.
186 |  * 
187 |  * @param {Object} e - Add-on event object.
188 |  * @param {string} targetSpreadsheetUrl - URL of the target spreadsheet.
189 |  * 
190 |  * @return {CardService.Card} Returns success card.
191 |  */function buildSuccessCard(e, targetSpreadsheetUrl) {
192 | 
193 |   // Configures card header.
194 |   let cardHeader = CardService.newCardHeader()
195 |     .setTitle('Share macros with other spreadsheets!')
196 |     .setImageUrl(ADDON_LOGO)
197 |     .setImageStyle(CardService.ImageStyle.SQUARE);
198 |   
199 |   // Configures card body section with success message and open button.
200 |   let sectionBody1 = CardService.newCardSection()
201 |     .addWidget(CardService.newTextParagraph()
202 |       .setText('Sharing process is complete!'))
203 |     .addWidget(CardService.newTextButton()
204 |       .setText('Open spreadsheet')
205 |       .setOpenLink(CardService.newOpenLink()
206 |         .setUrl(targetSpreadsheetUrl)
207 |         .setOpenAs(CardService.OpenAs.FULL_SIZE)
208 |         .setOnClose(CardService.OnClose.RELOAD_ADD_ON)));
209 |   let sectionBody2 = CardService.newCardSection()
210 |     .addWidget(CardService.newTextParagraph()
211 |       .setText('If you don\'t see the copied project in your target spreadsheet,' +
212 |        ' make sure you turned on the Apps Script API in the Apps Script dashboard.'))
213 |     .addWidget(CardService.newTextButton()
214 |       .setText("Check API")
215 |       .setOpenLink(CardService.newOpenLink()
216 |         .setUrl('https://script.google.com/home/usersettings')
217 |         .setOpenAs(CardService.OpenAs.FULL_SIZE)
218 |         .setOnClose(CardService.OnClose.RELOAD_ADD_ON)));
219 | 
220 |   // Configures the card footer with action to start new process.
221 |   let cardFooter = CardService.newFixedFooter()
222 |     .setPrimaryButton(CardService.newTextButton()
223 |       .setText('Share another')
224 |       .setOnClickAction(CardService.newAction()
225 |         .setFunctionName('onHomepage')));
226 | 
227 |   return builder = CardService.newCardBuilder()
228 |     .setHeader(cardHeader)
229 |     .addSection(sectionBody1)
230 |     .addSection(sectionBody2)
231 |     .setFixedFooter(cardFooter)
232 |     .build();
233 |  }


--------------------------------------------------------------------------------
/solutions/attendance-chat-app/README.md:
--------------------------------------------------------------------------------
 1 | # Attendance Chat App
 2 | 
 3 | This code sample shows how to build a Google Chat app using Google
 4 | Apps Script. The Chat app responds to messages in a space or direct message (DM) and
 5 | allows the user to set a vacation responder in Gmail or add an all-day event to
 6 | their Calendar from Google Chat.
 7 | 
 8 | ## Usage
 9 | 
10 | You can follow [this codelab](https://developers.google.com/codelabs/chat-apps-script)
11 | to build and test this Chat app.
12 | 
13 | To use this Chat app, you must enable the Hangouts Chat API in the
14 | [Google API Console](https://console.developers.google.com/). After enabling
15 | the API, configuring the Chat app, and publishing it, you must add the Chat app to a space
16 | or DM to begin a conversation.
17 | 
18 | For more information about how to publish a Chat app, see
19 | [Publishing Google Chat apps](https://developers.google.com/workspace/chat/apps-publish).
20 | 
21 | ## Disclaimer
22 | 
23 | This is not an official product.
24 | 


--------------------------------------------------------------------------------
/solutions/attendance-chat-app/final/Code.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Responds to an ADDED_TO_SPACE event in Google Chat.
  3 |  * @param {object} event the event object from Google Chat
  4 |  * @return {object} JSON-formatted response
  5 |  * @see https://developers.google.com/workspace/chat/receive-respond-interactions
  6 |  */
  7 | function onAddToSpace(event) {
  8 |   console.info(event);
  9 |   var message = 'Thank you for adding me to ';
 10 |   if (event.space.type === 'DM') {
 11 |     message += 'a DM, ' + event.user.displayName + '!';
 12 |   } else {
 13 |     message += event.space.displayName;
 14 |   }
 15 |   return { text: message };
 16 | }
 17 | 
 18 | /**
 19 |  * Responds to a REMOVED_FROM_SPACE event in Google Chat.
 20 |  * @param {object} event the event object from Google Chat
 21 |  * @see https://developers.google.com/workspace/chat/receive-respond-interactions
 22 |  */
 23 | function onRemoveFromSpace(event) {
 24 |   console.info(event);
 25 |   console.log('Chat app removed from ', event.space.name);
 26 | }
 27 | 
 28 | var DEFAULT_IMAGE_URL = 'https://goo.gl/bMqzYS';
 29 | var HEADER = {
 30 |   header: {
 31 |     title : 'Attendance Chat app',
 32 |     subtitle : 'Log your vacation time',
 33 |     imageUrl : DEFAULT_IMAGE_URL
 34 |   }
 35 | };
 36 | 
 37 | /**
 38 |  * Creates a card-formatted response.
 39 |  * @param {object} widgets the UI components to send
 40 |  * @return {object} JSON-formatted response
 41 |  */
 42 | function createCardResponse(widgets) {
 43 |   return {
 44 |     cards: [HEADER, {
 45 |       sections: [{
 46 |         widgets: widgets
 47 |       }]
 48 |     }]
 49 |   };
 50 | }
 51 | 
 52 | var REASON = {
 53 |   SICK: 'Out sick',
 54 |   OTHER: 'Out of office'
 55 | };
 56 | /**
 57 |  * Responds to a MESSAGE event triggered in Google Chat.
 58 |  * @param {object} event the event object from Google Chat
 59 |  * @return {object} JSON-formatted response
 60 |  */
 61 | function onMessage(event) {
 62 |   console.info(event);
 63 |   var reason = REASON.OTHER;
 64 |   var name = event.user.displayName;
 65 |   var userMessage = event.message.text;
 66 | 
 67 |   // If the user said that they were 'sick', adjust the image in the
 68 |   // header sent in response.
 69 |   if (userMessage.indexOf('sick') > -1) {
 70 |     // Hospital material icon
 71 |     HEADER.header.imageUrl = 'https://goo.gl/mnZ37b';
 72 |     reason = REASON.SICK;
 73 |   } else if (userMessage.indexOf('vacation') > -1) {
 74 |     // Spa material icon
 75 |     HEADER.header.imageUrl = 'https://goo.gl/EbgHuc';
 76 |   }
 77 | 
 78 |   var widgets = [{
 79 |     textParagraph: {
 80 |       text: 'Hello, ' + name + '.<br/>Are you taking time off today?'
 81 |     }
 82 |   }, {
 83 |     buttons: [{
 84 |       textButton: {
 85 |         text: 'Set vacation in Gmail',
 86 |         onClick: {
 87 |           action: {
 88 |             actionMethodName: 'turnOnAutoResponder',
 89 |             parameters: [{
 90 |               key: 'reason',
 91 |               value: reason
 92 |             }]
 93 |           }
 94 |         }
 95 |       }
 96 |     }, {
 97 |       textButton: {
 98 |         text: 'Block out day in Calendar',
 99 |         onClick: {
100 |           action: {
101 |             actionMethodName: 'blockOutCalendar',
102 |             parameters: [{
103 |               key: 'reason',
104 |               value: reason
105 |             }]
106 |           }
107 |         }
108 |       }
109 |     }]
110 |   }];
111 |   return createCardResponse(widgets);
112 | }
113 | 
114 | /**
115 |  * Responds to a CARD_CLICKED event triggered in Google Chat.
116 |  * @param {object} event the event object from Google Chat
117 |  * @return {object} JSON-formatted response
118 |  * @see https://developers.google.com/workspace/chat/receive-respond-interactions
119 |  */
120 | function onCardClick(event) {
121 |   console.info(event);
122 |   var message = '';
123 |   var reason = event.action.parameters[0].value;
124 |   if (event.action.actionMethodName == 'turnOnAutoResponder') {
125 |     turnOnAutoResponder(reason);
126 |     message = 'Turned on vacation settings.';
127 |   } else if (event.action.actionMethodName == 'blockOutCalendar') {
128 |     blockOutCalendar(reason);
129 |     message = 'Blocked out your calendar for the day.';
130 |   } else {
131 |     message = "I'm sorry; I'm not sure which button you clicked.";
132 |   }
133 |   return { text: message };
134 | }
135 | 
136 | var ONE_DAY_MILLIS = 24 * 60 * 60 * 1000;
137 | /**
138 |  * Turns on the user's vacation response for today in Gmail.
139 |  * @param {string} reason the reason for vacation, either REASON.SICK or REASON.OTHER
140 |  */
141 | function turnOnAutoResponder(reason) {
142 |   var currentTime = (new Date()).getTime();
143 |   Gmail.Users.Settings.updateVacation({
144 |     enableAutoReply: true,
145 |     responseSubject: reason,
146 |     responseBodyHtml: "I'm out of the office today; will be back on the next business day.<br><br><i>Created by Attendance Chat app!</i>",
147 |     restrictToContacts: true,
148 |     restrictToDomain: true,
149 |     startTime: currentTime,
150 |     endTime: currentTime + ONE_DAY_MILLIS
151 |   }, 'me');
152 | }
153 | 
154 | /**
155 |  * Places an all-day meeting on the user's Calendar.
156 |  * @param {string} reason the reason for vacation, either REASON.SICK or REASON.OTHER
157 |  */
158 | function blockOutCalendar(reason) {
159 |   CalendarApp.createAllDayEvent(reason, new Date(), new Date(Date.now() + ONE_DAY_MILLIS));
160 | }
161 | 


--------------------------------------------------------------------------------
/solutions/attendance-chat-app/step-3/Code.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Responds to an ADDED_TO_SPACE event
 3 |  * in Google Chat.
 4 |  *
 5 |  * @param event the event object from Google Chat
 6 |  * @return JSON-formatted response
 7 |  */
 8 | function onAddToSpace(event) {
 9 |   console.info(event);
10 | 
11 |   var message = "";
12 | 
13 |   if (event.space.type === "DM") {
14 |     message = "Thank you for adding me to a DM, " +
15 |       event.user.displayName + "!";
16 |   } else {
17 |     message = "Thank you for adding me to " +
18 |       event.space.displayName;
19 |   }
20 | 
21 |   return { "text": message };
22 | }
23 | 
24 | /**
25 |  * Responds to a REMOVED_FROM_SPACE event
26 |  * in Google Chat.
27 |  *
28 |  * @param event the event object from Google Chat
29 |  */
30 | function onRemoveFromSpace(event) {
31 |   console.info(event);
32 |   console.info("Chat app removed from ", event.space.name);
33 | }
34 | 


--------------------------------------------------------------------------------
/solutions/attendance-chat-app/step-4/Code.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Responds to an ADDED_TO_SPACE event
 3 |  * in Google Chat.
 4 |  *
 5 |  * @param event the event object from Google Chat
 6 |  * @return JSON-formatted response
 7 |  */
 8 | function onAddToSpace(event) {
 9 |   console.info(event);
10 | 
11 |   var message = "";
12 | 
13 |   if (event.space.type === "DM") {
14 |     message = "Thank you for adding me to a DM, " +
15 |       event.user.displayName + "!";
16 |   } else {
17 |     message = "Thank you for adding me to " +
18 |       event.space.displayName;
19 |   }
20 | 
21 |   return { "text": message };
22 | }
23 | 
24 | /**
25 |  * Responds to a REMOVED_FROM_SPACE event
26 |  * in Google Chat.
27 |  *
28 |  * @param event the event object from Google Chat
29 |  */
30 | function onRemoveFromSpace(event) {
31 |   console.info(event);
32 |   console.info("Chat app removed from ", event.space.name);
33 | }
34 | 


--------------------------------------------------------------------------------
/solutions/attendance-chat-app/step-5/Code.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Responds to an ADDED_TO_SPACE event
 3 |  * in Google Chat.
 4 |  *
 5 |  * @param event the event object from Google Chat
 6 |  * @return JSON-formatted response
 7 |  */
 8 | function onAddToSpace(event) {
 9 |   console.info(event);
10 | 
11 |   var message = "";
12 | 
13 |   if (event.space.type === "DM") {
14 |     message = "Thank you for adding me to a DM, " +
15 |       event.user.displayName + "!";
16 |   } else {
17 |     message = "Thank you for adding me to " +
18 |       event.space.displayName;
19 |   }
20 | 
21 |   return { "text": message };
22 | }
23 | 
24 | /**
25 |  * Responds to a REMOVED_FROM_SPACE event
26 |  * in Google Chat.
27 |  *
28 |  * @param event the event object from Google Chat
29 |  */
30 | function onRemoveFromSpace(event) {
31 |   console.info(event);
32 |   console.info("Chat app removed from ", event.space.name);
33 | }
34 | 
35 | /**
36 |  * Creates a card-formatted response.
37 |  *
38 |  * @param widgets the UI components to send
39 |  * @return JSON-formatted response
40 |  */
41 | function createCardResponse(widgets) {
42 |   return {
43 |     "cards": [
44 |       header,
45 |       {
46 |         "sections": [{
47 |           "widgets": widgets
48 |         }]
49 |     }]
50 |   };
51 | }
52 | 
53 | /**
54 |  * Responds to a MESSAGE event triggered in Google Chat.
55 |  *
56 |  * @param event the event object from Google Chat
57 |  * @return JSON-formatted response
58 |  */
59 | function onMessage(event) {
60 |   var userMessage = event.message.text;
61 | 
62 |   var widgets = [{
63 |     "textParagraph": {
64 |       "text": "You said: " + userMessage
65 |     }
66 |   }];
67 | 
68 |   return createCardResponse(widgets);
69 | }


--------------------------------------------------------------------------------
/solutions/attendance-chat-app/step-6/Code.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Responds to an ADDED_TO_SPACE event
  3 |  *  in Google Chat.
  4 |  *
  5 |  * @param event the event object from Google Chat
  6 |  * @return JSON-formatted response
  7 |  */
  8 | function onAddToSpace(event) {
  9 |   console.info(event);
 10 | 
 11 |   var message = "";
 12 | 
 13 |   if (event.space.type === "DM") {
 14 |     message = "Thank you for adding me to a DM, " +
 15 |       event.user.displayName + "!";
 16 |   } else {
 17 |     message = "Thank you for adding me to " +
 18 |       event.space.displayName;
 19 |   }
 20 | 
 21 |   return { "text": message };
 22 | }
 23 | 
 24 | /**
 25 |  * Responds to a REMOVED_FROM_SPACE event
 26 |  * in Google Chat.
 27 |  *
 28 |  * @param event the event object from Google Chat
 29 |  */
 30 | function onRemoveFromSpace(event) {
 31 |   console.info(event);
 32 |   console.info("Chat app removed from ", event.space.name);
 33 | }
 34 | 
 35 | var DEFAULT_IMAGE_URL = "https://goo.gl/bMqzYS";
 36 | var header = {
 37 |   "header": {
 38 |     "title" : "Attendance Chat app",
 39 |     "subtitle" : "Log your vacation time",
 40 |     "imageUrl" : DEFAULT_IMAGE_URL
 41 |   }
 42 | };
 43 | 
 44 | /**
 45 |  * Creates a card-formatted response.
 46 |  *
 47 |  * @param widgets the UI components to send
 48 |  * @return JSON-formatted response
 49 |  */
 50 | function createCardResponse(widgets) {
 51 |   return {
 52 |     "cards": [
 53 |       header,
 54 |       {
 55 |         "sections": [{
 56 |           "widgets": widgets
 57 |         }]
 58 |       }]
 59 |   };
 60 | }
 61 | 
 62 | var REASON_SICK = "Out sick";
 63 | var REASON_OTHER = "Out of office";
 64 | 
 65 | /**
 66 |  * Responds to a MESSAGE event triggered in Google Chat.
 67 |  *
 68 |  * @param event the event object from Google Chat
 69 |  * @return JSON-formatted response
 70 |  */
 71 | function onMessage(event) {
 72 |   console.info(event);
 73 | 
 74 |   var reason = REASON_OTHER;
 75 |   var name = event.user.displayName;
 76 |   var userMessage = event.message.text;
 77 | 
 78 |   // If the user said that they were "sick", adjust the image in the
 79 |   // header sent in response.
 80 |   if (userMessage.indexOf("sick") > -1) {
 81 | 
 82 |     // Hospital material icon
 83 |     header.header.imageUrl = "https://goo.gl/mnZ37b";
 84 |     reason = REASON_SICK;
 85 | 
 86 |   } else if (userMessage.indexOf("vacation") > -1) {
 87 | 
 88 |     // Spa material icon
 89 |     header.header.imageUrl = "https://goo.gl/EbgHuc";
 90 |   }
 91 | 
 92 |   var widgets = [{
 93 |       "textParagraph": {
 94 |         "text": "Hello, " + name +
 95 |           ".<br/>Are you taking time off today?"
 96 |       }
 97 |     }, {
 98 |       "buttons": [{
 99 |         "textButton": {
100 |           "text": "Set vacation in Gmail",
101 |           "onClick": {
102 |             "action": {
103 |               "actionMethodName": "turnOnAutoResponder",
104 |               "parameters": [{
105 |                 "key": "reason",
106 |                 "value": reason
107 |               }]
108 |             }
109 |           }
110 |         }
111 |       }, {
112 |         "textButton": {
113 |           "text": "Block out day in Calendar",
114 |           "onClick": {
115 |             "action": {
116 |               "actionMethodName": "blockOutCalendar",
117 |                 "parameters": [{
118 |                   "key": "reason",
119 |                   "value": reason
120 |                 }]
121 |             }
122 |           }
123 |         }
124 |       }]
125 |   }];
126 | 
127 |   return createCardResponse(widgets);
128 | }
129 | 
130 | /**
131 |  * Responds to a CARD_CLICKED event triggered in Google Chat.
132 |  *
133 |  * @param event the event object from Google Chat
134 |  * @return JSON-formatted response
135 |  */
136 | function onCardClick(event) {
137 |   console.info(event);
138 | 
139 |   var message = "";
140 |   var reason = event.action.parameters[0].value;
141 | 
142 |   if (event.action.actionMethodName == "turnOnAutoResponder") {
143 |     turnOnAutoResponder(reason);
144 |     message = "Turned on vacation settings.";
145 |   } else if (event.action.actionMethodName == "blockOutCalendar") {
146 |     blockOutCalendar(reason);
147 |     message = "Blocked out your calendar for the day.";
148 |   } else {
149 |     message = "I'm sorry; I'm not sure which button you clicked.";
150 |   }
151 | 
152 |   return { "text": message };
153 | }
154 | 
155 | var ONE_DAY_MILLIS = 24 * 60 * 60 * 1000;
156 | 
157 | /**
158 |  * Turns on the user's vacation response for today in Gmail.
159 |  *
160 |  * @param reason the reason for vacation, either REASON_SICK or REASON_OTHER
161 |  */
162 | function turnOnAutoResponder(reason) {
163 |   var currentTime = (new Date()).getTime();
164 | 
165 |   Gmail.Users.Settings.updateVacation({
166 |     "enableAutoReply": true,
167 |     "responseSubject": reason,
168 |     "responseBodyHtml": "I'm out of the office today; will be back on the next business day.<br><br><i>Created by Attendance Chat app!</i>",
169 |     "restrictToContacts": true,
170 |     "restrictToDomain": true,
171 |     "startTime": currentTime,
172 |     "endTime": currentTime + ONE_DAY_MILLIS
173 |   }, "me");
174 | }
175 | 
176 | /**
177 |  * Places an all-day meeting on the user's Calendar.
178 |  *
179 |  * @param reason the reason for vacation, either REASON_SICK or REASON_OTHER
180 |  */
181 | function blockOutCalendar(reason) {
182 |   CalendarApp.createAllDayEvent(reason, new Date(), new Date(Date.now() + ONE_DAY_MILLIS));
183 | }
184 | 


--------------------------------------------------------------------------------
/solutions/automations/agenda-maker/Code.js:
--------------------------------------------------------------------------------
  1 | // To learn how to use this script, refer to the documentation:
  2 | // https://developers.google.com/apps-script/samples/automations/agenda-maker
  3 | 
  4 | /*
  5 | Copyright 2022 Google LLC
  6 | 
  7 | Licensed under the Apache License, Version 2.0 (the "License");
  8 | you may not use this file except in compliance with the License.
  9 | You may obtain a copy of the License at
 10 | 
 11 |     https://www.apache.org/licenses/LICENSE-2.0
 12 | 
 13 | Unless required by applicable law or agreed to in writing, software
 14 | distributed under the License is distributed on an "AS IS" BASIS,
 15 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 16 | See the License for the specific language governing permissions and
 17 | limitations under the License.
 18 | */
 19 | 
 20 | /**
 21 |  * Checks if the folder for Agenda docs exists, and creates it if it doesn't.
 22 |  *
 23 |  * @return {*} Drive folder ID for the app.
 24 |  */
 25 | function checkFolder() {
 26 |   const folders = DriveApp.getFoldersByName('Agenda Maker - App');
 27 |   // Finds the folder if it exists
 28 |   while (folders.hasNext()) {
 29 |     let folder = folders.next();
 30 |     if (
 31 |       folder.getDescription() ==
 32 |         'Apps Script App - Do not change this description' &&
 33 |       folder.getOwner().getEmail() == Session.getActiveUser().getEmail()
 34 |     ) {
 35 |       return folder.getId();
 36 |     }
 37 |   }
 38 |   // If the folder doesn't exist, creates one
 39 |   let folder = DriveApp.createFolder('Agenda Maker - App');
 40 |   folder.setDescription('Apps Script App - Do not change this description');
 41 |   return folder.getId();
 42 | }
 43 | 
 44 | /**
 45 |  * Finds the template agenda doc, or creates one if it doesn't exist.
 46 |  */
 47 | function getTemplateId(folderId) {
 48 |   const folder = DriveApp.getFolderById(folderId);
 49 |   const files = folder.getFilesByName('Agenda TEMPLATE##');
 50 | 
 51 |   // If there is a file, returns the ID.
 52 |   while (files.hasNext()) {
 53 |     const file = files.next();
 54 |     return file.getId();
 55 |   }
 56 | 
 57 |   // Otherwise, creates the agenda template.
 58 |   // You can adjust the default template here
 59 |   const doc = DocumentApp.create('Agenda TEMPLATE##');
 60 |   const body = doc.getBody();
 61 | 
 62 |   body
 63 |       .appendParagraph('##Attendees##')
 64 |       .setHeading(DocumentApp.ParagraphHeading.HEADING1)
 65 |       .editAsText()
 66 |       .setBold(true);
 67 |   body.appendParagraph(' ').editAsText().setBold(false);
 68 | 
 69 |   body
 70 |       .appendParagraph('Overview')
 71 |       .setHeading(DocumentApp.ParagraphHeading.HEADING1)
 72 |       .editAsText()
 73 |       .setBold(true);
 74 |   body.appendParagraph(' ');
 75 |   body.appendParagraph('- Topic 1: ').editAsText().setBold(true);
 76 |   body.appendParagraph(' ').editAsText().setBold(false);
 77 |   body.appendParagraph('- Topic 2: ').editAsText().setBold(true);
 78 |   body.appendParagraph(' ').editAsText().setBold(false);
 79 |   body.appendParagraph('- Topic 3: ').editAsText().setBold(true);
 80 |   body.appendParagraph(' ').editAsText().setBold(false);
 81 | 
 82 |   body
 83 |       .appendParagraph('Next Steps')
 84 |       .setHeading(DocumentApp.ParagraphHeading.HEADING1)
 85 |       .editAsText()
 86 |       .setBold(true);
 87 |   body.appendParagraph('- Takeaway 1: ').editAsText().setBold(true);
 88 |   body.appendParagraph('- Responsible: ').editAsText().setBold(false);
 89 |   body.appendParagraph('- Accountable: ');
 90 |   body.appendParagraph('- Consult: ');
 91 |   body.appendParagraph('- Inform: ');
 92 |   body.appendParagraph(' ');
 93 |   body.appendParagraph('- Takeaway 2: ').editAsText().setBold(true);
 94 |   body.appendParagraph('- Responsible: ').editAsText().setBold(false);
 95 |   body.appendParagraph('- Accountable: ');
 96 |   body.appendParagraph('- Consult: ');
 97 |   body.appendParagraph('- Inform: ');
 98 |   body.appendParagraph(' ');
 99 |   body.appendParagraph('- Takeaway 3: ').editAsText().setBold(true);
100 |   body.appendParagraph('- Responsible: ').editAsText().setBold(false);
101 |   body.appendParagraph('- Accountable: ');
102 |   body.appendParagraph('- Consult: ');
103 |   body.appendParagraph('- Inform: ');
104 |   
105 |   doc.saveAndClose();
106 | 
107 |   folder.addFile(DriveApp.getFileById(doc.getId()));
108 | 
109 |   return doc.getId();
110 | }
111 | 
112 | /**
113 |  * When there is a change to the calendar, searches for events that include "#agenda"
114 |  * in the decrisption.
115 |  *
116 |  */
117 | function onCalendarChange() {
118 |   // Gets recent events with the #agenda tag
119 |   const now = new Date();
120 |   const events = CalendarApp.getEvents(
121 |       now,
122 |       new Date(now.getTime() + 2 * 60 * 60 * 1000000),
123 |       {search: '#agenda'},
124 |   );
125 | 
126 |   const folderId = checkFolder();
127 |   const templateId = getTemplateId(folderId);
128 | 
129 |   const folder = DriveApp.getFolderById(folderId);
130 | 
131 |   // Loops through any events found
132 |   for (i = 0; i < events.length; i++) {
133 |     const event = events[i];
134 | 
135 |     // Confirms whether the event has the #agenda tag
136 |     let description = event.getDescription();
137 |     if (description.search('#agenda') == -1) continue;
138 | 
139 |     // Only works with events created by the owner of this calendar
140 |     if (event.isOwnedByMe()) {
141 |       // Creates a new document from the template for an agenda for this event
142 |       const newDoc = DriveApp.getFileById(templateId).makeCopy();
143 |       newDoc.setName('Agenda for ' + event.getTitle());
144 | 
145 |       const file = DriveApp.getFileById(newDoc.getId());
146 |       folder.addFile(file);
147 | 
148 |       const doc = DocumentApp.openById(newDoc.getId());
149 |       const body = doc.getBody();
150 | 
151 |       // Fills in the template with information about the attendees from the
152 |       // calendar event
153 |       const conf = body.findText('##Attendees##');
154 |       if (conf) {
155 |         const ref = conf.getStartOffset();
156 | 
157 |         for (let i in event.getGuestList()) {
158 |           let guest = event.getGuestList()[i];
159 | 
160 |           body.insertParagraph(ref + 2, guest.getEmail());
161 |         }
162 |         body.replaceText('##Attendees##', 'Attendees');
163 |       }
164 | 
165 |       // Replaces the tag with a link to the agenda document
166 |       const agendaUrl = 'https://docs.google.com/document/d/' + newDoc.getId();
167 |       description = description.replace(
168 |           '#agenda',
169 |           '<a href=' + agendaUrl + '>Agenda Doc</a>',
170 |       );
171 |       event.setDescription(description);
172 | 
173 |       // Invites attendees to the Google doc so they automatically receive access to the agenda
174 |       newDoc.addEditor(newDoc.getOwner());
175 | 
176 |       for (let i in event.getGuestList()) {
177 |         let guest = event.getGuestList()[i];
178 | 
179 |         newDoc.addEditor(guest.getEmail());
180 |       }
181 |     }
182 |   }
183 |   return;
184 | }
185 | 
186 | /**
187 |  * Creates an event-driven trigger that fires whenever there's a change to the calendar.
188 |  */
189 | function setUp() {
190 |   let email = Session.getActiveUser().getEmail();
191 |   ScriptApp.newTrigger("onCalendarChange").forUserCalendar(email).onEventUpdated().create();
192 | }
193 | 


--------------------------------------------------------------------------------
/solutions/automations/agenda-maker/README.md:
--------------------------------------------------------------------------------
1 | # Make an agenda for meetings
2 | 
3 | See [developers.google.com](https://developers.google.com/apps-script/samples/automations/agenda-maker) for additional details.
4 | 


--------------------------------------------------------------------------------
/solutions/automations/aggregate-document-content/Code.js:
--------------------------------------------------------------------------------
  1 | // To learn how to use this script, refer to the documentation:
  2 | // https://developers.google.com/apps-script/samples/automations/aggregate-document-content
  3 | 
  4 | /*
  5 | Copyright 2022 Google LLC
  6 | 
  7 | Licensed under the Apache License, Version 2.0 (the "License");
  8 | you may not use this file except in compliance with the License.
  9 | You may obtain a copy of the License at
 10 | 
 11 |     https://www.apache.org/licenses/LICENSE-2.0
 12 | 
 13 | Unless required by applicable law or agreed to in writing, software
 14 | distributed under the License is distributed on an "AS IS" BASIS,
 15 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 16 | See the License for the specific language governing permissions and
 17 | limitations under the License.
 18 | */
 19 | 
 20 | /** 
 21 |  * This file containts the main application functions that import data from
 22 |  * summary documents into the body of the main document.
 23 |  */
 24 | 
 25 | // Application constants
 26 | const APP_TITLE = 'Document summary importer'; // Application name
 27 | const PROJECT_FOLDER_NAME = 'Project statuses'; // Drive folder for the source files.
 28 | 
 29 | // Below are the parameters used to identify which content to import from the source documents
 30 | // and which content has already been imported.
 31 | const FIND_TEXT_KEYWORDS = 'Summary'; // String that must be found in the heading above the table (case insensitive).
 32 | const APP_STYLE = DocumentApp.ParagraphHeading.HEADING3; // Style that must be applied to heading above the table.
 33 | const TEXT_COLOR = '#2e7d32'; // Color applied to heading after import to avoid duplication.
 34 | 
 35 | /**
 36 |  * Updates the main document, importing content from the source files.
 37 |  * Uses the above parameters to locate content to be imported.
 38 |  * 
 39 |  * Called from menu option.
 40 |  */
 41 | function performImport() {
 42 |   // Gets the folder in Drive associated with this application.
 43 |   const folder = getFolderByName_(PROJECT_FOLDER_NAME);
 44 |   // Gets the Google Docs files found in the folder. 
 45 |   const files = getFiles(folder);
 46 | 
 47 |   // Warns the user if the folder is empty.
 48 |   const ui = DocumentApp.getUi();
 49 |   if (files.length === 0) {
 50 |     const msg =
 51 |       `No files found in the folder '${PROJECT_FOLDER_NAME}'.
 52 |       Run '${MENU.SETUP}' | '${MENU.SAMPLES}' from the menu
 53 |       if you'd like to create samples files.`
 54 |     ui.alert(APP_TITLE, msg, ui.ButtonSet.OK);
 55 |     return;
 56 |   }
 57 | 
 58 |   /** Processes main document */
 59 |   // Gets the active document and body section.
 60 |   const docTarget = DocumentApp.getActiveDocument();
 61 |   const docTargetBody = docTarget.getBody();
 62 | 
 63 |   // Appends import summary section to the end of the target document. 
 64 |   // Adds a horizontal line and a header with today's date and a title string.
 65 |   docTargetBody.appendHorizontalRule();
 66 |   const dateString = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), 'MMMM dd, yyyy');
 67 |   const headingText = `Imported: ${dateString}`;
 68 |   docTargetBody.appendParagraph(headingText).setHeading(APP_STYLE);
 69 |   // Appends a blank paragraph for spacing.
 70 |   docTargetBody.appendParagraph(" ");
 71 | 
 72 |   /** Process source documents */
 73 |   // Iterates through each source document in the folder.
 74 |   // Copies and pastes new updates to the main document.
 75 |   let noContentList = [];
 76 |   let numUpdates = 0;
 77 |   for (let id of files) {
 78 | 
 79 |     // Opens source document; get info and body.
 80 |     const docOpen = DocumentApp.openById(id);
 81 |     const docName = docOpen.getName();
 82 |     const docHtml = docOpen.getUrl();
 83 |     const docBody = docOpen.getBody();
 84 | 
 85 |     // Gets summary content from document and returns as object {content:content}
 86 |     const content = getContent(docBody);
 87 | 
 88 |     // Logs if document doesn't contain content to be imported.
 89 |     if (!content) {
 90 |       noContentList.push(docName);
 91 |       continue;
 92 |     }
 93 |     else {
 94 |       numUpdates++
 95 |       // Inserts content into the main document.
 96 |       // Appends a title/url reference link back to source document.
 97 |       docTargetBody.appendParagraph('').appendText(`${docName}`).setLinkUrl(docHtml);
 98 |       // Appends a single-cell table and pastes the content.
 99 |       docTargetBody.appendTable(content);
100 |     }
101 |     docOpen.saveAndClose()
102 |   }
103 |   /** Provides an import summary */
104 |   docTarget.saveAndClose();
105 |   let msg = `Number of documents updated: ${numUpdates}`
106 |   if (noContentList.length != 0) {
107 |     msg += `\n\nThe following documents had no updates:`
108 |     for (let file of noContentList) {
109 |       msg += `\n ${file}`;
110 |     }
111 |   }
112 |   ui.alert(APP_TITLE, msg, ui.ButtonSet.OK);
113 | }
114 | 
115 | /**
116 |  * Updates the main document drawing content from source files.
117 |  * Uses the parameters at the top of this file to locate content to import.
118 |  * 
119 |  * Called from performImport().
120 |  */
121 | function getContent(body) {
122 | 
123 |   // Finds the heading paragraph with matching style, keywords and !color.
124 |   var parValidHeading;
125 |   const searchType = DocumentApp.ElementType.PARAGRAPH;
126 |   const searchHeading = APP_STYLE;
127 |   let searchResult = null;
128 | 
129 |   // Gets and loops through all paragraphs that match the style of APP_STYLE.
130 |   while (searchResult = body.findElement(searchType, searchResult)) {
131 |     let par = searchResult.getElement().asParagraph();
132 |     if (par.getHeading() == searchHeading) {
133 |       // If heading style matches, searches for text string (case insensitive).
134 |       let findPos = par.findText('(?i)' + FIND_TEXT_KEYWORDS);
135 |       if (findPos !== null) {
136 | 
137 |         // If text color is green, then the paragraph isn't a new summary to copy.
138 |         if (par.editAsText().getForegroundColor() != TEXT_COLOR) {
139 |           parValidHeading = par;
140 |         }
141 |       }
142 |     }
143 |   }
144 | 
145 |   if (!parValidHeading) {
146 |     return;
147 |   } else {
148 |     // Updates the heading color to indicate that the summary has been imported.     
149 |     let style = {};
150 |     style[DocumentApp.Attribute.FOREGROUND_COLOR] = TEXT_COLOR;
151 |     parValidHeading.setAttributes(style);
152 |     parValidHeading.appendText(" [Exported]");
153 | 
154 |     // Gets the content from the table following the valid heading.
155 |     let elemObj = parValidHeading.getNextSibling().asTable();
156 |     let content = elemObj.copy();
157 | 
158 |     return content;
159 |   }
160 | }
161 | 
162 | /**
163 |  * Gets the IDs of the Docs files within the folder that contains source files.
164 |  * 
165 |  * Called from function performImport().
166 |  */
167 | function getFiles(folder) {
168 |   // Only gets Docs files.
169 |   const files = folder.getFilesByType(MimeType.GOOGLE_DOCS);
170 |   let docIDs = [];
171 |   while (files.hasNext()) {
172 |     let file = files.next();
173 |     docIDs.push(file.getId());
174 |   }
175 |   return docIDs;
176 | }


--------------------------------------------------------------------------------
/solutions/automations/aggregate-document-content/Menu.js:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright 2022 Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *      http://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | /** 
18 |  * This file contains the functions that build the custom menu.
19 |  */
20 | // Menu constants for easy access to update.
21 | const MENU = {
22 |   NAME: 'Import summaries',
23 |   IMPORT: 'Import summaries',
24 |   SETUP: 'Configure',
25 |   NEW_INSTANCE: 'Setup new instance',
26 |   TEMPLATE: 'Create starter template',
27 |   SAMPLES: 'Run demo setup with sample documents'
28 | }
29 | 
30 | /**
31 |  * Creates custom menu when the document is opened.
32 |  */
33 | function onOpen() {
34 |   const ui = DocumentApp.getUi();
35 |   ui.createMenu(MENU.NAME)
36 |     .addItem(MENU.IMPORT, 'performImport')
37 |     .addSeparator()
38 |     .addSubMenu(ui.createMenu(MENU.SETUP)
39 |       .addItem(MENU.NEW_INSTANCE, 'setupConfig')
40 |       .addItem(MENU.TEMPLATE, 'createSampleFile')
41 |       .addSeparator()
42 |       .addItem(MENU.SAMPLES, 'setupWithSamples'))
43 |     .addItem('About', 'aboutApp')
44 |     .addToUi()
45 | }
46 | 
47 | /**
48 |  * About box for context and contact.
49 |  * TODO: Personalize
50 |  */
51 | function aboutApp() {
52 |   const msg = `
53 |   ${APP_TITLE}
54 |   Version: 1.0
55 |   Contact: <Developer Email goes here>`
56 | 
57 |   const ui = DocumentApp.getUi();
58 |   ui.alert("About this application", msg, ui.ButtonSet.OK);
59 | }
60 | 


--------------------------------------------------------------------------------
/solutions/automations/aggregate-document-content/README.md:
--------------------------------------------------------------------------------
1 | # Aggregate content from multiple documents
2 | 
3 | See [developers.google.com](https://developers.google.com/apps-script/samples/automations/aggregate-document-content) for additional details.
4 | 


--------------------------------------------------------------------------------
/solutions/automations/aggregate-document-content/Setup.js:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright 2022 Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *      http://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | 
 17 | /** 
 18 |  * This file contains functions that create the template and sample documents.
 19 |  */
 20 | 
 21 | /**
 22 |  * Runs full setup configuration, with option to include samples.
 23 |  * 
 24 |  * Called from menu & setupWithSamples()
 25 |  * 
 26 |  * @param {boolean} includeSamples - Optional, if true creates samples files. * 
 27 |  */
 28 | function setupConfig(includeSamples) {
 29 | 
 30 |   // Gets folder to store documents in.
 31 |   const folder = getFolderByName_(PROJECT_FOLDER_NAME)
 32 | 
 33 |   let msg =
 34 |     `\nDrive Folder for Documents: '${PROJECT_FOLDER_NAME}'
 35 |    \nURL: \n${folder.getUrl()}`
 36 | 
 37 |   // Creates sample documents for testing.
 38 |   // Remove sample document creation and add your own process as needed.
 39 |   if (includeSamples) {
 40 |     let filesCreated = 0;
 41 |     for (let doc of samples.documents) {
 42 |       filesCreated += createGoogleDoc(doc, folder, true);
 43 |     }
 44 |     msg += `\n\nFiles Created: ${filesCreated}`
 45 |   }
 46 |   const ui = DocumentApp.getUi();
 47 |   ui.alert(`${APP_TITLE} [Setup]`, msg, ui.ButtonSet.OK);
 48 | 
 49 | }
 50 | 
 51 | /**
 52 |  * Creates a single document instance in the application folder.
 53 |  * Includes import settings already created [Heading | Keywords | Table]
 54 |  * 
 55 |  * Called from menu. 
 56 |  */
 57 | function createSampleFile() {
 58 | 
 59 |   // Creates a new Google Docs document.
 60 |   const templateName = `[Template] ${APP_TITLE}`;
 61 |   const doc = DocumentApp.create(templateName);
 62 |   const docId = doc.getId();
 63 | 
 64 |   const msg = `\nDocument created: '${templateName}'
 65 |   \nURL: \n${doc.getUrl()}`
 66 | 
 67 |   // Adds template content to the body.
 68 |   const body = doc.getBody();
 69 | 
 70 |   body.setText(templateName);
 71 |   body.getParagraphs()[0].setHeading(DocumentApp.ParagraphHeading.TITLE);
 72 |   body.appendParagraph('Description').setHeading(DocumentApp.ParagraphHeading.HEADING1);
 73 |   body.appendParagraph('');
 74 | 
 75 |   const dateString = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), 'MMMM dd, yyyy');
 76 |   body.appendParagraph(`${FIND_TEXT_KEYWORDS} - ${dateString}`).setHeading(APP_STYLE);
 77 |   body.appendTable().appendTableRow().appendTableCell('TL;DR');
 78 |   body.appendParagraph("");
 79 | 
 80 |   // Gets folder to store documents in.
 81 |   const folder = getFolderByName_(PROJECT_FOLDER_NAME)
 82 | 
 83 |   // Moves document to application folder.
 84 |   DriveApp.getFileById(docId).moveTo(folder);
 85 | 
 86 |   const ui = DocumentApp.getUi();
 87 |   ui.alert(`${APP_TITLE} [Template]`, msg, ui.ButtonSet.OK);
 88 | }
 89 | 
 90 | /**
 91 |  * Configures application for demonstration by setting it up with sample documents.
 92 |  * 
 93 |  * Called from menu | Calls setupConfig with option set to true. 
 94 |  */
 95 | function setupWithSamples() {
 96 |   setupConfig(true)
 97 | }
 98 | 
 99 | /** 
100 |  * Sample document names and demo content. 
101 |  * {object} samples[]
102 | */
103 | const samples = {
104 |   'documents': [
105 |     {
106 |       'name': 'Project GHI',
107 |       'description': 'Google Workspace Add-on inventory review.',
108 |       'content': 'Reviewed all of the currently in-use and proposed Google Workspace Add-ons. Will perform an assessment on how we can reduce overlap, reduce licensing costs, and limit security exposures. \n\nNext week\'s goal is to report findings back to the Corp Ops team.'
109 |     },
110 |     {
111 |       'name': 'Project DEF',
112 |       'description': 'Improve IT networks within the main corporate building.',
113 |       'content': 'Primarily focused on 2nd thru 5th floors in the main corporate building evaluating the network infrastructure. Benchmarking tests were performed and results are being analyzed. \n\nWill submit all findings, analysis, and recommendations next week for committee review.'
114 |     },
115 |     {
116 |       'name': 'Project ABC',
117 |       'description': 'Assess existing Google Chromebook inventory and recommend upgrades where necessary.',
118 |       'content': 'Concluded a pilot program with the Customer Service department to perform inventory and update inventory records with Chromebook hardware, Chrome OS versions, and installed apps. \n\nScheduling a work plan and seeking necessary go-forward approvals for next week.'
119 |     },
120 |   ],
121 |   'common': 'This sample document is configured to work with the Import summaries custom menu. For the import to work, the source documents used must contain a specific keyword (currently set to "Summary"). The keyword must reside in a paragraph with a set style (currently set to "Heading 3") that is directly followed by a single-cell table. The table contains the contents to be imported into the primary document.\n\nWhile those rules might seem precise, it\'s how the application programmatically determines what content is meant to be imported and what can be ignored. Once a summary has been imported, the script updates the heading font to a new color (currently set to Green, hex \'#2e7d32\') to ensure the app ignores it in future imports. You can change these settings in the Apps Script code.'
122 | }
123 | 
124 | /**
125 |  * Creates a sample document in application folder.
126 |  * Includes import settings already created [Heading | Keywords | Table].
127 |  * Inserts demo data from samples[].
128 |  * 
129 |  * Called from menu. 
130 |  */
131 | function createGoogleDoc(document, folder, duplicate) {
132 | 
133 |   // Checks for duplicates.
134 |   if (!duplicate) {
135 |     // Doesn't create file of same name if one already exists.
136 |     if (folder.getFilesByName(document.name).hasNext()) {
137 |       return 0 // File not created.
138 |     }
139 |   }
140 | 
141 |   // Creates a new Google Docs document.
142 |   const doc = DocumentApp.create(document.name).setName(document.name);
143 |   const docId = doc.getId();
144 | 
145 |   // Adds boilerplate content to the body.
146 |   const body = doc.getBody();
147 | 
148 |   body.setText(document.name);
149 |   body.getParagraphs()[0].setHeading(DocumentApp.ParagraphHeading.TITLE);
150 |   body.appendParagraph("Description").setHeading(DocumentApp.ParagraphHeading.HEADING1);
151 |   body.appendParagraph(document.description);
152 |   body.appendParagraph("Usage Instructions").setHeading(DocumentApp.ParagraphHeading.HEADING1);
153 |   body.appendParagraph(samples.common);
154 | 
155 |   const dateString = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), 'MMMM dd, yyyy');
156 |   body.appendParagraph(`${FIND_TEXT_KEYWORDS} - ${dateString}`).setHeading(APP_STYLE);
157 |   body.appendTable().appendTableRow().appendTableCell(document.content);
158 |   body.appendParagraph("");
159 | 
160 |   // Moves document to application folder.
161 |   DriveApp.getFileById(docId).moveTo(folder);
162 | 
163 |   // Returns if successfully created.
164 |   return 1
165 | }


--------------------------------------------------------------------------------
/solutions/automations/aggregate-document-content/Utilities.js:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright 2022 Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *      http://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | /** 
18 |  * This file contains common utility functions.
19 |  */
20 | 
21 | /**
22 |  * Returns a Drive folder located in same folder that the application document is located.
23 |  * Checks if the folder exists and returns that folder, or creates new one if not found.
24 |  *
25 |  * @param {string} folderName - Name of the Drive folder. 
26 |  * @return {object} Google Drive folder
27 |  */
28 | function getFolderByName_(folderName) {
29 |   // Gets the Drive folder where the current document is located.
30 |   const docId = DocumentApp.getActiveDocument().getId();
31 |   const parentFolder = DriveApp.getFileById(docId).getParents().next();
32 | 
33 |   // Iterates subfolders to check if folder already exists.
34 |   const subFolders = parentFolder.getFolders();
35 |   while (subFolders.hasNext()) {
36 |     let folder = subFolders.next();
37 | 
38 |     // Returns the existing folder if found.
39 |     if (folder.getName() === folderName) {
40 |       return folder;
41 |     }
42 |   }
43 |   // Creates a new folder if one doesn't already exist.
44 |   return parentFolder.createFolder(folderName)
45 |     .setDescription(`Created by ${APP_TITLE} application to store documents to process`);
46 | }
47 | 
48 | /**
49 |  * Test function to run getFolderByName_.
50 |  * @logs details of created Google Drive folder.
51 |  */
52 | function test_getFolderByName() {
53 | 
54 |   // Gets the folder in Drive associated with this application.
55 |   const folder = getFolderByName_(PROJECT_FOLDER_NAME);
56 | 
57 |   console.log(`Name: ${folder.getName()}\rID: ${folder.getId()}\rURL:${folder.getUrl()}\rDescription: ${folder.getDescription()}`)
58 |   // Uncomment the following to automatically delete the test folder.
59 |   // folder.setTrashed(true);
60 | }


--------------------------------------------------------------------------------
/solutions/automations/bracket-maker/Code.js:
--------------------------------------------------------------------------------
  1 | // To learn how to use this script, refer to the documentation:
  2 | // https://developers.google.com/apps-script/samples/automations/bracket-maker
  3 | 
  4 | /*
  5 | Copyright 2022 Google LLC
  6 | 
  7 | Licensed under the Apache License, Version 2.0 (the "License");
  8 | you may not use this file except in compliance with the License.
  9 | You may obtain a copy of the License at
 10 | 
 11 |     https://www.apache.org/licenses/LICENSE-2.0
 12 | 
 13 | Unless required by applicable law or agreed to in writing, software
 14 | distributed under the License is distributed on an "AS IS" BASIS,
 15 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 16 | See the License for the specific language governing permissions and
 17 | limitations under the License.
 18 | */
 19 | 
 20 | const RANGE_PLAYER1 = 'FirstPlayer';
 21 | const SHEET_PLAYERS = 'Players';
 22 | const SHEET_BRACKET = 'Bracket';
 23 | const CONNECTOR_WIDTH = 15;
 24 | 
 25 | /**
 26 |  * Adds a custom menu item to run the script.
 27 |  */
 28 | function onOpen() {
 29 |   let ss = SpreadsheetApp.getActiveSpreadsheet();
 30 |   ss.addMenu('Bracket maker',
 31 |              [{name: 'Create bracket', functionName: 'createBracket'}]);
 32 | }
 33 | 
 34 | /**
 35 |  * Creates the brackets based on the data provided on the players.
 36 |  */
 37 | function createBracket() {
 38 |   let ss = SpreadsheetApp.getActiveSpreadsheet();
 39 |   let rangePlayers = ss.getRangeByName(RANGE_PLAYER1);
 40 |   let sheetControl = ss.getSheetByName(SHEET_PLAYERS);
 41 |   let sheetResults = ss.getSheetByName(SHEET_BRACKET);
 42 | 
 43 |   // Gets the players from column A.  Assumes the entire column is filled.
 44 |   rangePlayers = rangePlayers.offset(0, 0, sheetControl.getMaxRows() -
 45 |       rangePlayers.getRowIndex() + 1, 1);
 46 |   let players = rangePlayers.getValues();
 47 | 
 48 |   // Figures out how many players there are by skipping the empty cells.
 49 |   let numPlayers = 0;
 50 |   for (let i = 0; i < players.length; i++) {
 51 |     if (!players[i][0] || players[i][0].length == 0) {
 52 |       break;
 53 |     }
 54 |     numPlayers++;
 55 |   }
 56 |   players = players.slice(0, numPlayers);
 57 | 
 58 |   // Provides some error checking in case there are too many or too few players/teams.
 59 |   if (numPlayers > 64) {
 60 |     Browser.msgBox('Sorry, this script can only create brackets for 64 or fewer players.');
 61 |     return; // Early exit
 62 |   }
 63 | 
 64 |   if (numPlayers < 3) {
 65 |     Browser.msgBox('Sorry, you must have at least 3 players.');
 66 |     return; // Early exit
 67 |   }
 68 | 
 69 |   // Clears the 'Bracket' sheet and all formatting.
 70 |   sheetResults.clear();
 71 | 
 72 |   let upperPower = Math.ceil(Math.log(numPlayers) / Math.log(2));
 73 | 
 74 |   // Calculates the number that is a power of 2 and lower than numPlayers.
 75 |   let countNodesUpperBound = Math.pow(2, upperPower);
 76 | 
 77 |   // Calculates the number that is a power of 2 and higher than numPlayers.
 78 |   let countNodesLowerBound = countNodesUpperBound / 2;
 79 | 
 80 |   // Determines the number of nodes that will not show in the 1st level.
 81 |   let countNodesHidden = numPlayers - countNodesLowerBound;
 82 | 
 83 |   // Enters the players for the 1st round.
 84 |   let currentPlayer = 0;
 85 |   for (let i = 0; i < countNodesLowerBound; i++) {
 86 |     if (i < countNodesHidden) {
 87 |       // Must be on the first level
 88 |       let rng = sheetResults.getRange(i * 4 + 1, 1);
 89 |       setBracketItem_(rng, players);
 90 |       setBracketItem_(rng.offset(2, 0, 1, 1), players);
 91 |       setConnector_(sheetResults, rng.offset(0, 1, 3, 1));
 92 |       setBracketItem_(rng.offset(1, 2, 1, 1));
 93 |     } else {
 94 |       // This player gets a bye.
 95 |       setBracketItem_(sheetResults.getRange(i * 4 + 2, 3), players);
 96 |     }
 97 |   }
 98 | 
 99 |   // Fills in the rest of the bracket.
100 |   upperPower--;
101 |   for (let i = 0; i < upperPower; i++) {
102 |     let pow1 = Math.pow(2, i + 1);
103 |     let pow2 = Math.pow(2, i + 2);
104 |     let pow3 = Math.pow(2, i + 3);
105 |     for (let j = 0; j < Math.pow(2, upperPower - i - 1); j++) {
106 |       setBracketItem_(sheetResults.getRange((j * pow3) + pow2, i * 2 + 5));
107 |       setConnector_(sheetResults, sheetResults.getRange((j * pow3) + pow1, i * 2 + 4, pow2 + 1, 1));
108 |     }
109 |   }
110 | }
111 | 
112 | /**
113 |  * Sets the value of an item in the bracket and the color.
114 |  * @param {Range} rng The Spreadsheet Range.
115 |  * @param {string[]} players The list of players.
116 |  */
117 | function setBracketItem_(rng, players) {
118 |   if (players) {
119 |     let rand = Math.ceil(Math.random() * players.length);
120 |     rng.setValue(players.splice(rand - 1, 1)[0][0]);
121 |   }
122 |   rng.setBackgroundColor('yellow');
123 | }
124 | 
125 | /**
126 |  * Sets the color and width for connector cells.
127 |  * @param {Sheet} sheet The spreadsheet to setup.
128 |  * @param {Range} rng The spreadsheet range.
129 |  */
130 | function setConnector_(sheet, rng) {
131 |   sheet.setColumnWidth(rng.getColumnIndex(), CONNECTOR_WIDTH);
132 |   rng.setBackgroundColor('green');
133 | }


--------------------------------------------------------------------------------
/solutions/automations/bracket-maker/README.md:
--------------------------------------------------------------------------------
1 | # Create a tournament bracket
2 | 
3 | See [developers.google.com](https://developers.google.com/apps-script/samples/automations/bracket-maker) for additional details.
4 | 


--------------------------------------------------------------------------------
/solutions/automations/calendar-timesheet/Code.js:
--------------------------------------------------------------------------------
  1 | // To learn how to use this script, refer to the documentation:
  2 | // https://developers.google.com/apps-script/samples/automations/calendar-timesheet
  3 | 
  4 | /*
  5 | Copyright 2022 Jasper Duizendstra
  6 | 
  7 | Licensed under the Apache License, Version 2.0 (the "License");
  8 | you may not use this file except in compliance with the License.
  9 | You may obtain a copy of the License at
 10 | 
 11 |     https://www.apache.org/licenses/LICENSE-2.0
 12 | 
 13 | Unless required by applicable law or agreed to in writing, software
 14 | distributed under the License is distributed on an "AS IS" BASIS,
 15 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 16 | See the License for the specific language governing permissions and
 17 | limitations under the License.
 18 | */
 19 | 
 20 | /**
 21 |  * Runs when the spreadsheet is opened and adds the menu options
 22 |  * to the spreadsheet menu
 23 |  */
 24 | const onOpen = () => {
 25 |   SpreadsheetApp.getUi()
 26 |     .createMenu('myTime')
 27 |     .addItem('Sync calendar events', 'run')
 28 |     .addItem('Settings', 'settings')
 29 |     .addToUi();
 30 | };
 31 | 
 32 | /**
 33 |  * Opens the sidebar
 34 |  */
 35 | const settings = () => {
 36 |   const html = HtmlService.createHtmlOutputFromFile('Page')
 37 |     .setTitle('Settings');
 38 | 
 39 |   SpreadsheetApp.getUi().showSidebar(html);
 40 | };
 41 | 
 42 | /**
 43 | * returns the settings from the script properties
 44 | */
 45 | const getSettings = () => {
 46 |   const settings = {};
 47 |   
 48 |   // get the current settings
 49 |   const savedCalendarSettings = JSON.parse(PropertiesService.getScriptProperties().getProperty('calendar') || '[]');
 50 |   
 51 |   // get the primary calendar
 52 |   const primaryCalendar = CalendarApp.getAllCalendars()
 53 |     .filter((cal) => cal.isMyPrimaryCalendar())
 54 |     .map((cal) => ({
 55 |       name: 'Primary calendar',
 56 |       id: cal.getId()
 57 |     }));
 58 |     
 59 |   // get the secondary calendars
 60 |   const secundaryCalendars = CalendarApp.getAllCalendars()
 61 |     .filter((cal) => cal.isOwnedByMe() && !cal.isMyPrimaryCalendar())
 62 |     .map((cal) => ({
 63 |       name: cal.getName(),
 64 |       id: cal.getId()
 65 |     }));
 66 | 
 67 |   // the current available calendars
 68 |   const availableCalendars = primaryCalendar.concat(secundaryCalendars);
 69 |   
 70 |   // find any calendars that were removed
 71 |   const unavailebleCalendars = [];
 72 |   savedCalendarSettings.forEach((savedCalendarSetting) => {
 73 |     if (!availableCalendars.find((availableCalendar) => availableCalendar.id === savedCalendarSetting.id)) {
 74 |       unavailebleCalendars.push(savedCalendarSetting);
 75 |     }
 76 |   });
 77 |  
 78 |   // map the current settings to the available calendars
 79 |   const calendarSettings = availableCalendars.map((availableCalendar) => {
 80 |     if (savedCalendarSettings.find((savedCalendar) => savedCalendar.id === availableCalendar.id)) {
 81 |       availableCalendar.sync = true;
 82 | 
 83 |     }
 84 |     return availableCalendar;
 85 |   });
 86 | 
 87 |   // add the calendar settings to the settings
 88 |   settings.calendarSettings = calendarSettings;
 89 | 
 90 |   const savedFrom = PropertiesService.getScriptProperties().getProperty('syncFrom');
 91 |   settings.syncFrom = savedFrom;
 92 |  
 93 |   const savedTo = PropertiesService.getScriptProperties().getProperty('syncTo');
 94 |   settings.syncTo = savedTo;
 95 | 
 96 |   const savedIsUpdateTitle = PropertiesService.getScriptProperties().getProperty('isUpdateTitle') === 'true';
 97 |   settings.isUpdateCalendarItemTitle = savedIsUpdateTitle;
 98 | 
 99 |   const savedIsUseCategoriesAsCalendarItemTitle = PropertiesService.getScriptProperties().getProperty('isUseCategoriesAsCalendarItemTitle') === 'true';
100 |   settings.isUseCategoriesAsCalendarItemTitle = savedIsUseCategoriesAsCalendarItemTitle;
101 | 
102 |   const savedIsUpdateDescription = PropertiesService.getScriptProperties().getProperty('isUpdateDescription') === 'true';
103 |   settings.isUpdateCalendarItemDescription = savedIsUpdateDescription;
104 |   
105 |   return settings;
106 | };
107 | 
108 | /**
109 | * Saves the settings from the sidebar
110 | */
111 | const saveSettings = (settings) => {
112 |   PropertiesService.getScriptProperties().setProperty('calendar', JSON.stringify(settings.calendarSettings));
113 |   PropertiesService.getScriptProperties().setProperty('syncFrom', settings.syncFrom);
114 |   PropertiesService.getScriptProperties().setProperty('syncTo', settings.syncTo);
115 |   PropertiesService.getScriptProperties().setProperty('isUpdateTitle', settings.isUpdateCalendarItemTitle);
116 |   PropertiesService.getScriptProperties().setProperty('isUseCategoriesAsCalendarItemTitle', settings.isUseCategoriesAsCalendarItemTitle);
117 |   PropertiesService.getScriptProperties().setProperty('isUpdateDescription', settings.isUpdateCalendarItemDescription);
118 |   return 'Settings saved';
119 | };
120 | 
121 | /**
122 |  * Builds the myTime object and runs the synchronisation
123 |  */
124 | const run = () => {
125 |   'use strict';
126 |   myTime({
127 |     mainSpreadsheetId: SpreadsheetApp.getActiveSpreadsheet().getId(),
128 |   }).run();
129 | };
130 | 
131 | /**
132 |  * The main function used for the synchronisation
133 |  * @param {Object} par The main parameter object.
134 |  * @return {Object} The myTime Object.
135 |  */
136 | const myTime = (par) => {
137 |   'use strict';
138 | 
139 |   /**
140 |   * Format the sheet
141 |   */
142 |   const formatSheet = () => {
143 |     // sort decending on start date 
144 |     hourSheet.sort(3, false);
145 | 
146 |     // hide the technical columns
147 |     hourSheet.hideColumns(1, 2);
148 | 
149 |     // remove any extra rows
150 |     if (hourSheet.getLastRow() > 1 && hourSheet.getLastRow() < hourSheet.getMaxRows()) {
151 |       hourSheet.deleteRows(hourSheet.getLastRow() + 1, hourSheet.getMaxRows() - hourSheet.getLastRow());
152 |     }
153 | 
154 |     // set the validation for the customers
155 |     let rule = SpreadsheetApp.newDataValidation()
156 |       .requireValueInRange(categoriesSheet.getRange('A2:A'), true)
157 |       .setAllowInvalid(true)
158 |       .build();
159 |     hourSheet.getRange('I2:I').setDataValidation(rule);
160 | 
161 |     // set the validation for the projects
162 |     rule = SpreadsheetApp.newDataValidation()
163 |       .requireValueInRange(categoriesSheet.getRange('B2:B'), true)
164 |       .setAllowInvalid(true)
165 |       .build();
166 |     hourSheet.getRange('J2:J').setDataValidation(rule);
167 | 
168 |     // set the validation for the tsaks
169 |     rule = SpreadsheetApp.newDataValidation()
170 |       .requireValueInRange(categoriesSheet.getRange('C2:C'), true)
171 |       .setAllowInvalid(true)
172 |       .build();
173 |     hourSheet.getRange('K2:K').setDataValidation(rule);
174 | 
175 |     if(isUseCategoriesAsCalendarItemTitle) {
176 |       hourSheet.getRange('L2:L').setFormulaR1C1('IF(OR(R[0]C[-3]="tbd";R[0]C[-2]="tbd";R[0]C[-1]="tbd");""; CONCATENATE(R[0]C[-3];"|";R[0]C[-2];"|";R[0]C[-1];"|"))');
177 |     }
178 |     // set the hours, month, week and number collumns
179 |     hourSheet.getRange('P2:P').setFormulaR1C1('=IF(R[0]C[-12]="";"";R[0]C[-12]-R[0]C[-13])');
180 |     hourSheet.getRange('Q2:Q').setFormulaR1C1('=IF(R[0]C[-13]="";"";month(R[0]C[-13]))');
181 |     hourSheet.getRange('R2:R').setFormulaR1C1('=IF(R[0]C[-14]="";"";WEEKNUM(R[0]C[-14];2))');
182 |     hourSheet.getRange('S2:S').setFormulaR1C1('=R[0]C[-3]');
183 |   };
184 | 
185 |   /**
186 |      * Activate the synchronisation
187 |      */
188 |   function run() {
189 |     console.log('Started processing hours.');
190 | 
191 |     const processCalendar = (setting) => {
192 |       SpreadsheetApp.flush();
193 | 
194 |       // current calendar info
195 |       const calendarName = setting.name;
196 |       const calendarId = setting.id;
197 | 
198 |       console.log(`processing ${calendarName} with the id ${calendarId} from ${syncStartDate} to ${syncEndDate}`);
199 | 
200 |       // get the calendar
201 |       const calendar = CalendarApp.getCalendarById(calendarId);
202 | 
203 |       // get the calendar events and create lookups
204 |       const events = calendar.getEvents(syncStartDate, syncEndDate);
205 |       const eventsLookup = events.reduce((jsn, event) => {
206 |         jsn[event.getId()] = event;
207 |         return jsn;
208 |       }, {});
209 | 
210 |       // get the sheet events and create lookups
211 |       const existingEvents = hourSheet.getDataRange().getValues().slice(1);
212 |       const existingEventsLookUp = existingEvents.reduce((jsn, row, index) => {
213 |         if (row[0] !== calendarId) {
214 |           return jsn;
215 |         }
216 |         jsn[row[1]] = {
217 |           event: row,
218 |           row: index + 2
219 |         };
220 |         return jsn;
221 |       }, {});
222 | 
223 |       // handle a calendar event
224 |       const handleEvent = (event) => {
225 |         const eventId = event.getId();
226 | 
227 |         // new event
228 |         if (!existingEventsLookUp[eventId]) {
229 |           hourSheet.appendRow([
230 |             calendarId,
231 |             eventId,
232 |             event.getStartTime(),
233 |             event.getEndTime(),
234 |             calendarName,
235 |             event.getCreators().join(','),
236 |             event.getTitle(),
237 |             event.getDescription(),
238 |             event.getTag('Client') || 'tbd',
239 |             event.getTag('Project') || 'tbd',
240 |             event.getTag('Task') || 'tbd',
241 |             (isUpdateCalendarItemTitle) ? '' : event.getTitle(),
242 |             (isUpdateCalendarItemDescription) ? '' : event.getDescription(),
243 |             event.getGuestList().map((guest) => guest.getEmail()).join(','),
244 |             event.getLocation(),
245 |             undefined,
246 |             undefined,
247 |             undefined,
248 |             undefined
249 |           ]);
250 |           return true;
251 |         }
252 | 
253 |         // existing event
254 |         const exisitingEvent = existingEventsLookUp[eventId].event;
255 |         const exisitingEventRow = existingEventsLookUp[eventId].row;
256 | 
257 |         if (event.getStartTime() - exisitingEvent[startTimeColumn - 1] !== 0) {
258 |           hourSheet.getRange(exisitingEventRow, startTimeColumn).setValue(event.getStartTime());
259 |         }
260 | 
261 |         if (event.getEndTime() - exisitingEvent[endTimeColumn - 1] !== 0) {
262 |           hourSheet.getRange(exisitingEventRow, endTimeColumn).setValue(event.getEndTime());
263 |         }
264 | 
265 |         if (event.getCreators().join(',') !== exisitingEvent[creatorsColumn - 1]) {
266 |           hourSheet.getRange(exisitingEventRow, creatorsColumn).setValue(event.getCreators()[0]);
267 |         }
268 | 
269 |         if (event.getGuestList().map((guest) => guest.getEmail()).join(',') !== exisitingEvent[guestListColumn - 1]) {
270 |           hourSheet.getRange(exisitingEventRow, guestListColumn).setValue(event.getGuestList().map((guest) => guest.getEmail()).join(','));
271 |         }
272 | 
273 |         if (event.getLocation() !== exisitingEvent[locationColumn - 1]) {
274 |           hourSheet.getRange(exisitingEventRow, locationColumn).setValue(event.getLocation());
275 |         }
276 | 
277 |         if(event.getTitle() !== exisitingEvent[titleColumn - 1]) {
278 |           if(!isUpdateCalendarItemTitle) {
279 |             hourSheet.getRange(exisitingEventRow, titleColumn).setValue(event.getTitle());
280 |           }
281 |           if(isUpdateCalendarItemTitle) {
282 |             event.setTitle(exisitingEvent[titleColumn - 1]);
283 |           }
284 |         }
285 |        
286 |         if(event.getDescription() !== exisitingEvent[descriptionColumn - 1]) { 
287 |           if(!isUpdateCalendarItemDescription) {
288 |             hourSheet.getRange(exisitingEventRow, descriptionColumn).setValue(event.getDescription());
289 |           }
290 |           if(isUpdateCalendarItemDescription) {
291 |             event.setDescription(exisitingEvent[descriptionColumn - 1]);
292 |           }
293 |         }
294 | 
295 |         return true;
296 |       };
297 | 
298 |       // process each event for the calendar
299 |       events.every(handleEvent);
300 | 
301 |       // remove any events in the sheet that are not in de calendar
302 |       existingEvents.every((event, index) => {
303 |         if (event[0] !== calendarId) {
304 |           return true;
305 |         };
306 | 
307 |         if (eventsLookup[event[1]]) {
308 |           return true;
309 |         }
310 |         
311 |         if (event[3] < syncStartDate) {
312 |           return true;
313 |         }
314 | 
315 |         hourSheet.getRange(index + 2, 1, 1, 20).clear();
316 |         return true;
317 |       });
318 | 
319 |       return true;
320 |     };
321 | 
322 |     // process the calendars
323 |     settings.calendarSettings.filter((calenderSetting) => calenderSetting.sync === true).every(processCalendar);
324 | 
325 |     formatSheet();
326 |     SpreadsheetApp.setActiveSheet(hourSheet);
327 | 
328 |     console.log('Finished processing hours.');
329 |   }
330 | 
331 |   const mainSpreadSheetId = par.mainSpreadsheetId;
332 |   const mainSpreadsheet = SpreadsheetApp.openById(mainSpreadSheetId);
333 |   const hourSheet = mainSpreadsheet.getSheetByName('Hours');
334 |   const categoriesSheet = mainSpreadsheet.getSheetByName('Categories');
335 |   const settings = getSettings();
336 | 
337 |   const syncStartDate = new Date();
338 |   syncStartDate.setDate(syncStartDate.getDate() - Number(settings.syncFrom));
339 |   
340 |   const syncEndDate = new Date();
341 |   syncEndDate.setDate(syncEndDate.getDate() + Number(settings.syncTo));
342 |   
343 |   const isUpdateCalendarItemTitle = settings.isUpdateCalendarItemTitle;
344 |   const isUseCategoriesAsCalendarItemTitle = settings.isUseCategoriesAsCalendarItemTitle;
345 |   const isUpdateCalendarItemDescription = settings.isUpdateCalendarItemDescription;
346 | 
347 |   const startTimeColumn = 3;
348 |   const endTimeColumn = 4;
349 |   const creatorsColumn = 6;
350 |   const originalTitleColumn = 7;
351 |   const originalDescriptionColumn = 8;
352 |   const clientColumn = 9;
353 |   const projectColumn = 10;
354 |   const taskColumn = 11;
355 |   const titleColumn = 12;
356 |   const descriptionColumn = 13;
357 |   const guestListColumn = 14;
358 |   const locationColumn = 15;
359 | 
360 |   return Object.freeze({
361 |     run: run,
362 |   });
363 | };


--------------------------------------------------------------------------------
/solutions/automations/calendar-timesheet/README.md:
--------------------------------------------------------------------------------
1 | # Record time and activities in Calendar and Sheets
2 | 
3 | See [developers.google.com](https://developers.google.com/apps-script/samples/automations/calendar-timesheet) for additional details.
4 | 


--------------------------------------------------------------------------------
/solutions/automations/content-signup/Code.js:
--------------------------------------------------------------------------------
  1 | // To learn how to use this script, refer to the documentation:
  2 | // https://developers.google.com/apps-script/samples/automations/content-signup
  3 | 
  4 | /*
  5 | Copyright 2022 Google LLC
  6 | 
  7 | Licensed under the Apache License, Version 2.0 (the "License");
  8 | you may not use this file except in compliance with the License.
  9 | You may obtain a copy of the License at
 10 | 
 11 |     https://www.apache.org/licenses/LICENSE-2.0
 12 | 
 13 | Unless required by applicable law or agreed to in writing, software
 14 | distributed under the License is distributed on an "AS IS" BASIS,
 15 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 16 | See the License for the specific language governing permissions and
 17 | limitations under the License.
 18 | */
 19 | 
 20 | // To use your own template doc, update the below variable with the URL of your own Google Doc template.
 21 | // Make sure you update the sharing settings so that 'anyone'  or 'anyone in your organization' can view.
 22 | const EMAIL_TEMPLATE_DOC_URL = 'https://docs.google.com/document/d/1enes74gWsMG3dkK3SFO08apXkr0rcYBd3JHKOb2Nksk/edit?usp=sharing';
 23 | // Update this variable to customize the email subject.
 24 | const EMAIL_SUBJECT = 'Hello, here is the content you requested';
 25 | 
 26 | // Update this variable to the content titles and URLs you want to offer. Make sure you update the form so that the content titles listed here match the content titles you list in the form.
 27 | const topicUrls = {
 28 |   'Google Calendar how-to videos': 'https://www.youtube.com/playlist?list=PLU8ezI8GYqs7IPb_UdmUNKyUCqjzGO9PJ',
 29 |   'Google Drive how-to videos': 'https://www.youtube.com/playlist?list=PLU8ezI8GYqs7Y5d1cgZm2Obq7leVtLkT4',
 30 |   'Google Docs how-to videos': 'https://www.youtube.com/playlist?list=PLU8ezI8GYqs4JKwZ-fpBP-zSoWPL8Sit7',
 31 |   'Google Sheets how-to videos': 'https://www.youtube.com/playlist?list=PLU8ezI8GYqs61ciKpXf_KkV7ZRbRHVG38',
 32 | };
 33 | 
 34 | /**
 35 |  * Installs a trigger on the spreadsheet for when someone submits a form.
 36 |  */
 37 | function installTrigger() {
 38 |   ScriptApp.newTrigger('onFormSubmit')
 39 |       .forSpreadsheet(SpreadsheetApp.getActive())
 40 |       .onFormSubmit()
 41 |       .create();
 42 | }
 43 | 
 44 | /**
 45 |  * Sends a customized email for every form response.
 46 |  * 
 47 |  * @param {Object} event - Form submit event
 48 |  */
 49 | function onFormSubmit(e) {
 50 |   let responses = e.namedValues;
 51 | 
 52 |   // If the question title is a label, it can be accessed as an object field.
 53 |   // If it has spaces or other characters, it can be accessed as a dictionary.
 54 |   let timestamp = responses.Timestamp[0];
 55 |   let email = responses['Email address'][0].trim();
 56 |   let name = responses.Name[0].trim();
 57 |   let topicsString = responses.Topics[0].toLowerCase();
 58 | 
 59 |   // Parse topics of interest into a list (since there are multiple items
 60 |   // that are saved in the row as blob of text).
 61 |   let topics = Object.keys(topicUrls).filter(function(topic) {
 62 |     // indexOf searches for the topic in topicsString and returns a non-negative
 63 |     // index if the topic is found, or it will return -1 if it's not found.
 64 |     return topicsString.indexOf(topic.toLowerCase()) != -1;
 65 |   });
 66 | 
 67 |   // If there is at least one topic selected, send an email to the recipient.
 68 |   let status = '';
 69 |   if (topics.length > 0) {
 70 |     MailApp.sendEmail({
 71 |       to: email,
 72 |       subject: EMAIL_SUBJECT,
 73 |       htmlBody: createEmailBody(name, topics),
 74 |     });
 75 |     status = 'Sent';
 76 |   }
 77 |   else {
 78 |     status = 'No topics selected';
 79 |   }
 80 | 
 81 |   // Append the status on the spreadsheet to the responses' row.
 82 |   let sheet = SpreadsheetApp.getActiveSheet();
 83 |   let row = sheet.getActiveRange().getRow();
 84 |   let column = e.values.length + 1;
 85 |   sheet.getRange(row, column).setValue(status);
 86 | 
 87 |   console.log("status=" + status + "; responses=" + JSON.stringify(responses));
 88 | }
 89 | 
 90 | /**
 91 |  * Creates email body and includes the links based on topic.
 92 |  *
 93 |  * @param {string} recipient - The recipient's email address.
 94 |  * @param {string[]} topics - List of topics to include in the email body.
 95 |  * @return {string} - The email body as an HTML string.
 96 |  */
 97 | function createEmailBody(name, topics) {
 98 |   let topicsHtml = topics.map(function(topic) {
 99 |   let url = topicUrls[topic];
100 |     return '<li><a href="' + url + '">' + topic + '</a></li>';
101 |   }).join('');
102 |   topicsHtml = '<ul>' + topicsHtml + '</ul>';
103 |   
104 |   // Make sure to update the emailTemplateDocId at the top.
105 |   let docId = DocumentApp.openByUrl(EMAIL_TEMPLATE_DOC_URL).getId();
106 |   let emailBody = docToHtml(docId);
107 |   emailBody = emailBody.replace(/{{NAME}}/g, name);
108 |   emailBody = emailBody.replace(/{{TOPICS}}/g, topicsHtml);
109 |   return emailBody;
110 | }
111 | 
112 | /**
113 |  * Downloads a Google Doc as an HTML string.
114 |  * 
115 |  * @param {string} docId - The ID of a Google Doc to fetch content from.
116 |  * @return {string} The Google Doc rendered as an HTML string.
117 |  */
118 | function docToHtml(docId) {
119 | 
120 |   // Downloads a Google Doc as an HTML string.
121 |   let url = "https://docs.google.com/feeds/download/documents/export/Export?id=" +
122 |             docId + "&exportFormat=html";
123 |   let param = {
124 |     method: "get",
125 |     headers: {"Authorization": "Bearer " + ScriptApp.getOAuthToken()},
126 |     muteHttpExceptions: true,
127 |   };
128 |   return UrlFetchApp.fetch(url, param).getContentText();
129 | }
130 | 


--------------------------------------------------------------------------------
/solutions/automations/content-signup/README.md:
--------------------------------------------------------------------------------
1 | # Send curated content
2 | 
3 | See [developers.google.com](https://developers.google.com/apps-script/samples/automations/content-signup) for additional details.
4 | 


--------------------------------------------------------------------------------
/solutions/automations/course-feedback-response/Code.js:
--------------------------------------------------------------------------------
  1 | // To learn how to use this script, refer to the documentation:
  2 | // https://developers.google.com/apps-script/samples/automations/course-feedback-response
  3 | 
  4 | /*
  5 | Copyright 2022 Google LLC
  6 | 
  7 | Licensed under the Apache License, Version 2.0 (the "License");
  8 | you may not use this file except in compliance with the License.
  9 | You may obtain a copy of the License at
 10 | 
 11 |     https://www.apache.org/licenses/LICENSE-2.0
 12 | 
 13 | Unless required by applicable law or agreed to in writing, software
 14 | distributed under the License is distributed on an "AS IS" BASIS,
 15 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 16 | See the License for the specific language governing permissions and
 17 | limitations under the License.
 18 | */
 19 | 
 20 | /**
 21 |  * Creates custom menu for user to run scripts.
 22 |  */
 23 | function onOpen() {
 24 |   let ui = SpreadsheetApp.getUi();
 25 |   ui.createMenu('Form Reply Tool')
 26 |       .addItem('Enable auto draft replies', 'installTrigger')
 27 |       .addToUi();
 28 | }
 29 | 
 30 | /**
 31 |  * Installs a trigger on the Spreadsheet for when a Form response is submitted.
 32 |  */
 33 | function installTrigger() {
 34 |   ScriptApp.newTrigger('onFormSubmit')
 35 |       .forSpreadsheet(SpreadsheetApp.getActive())
 36 |       .onFormSubmit()
 37 |       .create();
 38 | }
 39 | 
 40 | /**
 41 |  * Creates a draft email for every response on a form
 42 |  *
 43 |  * @param {Object} event - Form submit event
 44 |  */
 45 | function onFormSubmit(e) {
 46 |   let responses = e.namedValues;
 47 | 
 48 |   // parse form response data
 49 |   let timestamp = responses.Timestamp[0];
 50 |   let email = responses['Email address'][0].trim();
 51 | 
 52 |   // create email body
 53 |   let emailBody = createEmailBody(responses);
 54 | 
 55 |   // create draft email
 56 |   createDraft(timestamp, email, emailBody);
 57 | }
 58 | 
 59 | /**
 60 |  * Creates email body and includes feedback from Google Form.
 61 |  *
 62 |  * @param {string} responses - The form response data
 63 |  * @return {string} - The email body as an HTML string
 64 |  */
 65 | function createEmailBody(responses) {
 66 |   // parse form response data
 67 |   let name = responses.Name[0].trim();
 68 |   let industry = responses['What industry do you work in?'][0];
 69 |   let source = responses['How did you find out about this course?'][0];
 70 |   let rating = responses['On a scale of 1 - 5 how would you rate this course?'][0];
 71 |   let productFeedback = responses['What could be different to make it a 5 rating?'][0];
 72 |   let otherFeedback = responses['Any other feedback?'][0];
 73 | 
 74 |   // create email body
 75 |   let htmlBody = 'Hi ' + name + ',<br><br>' +
 76 |     'Thanks for responding to our course feedback questionnaire.<br><br>' +
 77 |       'It\'s really useful to us to help improve this course.<br><br>' +
 78 |         'Have a great day!<br><br>' +
 79 |           'Thanks,<br>' +
 80 |             'Course Team<br><br>' +
 81 |               '****************************************************************<br><br>' +
 82 |                 '<i>Your feedback:<br><br>' +
 83 |                   'What industry do you work in?<br><br>' +
 84 |                     industry + '<br><br>' +
 85 |                       'How did you find out about this course?<br><br>' +
 86 |                         source + '<br><br>' +
 87 |                           'On a scale of 1 - 5 how would you rate this course?<br><br>' +
 88 |                             rating + '<br><br>' +
 89 |                               'What could be different to make it a 5 rating?<br><br>' +
 90 |                                 productFeedback + '<br><br>' +
 91 |                                   'Any other feedback?<br><br>' +
 92 |                                     otherFeedback + '<br><br></i>';
 93 | 
 94 |   return htmlBody;
 95 | }
 96 | 
 97 | /**
 98 |  * Create a draft email with the feedback
 99 |  *
100 |  * @param {string} timestamp Timestamp for the form response
101 |  * @param {string} email Email address from the form response
102 |  * @param {string} emailBody The email body as an HTML string
103 |  */
104 | function createDraft(timestamp, email, emailBody) {
105 |   console.log('draft email create process started');
106 | 
107 |   // create subject line
108 |   let subjectLine = 'Thanks for your course feedback! ' + timestamp;
109 | 
110 |   // create draft email
111 |   GmailApp.createDraft(
112 |       email,
113 |       subjectLine,
114 |       '',
115 |       {
116 |         htmlBody: emailBody,
117 |       }
118 |   );
119 | }
120 | 


--------------------------------------------------------------------------------
/solutions/automations/course-feedback-response/README.md:
--------------------------------------------------------------------------------
1 | # Respond to feedback
2 | 
3 | See [developers.google.com](https://developers.google.com/apps-script/samples/automations/course-feedback-response) for additional details.
4 | 


--------------------------------------------------------------------------------
/solutions/automations/employee-certificate/Code.js:
--------------------------------------------------------------------------------
  1 | // To learn how to use this script, refer to the documentation:
  2 | // https://developers.google.com/apps-script/samples/automations/employee-certificate
  3 | 
  4 | /*
  5 | Copyright 2022 Google LLC
  6 | 
  7 | Licensed under the Apache License, Version 2.0 (the "License");
  8 | you may not use this file except in compliance with the License.
  9 | You may obtain a copy of the License at
 10 | 
 11 |     https://www.apache.org/licenses/LICENSE-2.0
 12 | 
 13 | Unless required by applicable law or agreed to in writing, software
 14 | distributed under the License is distributed on an "AS IS" BASIS,
 15 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 16 | See the License for the specific language governing permissions and
 17 | limitations under the License.
 18 | */
 19 | 
 20 | const slideTemplateId = 'PRESENTATION_ID';
 21 | const tempFolderId = 'FOLDER_ID'; // Create an empty folder in Google Drive
 22 | 
 23 | /**
 24 |  * Creates a custom menu "Appreciation" in the spreadsheet
 25 |  * with drop-down options to create and send certificates
 26 |  */
 27 | function onOpen() {
 28 |   const ui = SpreadsheetApp.getUi();
 29 |   ui.createMenu('Appreciation')
 30 |       .addItem('Create certificates', 'createCertificates')
 31 |       .addSeparator()
 32 |       .addItem('Send certificates', 'sendCertificates')
 33 |       .addToUi();
 34 | }
 35 | 
 36 | /**
 37 |  * Creates a personalized certificate for each employee
 38 |  * and stores every individual Slides doc on Google Drive
 39 |  */
 40 | function createCertificates() {
 41 |   // Load the Google Slide template file
 42 |   const template = DriveApp.getFileById(slideTemplateId);
 43 | 
 44 |   // Get all employee data from the spreadsheet and identify the headers
 45 |   const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
 46 |   const values = sheet.getDataRange().getValues();
 47 |   const headers = values[0];
 48 |   const empNameIndex = headers.indexOf('Employee Name');
 49 |   const dateIndex = headers.indexOf('Date');
 50 |   const managerNameIndex = headers.indexOf('Manager Name');
 51 |   const titleIndex = headers.indexOf('Title');
 52 |   const compNameIndex = headers.indexOf('Company Name');
 53 |   const empEmailIndex = headers.indexOf('Employee Email');
 54 |   const empSlideIndex = headers.indexOf('Employee Slide');
 55 |   const statusIndex = headers.indexOf('Status');
 56 | 
 57 |   // Iterate through each row to capture individual details
 58 |   for (let i = 1; i < values.length; i++) {
 59 |     const rowData = values[i];
 60 |     const empName = rowData[empNameIndex];
 61 |     const date = rowData[dateIndex];
 62 |     const managerName = rowData[managerNameIndex];
 63 |     const title = rowData[titleIndex];
 64 |     const compName = rowData[compNameIndex];
 65 | 
 66 |     // Make a copy of the Slide template and rename it with employee name
 67 |     const tempFolder = DriveApp.getFolderById(tempFolderId);
 68 |     const empSlideId = template.makeCopy(tempFolder).setName(empName).getId();
 69 |     const empSlide = SlidesApp.openById(empSlideId).getSlides()[0];
 70 | 
 71 |     // Replace placeholder values with actual employee related details
 72 |     empSlide.replaceAllText('Employee Name', empName);
 73 |     empSlide.replaceAllText('Date', 'Date: ' + Utilities.formatDate(date, Session.getScriptTimeZone(), 'MMMM dd, yyyy'));
 74 |     empSlide.replaceAllText('Your Name', managerName);
 75 |     empSlide.replaceAllText('Title', title);
 76 |     empSlide.replaceAllText('Company Name', compName);
 77 | 
 78 |     // Update the spreadsheet with the new Slide Id and status
 79 |     sheet.getRange(i + 1, empSlideIndex + 1).setValue(empSlideId);
 80 |     sheet.getRange(i + 1, statusIndex + 1).setValue('CREATED');
 81 |     SpreadsheetApp.flush();
 82 |   }
 83 | }
 84 | 
 85 | /**
 86 |  * Send an email to each individual employee
 87 |  * with a PDF attachment of their appreciation certificate
 88 |  */
 89 | function sendCertificates() {
 90 |   // Get all employee data from the spreadsheet and identify the headers
 91 |   const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
 92 |   const values = sheet.getDataRange().getValues();
 93 |   const headers = values[0];
 94 |   const empNameIndex = headers.indexOf('Employee Name');
 95 |   const dateIndex = headers.indexOf('Date');
 96 |   const managerNameIndex = headers.indexOf('Manager Name');
 97 |   const titleIndex = headers.indexOf('Title');
 98 |   const compNameIndex = headers.indexOf('Company Name');
 99 |   const empEmailIndex = headers.indexOf('Employee Email');
100 |   const empSlideIndex = headers.indexOf('Employee Slide');
101 |   const statusIndex = headers.indexOf('Status');
102 | 
103 |   // Iterate through each row to capture individual details
104 |   for (let i = 1; i < values.length; i++) {
105 |     const rowData = values[i];
106 |     const empName = rowData[empNameIndex];
107 |     const date = rowData[dateIndex];
108 |     const managerName = rowData[managerNameIndex];
109 |     const title = rowData[titleIndex];
110 |     const compName = rowData[compNameIndex];
111 |     const empSlideId = rowData[empSlideIndex];
112 |     const empEmail = rowData[empEmailIndex];
113 | 
114 |     // Load the employee's personalized Google Slide file
115 |     const attachment = DriveApp.getFileById(empSlideId);
116 | 
117 |     // Setup the required parameters and send them the email
118 |     const senderName = 'CertBot';
119 |     const subject = empName + ', you\'re awesome!';
120 |     const body = 'Please find your employee appreciation certificate attached.' +
121 |     '\n\n' + compName + ' team';
122 |     GmailApp.sendEmail(empEmail, subject, body, {
123 |       attachments: [attachment.getAs(MimeType.PDF)],
124 |       name: senderName
125 |     });
126 | 
127 |     // Update the spreadsheet with email status
128 |     sheet.getRange(i + 1, statusIndex + 1).setValue('SENT');
129 |     SpreadsheetApp.flush();
130 |   }
131 | }
132 | 


--------------------------------------------------------------------------------
/solutions/automations/employee-certificate/README.md:
--------------------------------------------------------------------------------
1 | # Send personalized appreciation certificates to employees
2 | 
3 | See [developers.google.com](https://developers.google.com/apps-script/samples/automations/employee-certificate) for additional details.
4 | 


--------------------------------------------------------------------------------
/solutions/automations/equipment-requests/Code.js:
--------------------------------------------------------------------------------
  1 | // To learn how to use this script, refer to the documentation:
  2 | // https://developers.google.com/apps-script/samples/automations/equipment-requests
  3 | 
  4 | /*
  5 | Copyright 2022 Google LLC
  6 | 
  7 | Licensed under the Apache License, Version 2.0 (the "License");
  8 | you may not use this file except in compliance with the License.
  9 | You may obtain a copy of the License at
 10 | 
 11 |     https://www.apache.org/licenses/LICENSE-2.0
 12 | 
 13 | Unless required by applicable law or agreed to in writing, software
 14 | distributed under the License is distributed on an "AS IS" BASIS,
 15 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 16 | See the License for the specific language governing permissions and
 17 | limitations under the License.
 18 | */
 19 | 
 20 | // Update this variable with the email address you want to send equipment requests to.
 21 | const REQUEST_NOTIFICATION_EMAIL = 'request_intake@example.com';
 22 | 
 23 | // Update the following variables with your own equipment options.
 24 | const AVAILABLE_LAPTOPS = [
 25 |   '15" high Performance Laptop (OS X)',
 26 |   '15" high Performance Laptop (Windows)',
 27 |   '15" high performance Laptop (Linux)',
 28 |   '13" lightweight laptop (Windows)',
 29 | ];
 30 | const AVAILABLE_DESKTOPS = [
 31 |   'Standard workstation (Windows)',
 32 |   'Standard workstation (Linux)',
 33 |   'High performance workstation (Windows)',
 34 |   'High performance workstation (Linux)',
 35 |   'Mac Pro (OS X)',
 36 | ];
 37 | const AVAILABLE_MONITORS = [
 38 |   'Single 27"',
 39 |   'Single 32"',
 40 |   'Dual 24"',
 41 | ];
 42 | 
 43 | // Form field titles, used for creating the form and as keys when handling
 44 | // responses.
 45 | /**
 46 |  * Adds a custom menu to the spreadsheet.
 47 |  */
 48 | function onOpen() {
 49 |   SpreadsheetApp.getUi().createMenu('Equipment requests')
 50 |       .addItem('Set up', 'setup_')
 51 |       .addItem('Clean up', 'cleanup_')
 52 |       .addToUi();
 53 | }
 54 | 
 55 | /**
 56 |  * Creates the form and triggers for the workflow.
 57 |  */
 58 | function setup_() {
 59 |   let ss = SpreadsheetApp.getActiveSpreadsheet();
 60 |   if (ss.getFormUrl()) {
 61 |     let msg = 'Form already exists. Unlink the form and try again.';
 62 |     SpreadsheetApp.getUi().alert(msg);
 63 |     return;
 64 |   }
 65 |   let form = FormApp.create('Equipment Requests')
 66 |       .setCollectEmail(true)
 67 |       .setDestination(FormApp.DestinationType.SPREADSHEET, ss.getId())
 68 |       .setLimitOneResponsePerUser(false);
 69 |   form.addTextItem().setTitle('Employee name').setRequired(true);
 70 |   form.addTextItem().setTitle('Desk location').setRequired(true);
 71 |   form.addDateItem().setTitle('Due date').setRequired(true);
 72 |   form.addListItem().setTitle('Laptop').setChoiceValues(AVAILABLE_LAPTOPS);
 73 |   form.addListItem().setTitle('Desktop').setChoiceValues(AVAILABLE_DESKTOPS);
 74 |   form.addListItem().setTitle('Monitor').setChoiceValues(AVAILABLE_MONITORS);
 75 | 
 76 |   // Hide the raw form responses.
 77 |   ss.getSheets().forEach(function(sheet) {
 78 |     if (sheet.getFormUrl() == ss.getFormUrl()) {
 79 |       sheet.hideSheet();
 80 |     }
 81 |   });
 82 |   // Start workflow on each form submit
 83 |   ScriptApp.newTrigger('onFormSubmit_')
 84 |       .forForm(form)
 85 |       .onFormSubmit()
 86 |       .create();
 87 |   // Archive completed items every 5m.
 88 |   ScriptApp.newTrigger('processCompletedItems_')
 89 |       .timeBased()
 90 |       .everyMinutes(5)
 91 |       .create();
 92 | }
 93 | 
 94 | /**
 95 |  * Cleans up the project (stop triggers, form submission, etc.)
 96 |  */
 97 | function cleanup_() {
 98 |   let formUrl = SpreadsheetApp.getActiveSpreadsheet().getFormUrl();
 99 |   if (!formUrl) {
100 |     return;
101 |   }
102 |   ScriptApp.getProjectTriggers().forEach(function(trigger) {
103 |     ScriptApp.deleteTrigger(trigger);
104 |   });
105 |   FormApp.openByUrl(formUrl)
106 |       .deleteAllResponses()
107 |       .setAcceptingResponses(false);
108 | }
109 | 
110 | /**
111 |  * Handles new form submissions to trigger the workflow.
112 |  *
113 |  * @param {Object} event - Form submit event
114 |  */
115 | function onFormSubmit_(event) {
116 |   let response = mapResponse_(event.response);
117 |   sendNewEquipmentRequestEmail_(response);
118 |   let equipmentDetails = Utilities.formatString('%s\n%s\n%s',
119 |       response['Laptop'],
120 |       response['Desktop'],
121 |       response['Monitor']);
122 |   let row = ['New',
123 |     '',
124 |     response['Due date'],
125 |     response['Employee name'],
126 |     response['Desk location'],
127 |     equipmentDetails,
128 |     response['email']];
129 |   let ss = SpreadsheetApp.getActiveSpreadsheet();
130 |   let sheet = ss.getSheetByName('Pending requests');
131 |   sheet.appendRow(row);
132 | }
133 | 
134 | /**
135 |  * Sweeps completed and cancelled requests, notifying the requestors and archiving them
136 |  * to the completed sheet.
137 |  *
138 |  * @param {Object} event
139 |  */
140 | function processCompletedItems_() {
141 |   let ss = SpreadsheetApp.getActiveSpreadsheet();
142 |   let pending = ss.getSheetByName('Pending requests');
143 |   let completed = ss.getSheetByName('Completed requests');
144 |   let rows = pending.getDataRange().getValues();
145 |     for (let i = rows.length; i >= 2; i--) {
146 |       let row = rows[i -1];
147 |       let status = row[0];
148 |       if (status === 'Completed' || status == 'Cancelled') {
149 |           pending.deleteRow(i);
150 |           completed.appendRow(row);
151 |           console.log("Deleted row: " + i);
152 |           sendEquipmentRequestCompletedEmail_({
153 |             'Employee name': row[3],
154 |             'Desk location': row[4],
155 |             'email': row[6],
156 |           });
157 |         }
158 |       };
159 | }
160 | 
161 | /**
162 |  * Sends an email notification that a new equipment request has been submitted.
163 |  *
164 |  * @param {Object} request - Request details
165 |  */
166 | function sendNewEquipmentRequestEmail_(request) {
167 |   let template = HtmlService.createTemplateFromFile('new-equipment-request.html');
168 |   template.request = request;
169 |   template.sheetUrl = SpreadsheetApp.getActiveSpreadsheet().getUrl();
170 |   let msg = template.evaluate();
171 |   MailApp.sendEmail({
172 |     to: REQUEST_NOTIFICATION_EMAIL,
173 |     subject: 'New equipment request',
174 |     htmlBody: msg.getContent(),
175 |   });
176 | }
177 | 
178 | /**
179 |  * Sends an email notifying the requestor that the request is complete.
180 |  *
181 |  * @param {Object} request - Request details
182 |  */
183 | function sendEquipmentRequestCompletedEmail_(request) {
184 |   let template = HtmlService.createTemplateFromFile('request-complete.html');
185 |   template.request = request;
186 |   let msg = template.evaluate();
187 |   MailApp.sendEmail({
188 |     to: request.email,
189 |     subject: 'Equipment request completed',
190 |     htmlBody: msg.getContent(),
191 |   });
192 | }
193 | 
194 | /**
195 |  * Converts a form response to an object keyed by the item titles. Allows easier
196 |  * access to response values.
197 |  *
198 |  * @param {FormResponse} response
199 |  * @return {Object} Form values keyed by question title
200 |  */
201 | function mapResponse_(response) {
202 |   let initialValue = {
203 |     email: response.getRespondentEmail(),
204 |     timestamp: response.getTimestamp(),
205 |   };
206 |   return response.getItemResponses().reduce(function(obj, itemResponse) {
207 |     let key = itemResponse.getItem().getTitle();
208 |     obj[key] = itemResponse.getResponse();
209 |     return obj;
210 |   }, initialValue);
211 | }
212 | 
213 | 


--------------------------------------------------------------------------------
/solutions/automations/equipment-requests/README.md:
--------------------------------------------------------------------------------
1 | # Manage new employee equipment requests
2 | 
3 | See [developers.google.com](https://developers.google.com/apps-script/samples/automations/equipment-requests) for additional details.
4 | 


--------------------------------------------------------------------------------
/solutions/automations/event-session-signup/Code.js:
--------------------------------------------------------------------------------
  1 | // To learn how to use this script, refer to the documentation:
  2 | // https://developers.google.com/apps-script/samples/automations/event-session-signup
  3 | 
  4 | /*
  5 | Copyright 2022 Google LLC
  6 | 
  7 | Licensed under the Apache License, Version 2.0 (the "License");
  8 | you may not use this file except in compliance with the License.
  9 | You may obtain a copy of the License at
 10 | 
 11 |     https://www.apache.org/licenses/LICENSE-2.0
 12 | 
 13 | Unless required by applicable law or agreed to in writing, software
 14 | distributed under the License is distributed on an "AS IS" BASIS,
 15 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 16 | See the License for the specific language governing permissions and
 17 | limitations under the License.
 18 | */
 19 | 
 20 | /**
 21 |  * Inserts a custom menu when the spreadsheet opens.
 22 |  */
 23 | function onOpen() {
 24 |   SpreadsheetApp.getUi().createMenu('Conference')
 25 |       .addItem('Set up conference', 'setUpConference_')
 26 |       .addToUi();
 27 | }
 28 | 
 29 | /**
 30 |  * Uses the conference data in the spreadsheet to create
 31 |  * Google Calendar events, a Google Form, and a trigger that allows the script
 32 |  * to react to form responses.
 33 |  */
 34 | function setUpConference_() {
 35 |   let scriptProperties = PropertiesService.getScriptProperties();
 36 |   if (scriptProperties.getProperty('calId')) {
 37 |     Browser.msgBox('Your conference is already set up. Look in Google Drive for your'
 38 |                    + ' sign-up form!');
 39 |                    return;
 40 |   }
 41 |   let ss = SpreadsheetApp.getActive();
 42 |   let sheet = ss.getSheetByName('Conference Setup');
 43 |   let range = sheet.getDataRange();
 44 |   let values = range.getValues();
 45 |   setUpCalendar_(values, range);
 46 |   setUpForm_(ss, values);
 47 |   ScriptApp.newTrigger('onFormSubmit').forSpreadsheet(ss).onFormSubmit()
 48 |       .create();
 49 | }
 50 | 
 51 | /**
 52 |  * Creates a Google Calendar with events for each conference session in the
 53 |  * spreadsheet, then writes the event IDs to the spreadsheet for future use.
 54 |  * @param {Array<string[]>} values Cell values for the spreadsheet range.
 55 |  * @param {Range} range A spreadsheet range that contains conference data.
 56 |  */
 57 | function setUpCalendar_(values, range) {
 58 |   let cal = CalendarApp.createCalendar('Conference Calendar');
 59 |   // Start at 1 to skip the header row.
 60 |   for (let i = 1; i < values.length; i++) {
 61 |     let session = values[i];
 62 |     let title = session[0];
 63 |     let start = joinDateAndTime_(session[1], session[2]);
 64 |     let end = joinDateAndTime_(session[1], session[3]);
 65 |     let options = {location: session[4], sendInvites: true};
 66 |     let event = cal.createEvent(title, start, end, options)
 67 |         .setGuestsCanSeeGuests(false);
 68 |     session[5] = event.getId();
 69 |   }
 70 |   range.setValues(values);
 71 | 
 72 |   // Stores the ID for the Calendar, which is needed to retrieve events by ID.
 73 |   let scriptProperties = PropertiesService.getScriptProperties();
 74 |   scriptProperties.setProperty('calId', cal.getId());
 75 | }
 76 | 
 77 | /**
 78 |  * Creates a single Date object from separate date and time cells.
 79 |  *
 80 |  * @param {Date} date A Date object from which to extract the date.
 81 |  * @param {Date} time A Date object from which to extract the time.
 82 |  * @return {Date} A Date object representing the combined date and time.
 83 |  */
 84 | function joinDateAndTime_(date, time) {
 85 |   date = new Date(date);
 86 |   date.setHours(time.getHours());
 87 |   date.setMinutes(time.getMinutes());
 88 |   return date;
 89 | }
 90 | 
 91 | /**
 92 |  * Creates a Google Form that allows respondents to select which conference
 93 |  * sessions they would like to attend, grouped by date and start time in the
 94 |  * caller's time zone.
 95 |  *
 96 |  * @param {Spreadsheet} ss The spreadsheet that contains the conference data.
 97 |  * @param {Array<String[]>} values Cell values for the spreadsheet range.
 98 |  */
 99 | function setUpForm_(ss, values) {
100 |   // Group the sessions by date and time so that they can be passed to the form.
101 |   let schedule = {};
102 |   // Start at 1 to skip the header row.
103 |   for (let i = 1; i < values.length; i++) {
104 |     let session = values[i];
105 |     let day = session[1].toLocaleDateString();
106 |     let time = session[2].toLocaleTimeString();
107 |     if (!schedule[day]) {
108 |       schedule[day] = {};
109 |     }
110 |     if (!schedule[day][time]) {
111 |       schedule[day][time] = [];
112 |     }
113 |     schedule[day][time].push(session[0]);
114 |   }
115 | 
116 |   // Creates the form and adds a multiple-choice question for each timeslot.
117 |   let form = FormApp.create('Conference Form');
118 |   form.setDestination(FormApp.DestinationType.SPREADSHEET, ss.getId());
119 |   form.addTextItem().setTitle('Name').setRequired(true);
120 |   form.addTextItem().setTitle('Email').setRequired(true);
121 |   Object.keys(schedule).forEach(function(day) {
122 |     let header = form.addSectionHeaderItem().setTitle('Sessions for ' + day);
123 |     Object.keys(schedule[day]).forEach(function(time) {
124 |       let item = form.addMultipleChoiceItem().setTitle(time + ' ' + day)
125 |           .setChoiceValues(schedule[day][time]);
126 |     });
127 |   });
128 | }
129 | 
130 | /**
131 |  * Sends out calendar invitations and a
132 |  * personalized Google Docs itinerary after a user responds to the form.
133 |  *
134 |  * @param {Object} e The event parameter for form submission to a spreadsheet;
135 |  *     see https://developers.google.com/apps-script/understanding_events
136 |  */
137 | function onFormSubmit(e) {
138 |   let user = {name: e.namedValues['Name'][0], email: e.namedValues['Email'][0]};
139 | 
140 |   // Grab the session data again so that we can match it to the user's choices.
141 |   let response = [];
142 |   let values = SpreadsheetApp.getActive().getSheetByName('Conference Setup')
143 |       .getDataRange().getValues();
144 |   for (let i = 1; i < values.length; i++) {
145 |     let session = values[i];
146 |     let title = session[0];
147 |     let day = session[1].toLocaleDateString();
148 |     let time = session[2].toLocaleTimeString();
149 |     let timeslot = time + ' ' + day;
150 | 
151 |     // For every selection in the response, find the matching timeslot and title
152 |     // in the spreadsheet and add the session data to the response array.
153 |     if (e.namedValues[timeslot] && e.namedValues[timeslot] == title) {
154 |       response.push(session);
155 |     }
156 |   }
157 |   sendInvites_(user, response);
158 |   sendDoc_(user, response);
159 | }
160 | 
161 | /**
162 |  * Add the user as a guest for every session he or she selected.
163 |  * @param {object} user An object that contains the user's name and email.
164 |  * @param {Array<String[]>} response An array of data for the user's session choices.
165 |  */
166 | function sendInvites_(user, response) {
167 |   let id = ScriptProperties.getProperty('calId');
168 |   let cal = CalendarApp.getCalendarById(id);
169 |   for (let i = 0; i < response.length; i++) {
170 |     cal.getEventSeriesById(response[i][5]).addGuest(user.email);
171 |   }
172 | }
173 | 
174 | /**
175 |  * Creates and shares a personalized Google Doc that shows the user's itinerary.
176 |  * @param {object} user An object that contains the user's name and email.
177 |  * @param {Array<string[]>} response An array of data for the user's session choices.
178 |  */
179 | function sendDoc_(user, response) {
180 |   let doc = DocumentApp.create('Conference Itinerary for ' + user.name)
181 |       .addEditor(user.email);
182 |   let body = doc.getBody();
183 |   let table = [['Session', 'Date', 'Time', 'Location']];
184 |   for (let i = 0; i < response.length; i++) {
185 |     table.push([response[i][0], response[i][1].toLocaleDateString(),
186 |       response[i][2].toLocaleTimeString(), response[i][4]]);
187 |   }
188 |   body.insertParagraph(0, doc.getName())
189 |       .setHeading(DocumentApp.ParagraphHeading.HEADING1);
190 |   table = body.appendTable(table);
191 |   table.getRow(0).editAsText().setBold(true);
192 |   doc.saveAndClose();
193 | 
194 |   // Emails a link to the Doc as well as a PDF copy.
195 |   MailApp.sendEmail({
196 |     to: user.email,
197 |     subject: doc.getName(),
198 |     body: 'Thanks for registering! Here\'s your itinerary: ' + doc.getUrl(),
199 |     attachments: doc.getAs(MimeType.PDF),
200 |   });
201 | }
202 | 
203 | /**
204 |  * Removes the calId script property so that the 'setUpConference_()' can be run again.
205 |  */
206 | function resetProperties(){
207 |   let scriptProperties = PropertiesService.getScriptProperties();
208 |   scriptProperties.deleteAllProperties();
209 | }
210 | 


--------------------------------------------------------------------------------
/solutions/automations/event-session-signup/README.md:
--------------------------------------------------------------------------------
1 | # Create a sign-up for sessions at a conference
2 | 
3 | See [developers.google.com](https://developers.google.com/apps-script/samples/automations/event-session-signup) for additional details.
4 | 


--------------------------------------------------------------------------------
/solutions/automations/feedback-sentiment-analysis/README.md:
--------------------------------------------------------------------------------
1 | # Analyze sentiment of open-ended feedback
2 | 
3 | See [developers.google.com](https://developers.google.com/apps-script/samples/automations/feedback-sentiment-analysis) for additional details.


--------------------------------------------------------------------------------
/solutions/automations/feedback-sentiment-analysis/code.js:
--------------------------------------------------------------------------------
  1 | // To learn how to use this script, refer to the documentation:
  2 | // https://developers.google.com/apps-script/samples/automations/feedback-sentiment-analysis
  3 | 
  4 | /*
  5 | Copyright 2022 Google LLC
  6 | 
  7 | Licensed under the Apache License, Version 2.0 (the "License");
  8 | you may not use this file except in compliance with the License.
  9 | You may obtain a copy of the License at
 10 | 
 11 |     https://www.apache.org/licenses/LICENSE-2.0
 12 | 
 13 | Unless required by applicable law or agreed to in writing, software
 14 | distributed under the License is distributed on an "AS IS" BASIS,
 15 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 16 | See the License for the specific language governing permissions and
 17 | limitations under the License.
 18 | */
 19 | 
 20 | // Sets API key for accessing Cloud Natural Language API.
 21 | const myApiKey = 'YOUR_API_KEY'; // Replace with your API key.
 22 | 
 23 | // Matches column names in Review Data sheet to variables.
 24 | let COLUMN_NAME = {
 25 |   COMMENTS: 'comments',
 26 |   ENTITY: 'entity_sentiment',
 27 |   ID: 'id'
 28 | };
 29 | 
 30 | /**
 31 |  * Creates a Demo menu in Google Spreadsheets.
 32 |  */
 33 | function onOpen() {
 34 |   SpreadsheetApp.getUi()
 35 |     .createMenu('Sentiment Tools')
 36 |     .addItem('Mark entities and sentiment', 'markEntitySentiment')
 37 |     .addToUi();
 38 | };
 39 | 
 40 | /**
 41 | * Analyzes entities and sentiment for each comment in  
 42 | * Review Data sheet and copies results into the 
 43 | * Entity Sentiment Data sheet.
 44 | */
 45 | function markEntitySentiment() {
 46 |   // Sets variables for "Review Data" sheet
 47 |   let ss = SpreadsheetApp.getActiveSpreadsheet();
 48 |   let dataSheet = ss.getSheetByName('Review Data');
 49 |   let rows = dataSheet.getDataRange();
 50 |   let numRows = rows.getNumRows();
 51 |   let values = rows.getValues();
 52 |   let headerRow = values[0];
 53 |   
 54 |   // Checks to see if "Entity Sentiment Data" sheet is present, and
 55 |   // if not, creates a new sheet and sets the header row.
 56 |   let entitySheet = ss.getSheetByName('Entity Sentiment Data');
 57 |   if (entitySheet == null) {
 58 |    ss.insertSheet('Entity Sentiment Data');
 59 |    let entitySheet = ss.getSheetByName('Entity Sentiment Data');
 60 |    let esHeaderRange = entitySheet.getRange(1,1,1,6);
 61 |    let esHeader = [['Review ID','Entity','Salience','Sentiment Score',
 62 |                     'Sentiment Magnitude','Number of mentions']];
 63 |    esHeaderRange.setValues(esHeader);
 64 |   };
 65 |   
 66 |   // Finds the column index for comments, language_detected, 
 67 |   // and comments_english columns.
 68 |   let textColumnIdx = headerRow.indexOf(COLUMN_NAME.COMMENTS);
 69 |   let entityColumnIdx = headerRow.indexOf(COLUMN_NAME.ENTITY);
 70 |   let idColumnIdx = headerRow.indexOf(COLUMN_NAME.ID);
 71 |   if (entityColumnIdx == -1) {
 72 |     Browser.msgBox("Error: Could not find the column named " + COLUMN_NAME.ENTITY + 
 73 |                    ". Please create an empty column with header \"entity_sentiment\" on the Review Data tab.");
 74 |     return; // bail
 75 |   };
 76 |   
 77 |   ss.toast("Analyzing entities and sentiment...");
 78 |   for (let i = 0; i < numRows; ++i) {
 79 |     let value = values[i];
 80 |     let commentEnCellVal = value[textColumnIdx];
 81 |     let entityCellVal = value[entityColumnIdx];
 82 |     let reviewId = value[idColumnIdx];
 83 |     
 84 |     // Calls retrieveEntitySentiment function for each row that has a comment 
 85 |     // and also an empty entity_sentiment cell value.
 86 |     if(commentEnCellVal && !entityCellVal) {
 87 |         let nlData = retrieveEntitySentiment(commentEnCellVal);
 88 |         // Pastes each entity and sentiment score into Entity Sentiment Data sheet.
 89 |         let newValues = []
 90 |         for (let entity in nlData.entities) {
 91 |           entity = nlData.entities [entity];
 92 |           let row = [reviewId, entity.name, entity.salience, entity.sentiment.score, 
 93 |                      entity.sentiment.magnitude, entity.mentions.length
 94 |                     ];
 95 |           newValues.push(row);
 96 |         }
 97 |       if(newValues.length) {
 98 |         entitySheet.getRange(entitySheet.getLastRow() + 1, 1, newValues.length, newValues[0].length).setValues(newValues);
 99 |       }
100 |         // Pastes "complete" into entity_sentiment column to denote completion of NL API call.
101 |         dataSheet.getRange(i+1, entityColumnIdx+1).setValue("complete");
102 |      }
103 |    }
104 | };
105 | 
106 | /**
107 |  * Calls the Cloud Natural Language API with a string of text to analyze
108 |  * entities and sentiment present in the string.
109 |  * @param {String} the string for entity sentiment analysis
110 |  * @return {Object} the entities and related sentiment present in the string
111 |  */
112 | function retrieveEntitySentiment (line) {
113 |   let apiKey = myApiKey;
114 |   let apiEndpoint = 'https://language.googleapis.com/v1/documents:analyzeEntitySentiment?key=' + apiKey;
115 |   // Creates a JSON request, with text string, language, type and encoding
116 |   let nlData = {
117 |     document: {
118 |       language: 'en-us',
119 |       type: 'PLAIN_TEXT',
120 |       content: line
121 |     },
122 |     encodingType: 'UTF8'
123 |   };
124 |   // Packages all of the options and the data together for the API call.
125 |   let nlOptions = {
126 |     method : 'post',
127 |     contentType: 'application/json',  
128 |     payload : JSON.stringify(nlData)
129 |   };
130 |   // Makes the API call.
131 |   let response = UrlFetchApp.fetch(apiEndpoint, nlOptions);
132 |   return JSON.parse(response);
133 | };


--------------------------------------------------------------------------------
/solutions/automations/folder-creation/Code.js:
--------------------------------------------------------------------------------
 1 | /*
 2 | Copyright 2022 Google LLC
 3 | Licensed under the Apache License, Version 2.0 (the "License");
 4 | you may not use this file except in compliance with the License.
 5 | You may obtain a copy of the License at
 6 |     https://www.apache.org/licenses/LICENSE-2.0
 7 | Unless required by applicable law or agreed to in writing, software
 8 | distributed under the License is distributed on an "AS IS" BASIS,
 9 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
10 | See the License for the specific language governing permissions and
11 | limitations under the License.
12 | */
13 | 
14 | /* 
15 | This function will create a new folder in the defined Shard Drive.
16 | You define the Shared Drive by adding its ID on line number 26.
17 | The parameter 'project' is passed in from the AppSheet app. 
18 | Please watch this video tutorial to see how to use this script: https://youtu.be/Utl57R7I2Cs
19 | */
20 | 
21 | function createNewFolder(project) {
22 |   const folder = Drive.Files.insert(
23 |     {
24 |       parents: [{ id: 'ADD YOUR SHARED DRIVE FOLDER ID HERE' }],
25 |       title: project,
26 |       mimeType: "application/vnd.google-apps.folder",
27 |     },
28 |     null,
29 |     { supportsAllDrives: true }
30 |   );
31 | 
32 |   return folder.alternateLink;
33 | }
34 | 


--------------------------------------------------------------------------------
/solutions/automations/folder-creation/README.md:
--------------------------------------------------------------------------------
 1 | # Folder creation
 2 | 
 3 | This code sample is part of a video tutorial on how to combine AppSheet and Apps Script.
 4 | 
 5 | You can watch the video tutorial to find out how to use the sample.
 6 | 
 7 | <p align="center">
 8 | <iframe width="560" height="315" src="https://www.youtube.com/embed/Utl57R7I2Cs" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
 9 | </p>
10 | 
11 | See the [Google Apps Script Documentation](https://developers.google.com/apps-script/advanced/drive) for additional information about the advanced Google Drive services.
12 | 


--------------------------------------------------------------------------------
/solutions/automations/generate-pdfs/Code.js:
--------------------------------------------------------------------------------
  1 | // To learn how to use this script, refer to the documentation:
  2 | // https://developers.google.com/apps-script/samples/automations/generate-pdfs
  3 | 
  4 | /*
  5 | Copyright 2022 Google LLC
  6 | 
  7 | Licensed under the Apache License, Version 2.0 (the "License");
  8 | you may not use this file except in compliance with the License.
  9 | You may obtain a copy of the License at
 10 | 
 11 |     https://www.apache.org/licenses/LICENSE-2.0
 12 | 
 13 | Unless required by applicable law or agreed to in writing, software
 14 | distributed under the License is distributed on an "AS IS" BASIS,
 15 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 16 | See the License for the specific language governing permissions and
 17 | limitations under the License.
 18 | */
 19 | 
 20 | // TODO: To test this solution, set EMAIL_OVERRIDE to true and set EMAIL_ADDRESS_OVERRIDE to your email address.
 21 | const EMAIL_OVERRIDE = false;
 22 | const EMAIL_ADDRESS_OVERRIDE = 'test@example.com';
 23 | 
 24 | // Application constants
 25 | const APP_TITLE = 'Generate and send PDFs';
 26 | const OUTPUT_FOLDER_NAME = "Customer PDFs";
 27 | const DUE_DATE_NUM_DAYS = 15
 28 | 
 29 | // Sheet name constants. Update if you change the names of the sheets.
 30 | const CUSTOMERS_SHEET_NAME = 'Customers';
 31 | const PRODUCTS_SHEET_NAME = 'Products';
 32 | const TRANSACTIONS_SHEET_NAME = 'Transactions';
 33 | const INVOICES_SHEET_NAME = 'Invoices';
 34 | const INVOICE_TEMPLATE_SHEET_NAME = 'Invoice Template';
 35 | 
 36 | // Email constants
 37 | const EMAIL_SUBJECT = 'Invoice Notification';
 38 | const EMAIL_BODY = 'Hello!\rPlease see the attached PDF document.';
 39 | 
 40 | 
 41 | /**
 42 |  * Iterates through the worksheet data populating the template sheet with 
 43 |  * customer data, then saves each instance as a PDF document.
 44 |  * 
 45 |  * Called by user via custom menu item.
 46 |  */
 47 | function processDocuments() {
 48 |   const ss = SpreadsheetApp.getActiveSpreadsheet();
 49 |   const customersSheet = ss.getSheetByName(CUSTOMERS_SHEET_NAME);
 50 |   const productsSheet = ss.getSheetByName(PRODUCTS_SHEET_NAME);
 51 |   const transactionsSheet = ss.getSheetByName(TRANSACTIONS_SHEET_NAME);
 52 |   const invoicesSheet = ss.getSheetByName(INVOICES_SHEET_NAME);
 53 |   const invoiceTemplateSheet = ss.getSheetByName(INVOICE_TEMPLATE_SHEET_NAME);
 54 | 
 55 |   // Gets data from the storage sheets as objects.
 56 |   const customers = dataRangeToObject(customersSheet);
 57 |   const products = dataRangeToObject(productsSheet);
 58 |   const transactions = dataRangeToObject(transactionsSheet);
 59 | 
 60 |   ss.toast('Creating Invoices', APP_TITLE, 1);
 61 |   const invoices = [];
 62 | 
 63 |   // Iterates for each customer calling createInvoiceForCustomer routine.
 64 |   customers.forEach(function (customer) {
 65 |     ss.toast(`Creating Invoice for ${customer.customer_name}`, APP_TITLE, 1);
 66 |     let invoice = createInvoiceForCustomer(
 67 |       customer, products, transactions, invoiceTemplateSheet, ss.getId());
 68 |     invoices.push(invoice);
 69 |   });
 70 |   // Writes invoices data to the sheet.
 71 |   invoicesSheet.getRange(2, 1, invoices.length, invoices[0].length).setValues(invoices);
 72 | }
 73 | 
 74 | /**
 75 |  * Processes each customer instance with passed in data parameters.
 76 |  * 
 77 |  * @param {object} customer - Object for the customer
 78 |  * @param {object} products - Object for all the products
 79 |  * @param {object} transactions - Object for all the transactions
 80 |  * @param {object} invoiceTemplateSheet - Object for the invoice template sheet
 81 |  * @param {string} ssId - Google Sheet ID     
 82 |  * Return {array} of instance customer invoice data
 83 |  */
 84 | function createInvoiceForCustomer(customer, products, transactions, templateSheet, ssId) {
 85 |   let customerTransactions = transactions.filter(function (transaction) {
 86 |     return transaction.customer_name == customer.customer_name;
 87 |   });
 88 | 
 89 |   // Clears existing data from the template.
 90 |   clearTemplateSheet();
 91 | 
 92 |   let lineItems = [];
 93 |   let totalAmount = 0;
 94 |   customerTransactions.forEach(function (lineItem) {
 95 |     let lineItemProduct = products.filter(function (product) {
 96 |       return product.sku_name == lineItem.sku;
 97 |     })[0];
 98 |     const qty = parseInt(lineItem.licenses);
 99 |     const price = parseFloat(lineItemProduct.price).toFixed(2);
100 |     const amount = parseFloat(qty * price).toFixed(2);
101 |     lineItems.push([lineItemProduct.sku_name, lineItemProduct.sku_description, '', qty, price, amount]);
102 |     totalAmount += parseFloat(amount);
103 |   });
104 | 
105 |   // Generates a random invoice number. You can replace with your own document ID method.
106 |   const invoiceNumber = Math.floor(100000 + Math.random() * 900000);
107 | 
108 |   // Calulates dates.
109 |   const todaysDate = new Date().toDateString()
110 |   const dueDate = new Date(Date.now() + 1000 * 60 * 60 * 24 * DUE_DATE_NUM_DAYS).toDateString()
111 | 
112 |   // Sets values in the template.
113 |   templateSheet.getRange('B10').setValue(customer.customer_name)
114 |   templateSheet.getRange('B11').setValue(customer.address)
115 |   templateSheet.getRange('F10').setValue(invoiceNumber)
116 |   templateSheet.getRange('F12').setValue(todaysDate)
117 |   templateSheet.getRange('F14').setValue(dueDate)
118 |   templateSheet.getRange(18, 2, lineItems.length, 6).setValues(lineItems);
119 | 
120 |   // Cleans up and creates PDF.
121 |   SpreadsheetApp.flush();
122 |   Utilities.sleep(500); // Using to offset any potential latency in creating .pdf
123 |   const pdf = createPDF(ssId, templateSheet, `Invoice#${invoiceNumber}-${customer.customer_name}`);
124 |   return [invoiceNumber, todaysDate, customer.customer_name, customer.email, '', totalAmount, dueDate, pdf.getUrl(), 'No'];
125 | }
126 | 
127 | /**
128 | * Resets the template sheet by clearing out customer data.
129 | * You use this to prepare for the next iteration or to view blank
130 | * the template for design.
131 | * 
132 | * Called by createInvoiceForCustomer() or by the user via custom menu item.
133 | */
134 | function clearTemplateSheet() {
135 | 
136 |   const ss = SpreadsheetApp.getActiveSpreadsheet();
137 |   const templateSheet = ss.getSheetByName(INVOICE_TEMPLATE_SHEET_NAME);
138 |   // Clears existing data from the template.
139 |   const rngClear = templateSheet.getRangeList(['B10:B11', 'F10', 'F12', 'F14']).getRanges()
140 |   rngClear.forEach(function (cell) {
141 |     cell.clearContent();
142 |   });
143 |   // This sample only accounts for six rows of data 'B18:G24'. You can extend or make dynamic as necessary.
144 |   templateSheet.getRange(18, 2, 7, 6).clearContent();
145 | }
146 | 
147 | /**
148 |  * Creates a PDF for the customer given sheet.
149 |  * @param {string} ssId - Id of the Google Spreadsheet
150 |  * @param {object} sheet - Sheet to be converted as PDF
151 |  * @param {string} pdfName - File name of the PDF being created
152 |  * @return {file object} PDF file as a blob
153 |  */
154 | function createPDF(ssId, sheet, pdfName) {
155 |   const fr = 0, fc = 0, lc = 9, lr = 27;
156 |   const url = "https://docs.google.com/spreadsheets/d/" + ssId + "/export" +
157 |     "?format=pdf&" +
158 |     "size=7&" +
159 |     "fzr=true&" +
160 |     "portrait=true&" +
161 |     "fitw=true&" +
162 |     "gridlines=false&" +
163 |     "printtitle=false&" +
164 |     "top_margin=0.5&" +
165 |     "bottom_margin=0.25&" +
166 |     "left_margin=0.5&" +
167 |     "right_margin=0.5&" +
168 |     "sheetnames=false&" +
169 |     "pagenum=UNDEFINED&" +
170 |     "attachment=true&" +
171 |     "gid=" + sheet.getSheetId() + '&' +
172 |     "r1=" + fr + "&c1=" + fc + "&r2=" + lr + "&c2=" + lc;
173 | 
174 |   const params = { method: "GET", headers: { "authorization": "Bearer " + ScriptApp.getOAuthToken() } };
175 |   const blob = UrlFetchApp.fetch(url, params).getBlob().setName(pdfName + '.pdf');
176 | 
177 |   // Gets the folder in Drive where the PDFs are stored.
178 |   const folder = getFolderByName_(OUTPUT_FOLDER_NAME);
179 | 
180 |   const pdfFile = folder.createFile(blob);
181 |   return pdfFile;
182 | }
183 | 
184 | 
185 | /**
186 |  * Sends emails with PDF as an attachment.
187 |  * Checks/Sets 'Email Sent' column to 'Yes' to avoid resending.
188 |  * 
189 |  * Called by user via custom menu item.
190 |  */
191 | function sendEmails() {
192 |   const ss = SpreadsheetApp.getActiveSpreadsheet();
193 |   const invoicesSheet = ss.getSheetByName(INVOICES_SHEET_NAME);
194 |   const invoicesData = invoicesSheet.getRange(1, 1, invoicesSheet.getLastRow(), invoicesSheet.getLastColumn()).getValues();
195 |   const keysI = invoicesData.splice(0, 1)[0];
196 |   const invoices = getObjects(invoicesData, createObjectKeys(keysI));
197 |   ss.toast('Emailing Invoices', APP_TITLE, 1);
198 |   invoices.forEach(function (invoice, index) {
199 | 
200 |     if (invoice.email_sent != 'Yes') {
201 |       ss.toast(`Emailing Invoice for ${invoice.customer}`, APP_TITLE, 1);
202 | 
203 |       const fileId = invoice.invoice_link.match(/[-\w]{25,}(?!.*[-\w]{25,})/)
204 |       const attachment = DriveApp.getFileById(fileId);
205 | 
206 |       let recipient = invoice.email;
207 |       if (EMAIL_OVERRIDE) {
208 |         recipient = EMAIL_ADDRESS_OVERRIDE
209 |       }
210 | 
211 |       GmailApp.sendEmail(recipient, EMAIL_SUBJECT, EMAIL_BODY, {
212 |         attachments: [attachment.getAs(MimeType.PDF)],
213 |         name: APP_TITLE
214 |       });
215 |       invoicesSheet.getRange(index + 2, 9).setValue('Yes');
216 |     }
217 |   });
218 | }
219 | 
220 | /**
221 |  * Helper function that turns sheet data range into an object. 
222 |  * 
223 |  * @param {SpreadsheetApp.Sheet} sheet - Sheet to process
224 |  * Return {object} of a sheet's datarange as an object 
225 |  */
226 | function dataRangeToObject(sheet) {
227 |   const dataRange = sheet.getRange(1, 1, sheet.getLastRow(), sheet.getLastColumn()).getValues();
228 |   const keys = dataRange.splice(0, 1)[0];
229 |   return getObjects(dataRange, createObjectKeys(keys));
230 | }
231 | 
232 | /**
233 |  * Utility function for mapping sheet data to objects.
234 |  */
235 | function getObjects(data, keys) {
236 |   let objects = [];
237 |   for (let i = 0; i < data.length; ++i) {
238 |     let object = {};
239 |     let hasData = false;
240 |     for (let j = 0; j < data[i].length; ++j) {
241 |       let cellData = data[i][j];
242 |       if (isCellEmpty(cellData)) {
243 |         continue;
244 |       }
245 |       object[keys[j]] = cellData;
246 |       hasData = true;
247 |     }
248 |     if (hasData) {
249 |       objects.push(object);
250 |     }
251 |   }
252 |   return objects;
253 | }
254 | // Creates object keys for column headers.
255 | function createObjectKeys(keys) {
256 |   return keys.map(function (key) {
257 |     return key.replace(/\W+/g, '_').toLowerCase();
258 |   });
259 | }
260 | // Returns true if the cell where cellData was read from is empty.
261 | function isCellEmpty(cellData) {
262 |   return typeof (cellData) == "string" && cellData == "";
263 | }
264 | 


--------------------------------------------------------------------------------
/solutions/automations/generate-pdfs/Menu.js:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright 2022 Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *      http://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | /**
18 |  * @OnlyCurrentDoc
19 |  *
20 |  * The above comment specifies that this automation will only
21 |  * attempt to read or modify the spreadsheet this script is bound to.
22 |  * The authorization request message presented to users reflects the
23 |  * limited scope.
24 |  */
25 | 
26 | /**
27 |  * Creates a custom menu in the Google Sheets UI when the document is opened.
28 |  *
29 |  * @param {object} e The event parameter for a simple onOpen trigger.
30 |  */
31 | function onOpen(e) {
32 | 
33 | const menu = SpreadsheetApp.getUi().createMenu(APP_TITLE)
34 |   menu
35 |     .addItem('Process invoices', 'processDocuments')
36 |     .addItem('Send emails', 'sendEmails')
37 |     .addSeparator()
38 |     .addItem('Reset template', 'clearTemplateSheet')
39 |     .addToUi();
40 | }


--------------------------------------------------------------------------------
/solutions/automations/generate-pdfs/README.md:
--------------------------------------------------------------------------------
1 | # Generate and send PDFs from Google Sheets
2 | 
3 | See [developers.google.com](https://developers.google.com/apps-script/samples/automations/generate-pdfs) for additional details.
4 | 


--------------------------------------------------------------------------------
/solutions/automations/generate-pdfs/Utilities.js:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright 2022 Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *      http://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | /**
18 |  * Returns a Google Drive folder in the same location 
19 |  * in Drive where the spreadsheet is located. First, it checks if the folder
20 |  * already exists and returns that folder. If the folder doesn't already
21 |  * exist, the script creates a new one. The folder's name is set by the
22 |  * "OUTPUT_FOLDER_NAME" variable from the Code.gs file.
23 |  *
24 |  * @param {string} folderName - Name of the Drive folder. 
25 |  * @return {object} Google Drive Folder
26 |  */
27 | function getFolderByName_(folderName) {
28 | 
29 |   // Gets the Drive Folder of where the current spreadsheet is located.
30 |   const ssId = SpreadsheetApp.getActiveSpreadsheet().getId();
31 |   const parentFolder = DriveApp.getFileById(ssId).getParents().next();
32 | 
33 |   // Iterates the subfolders to check if the PDF folder already exists.
34 |   const subFolders = parentFolder.getFolders();
35 |   while (subFolders.hasNext()) {
36 |     let folder = subFolders.next();
37 | 
38 |     // Returns the existing folder if found.
39 |     if (folder.getName() === folderName) {
40 |       return folder;
41 |     }
42 |   }
43 |   // Creates a new folder if one does not already exist.
44 |   return parentFolder.createFolder(folderName)
45 |     .setDescription(`Created by ${APP_TITLE} application to store PDF output files`);
46 | }
47 | 
48 | /**
49 |  * Test function to run getFolderByName_.
50 |  * @prints a Google Drive FolderId.
51 |  */
52 | function test_getFolderByName() {
53 | 
54 |   // Gets the PDF folder in Drive.
55 |   const folder = getFolderByName_(OUTPUT_FOLDER_NAME);
56 | 
57 |   console.log(`Name: ${folder.getName()}\rID: ${folder.getId()}\rDescription: ${folder.getDescription()}`)
58 |   // To automatically delete test folder, uncomment the following code:
59 |   // folder.setTrashed(true);
60 | }


--------------------------------------------------------------------------------
/solutions/automations/import-csv-sheets/Code.js:
--------------------------------------------------------------------------------
  1 | // To learn more about this script, refer to the documentation: 
  2 | // https://developers.google.com/apps-script/samples/automations/import-csv-sheets
  3 | 
  4 | /*
  5 | Copyright 2022 Google LLC
  6 | 
  7 | Licensed under the Apache License, Version 2.0 (the "License");
  8 | you may not use this file except in compliance with the License.
  9 | You may obtain a copy of the License at
 10 | 
 11 |     https://www.apache.org/licenses/LICENSE-2.0
 12 | 
 13 | Unless required by applicable law or agreed to in writing, software
 14 | distributed under the License is distributed on an "AS IS" BASIS,
 15 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 16 | See the License for the specific language governing permissions and
 17 | limitations under the License.
 18 | */
 19 | 
 20 | /** 
 21 |  * This file contains the main functions that import data from CSV files into a Google Spreadsheet.
 22 |  */
 23 | 
 24 | // Application constants
 25 | const APP_TITLE = 'Trigger-driven CSV import [App Script Sample]'; // Application name
 26 | const APP_FOLDER = '[App Script sample] Import CSVs'; // Application primary folder
 27 | const SOURCE_FOLDER = 'Inbound CSV Files'; // Folder for the update files.
 28 | const PROCESSED_FOLDER = 'Processed CSV Files'; // Folder to hold processed files.
 29 | const SHEET_REPORT_NAME = 'Import CSVs'; // Name of destination spreadsheet.
 30 | 
 31 | // Application settings
 32 | const CSV_HEADER_EXIST = true;  // Set to true if CSV files have a header row, false if not.
 33 | const HANDLER_FUNCTION = 'updateApplicationSheet'; // Function called by installable trigger to run data processing.
 34 | 
 35 | /**
 36 |  * Installs a time-driven trigger that runs daily to import CSVs into the main application spreadsheet.
 37 |  * Prior to creating a new instance, removes any existing triggers to avoid duplication.
 38 |  * 
 39 |  * Called by setupSample() or run directly setting up the application.
 40 |  */
 41 | function installTrigger() {
 42 | 
 43 |   // Checks for an existing trigger to avoid creating duplicate instances.
 44 |   // Removes existing if found.
 45 |   const projectTriggers = ScriptApp.getProjectTriggers();
 46 |   for (var i = 0; i < projectTriggers.length; i++) {
 47 |     if (projectTriggers[i].getHandlerFunction() == HANDLER_FUNCTION) {
 48 |       console.log(`Existing trigger with Handler Function of '${HANDLER_FUNCTION}' removed.`);
 49 |       ScriptApp.deleteTrigger(projectTriggers[i]);
 50 |     }
 51 |   }
 52 |   // Creates the new trigger.
 53 |   let newTrigger = ScriptApp.newTrigger(HANDLER_FUNCTION)
 54 |     .timeBased()
 55 |     .atHour(23)   // Runs at 11 PM in the time zone of this script.
 56 |     .everyDays(1) // Runs once per day.
 57 |     .create();
 58 |   console.log(`New trigger with Handler Function of '${HANDLER_FUNCTION}' created.`);
 59 | }
 60 | 
 61 | /**
 62 |  * Handler function called by the trigger created with the "installTrigger" function.
 63 |  * Run this directly to execute the entire automation process of the application with a trigger.
 64 |  * 
 65 |  * Process: Iterates through CSV files located in the source folder (SOURCE_FOLDER),
 66 |  * and appends them to the end of destination spreadsheet (SHEET_REPORT_NAME).
 67 |  * Successfully processed CSV files are moved to the processed folder (PROCESSED_FOLDER) to avoid duplication.
 68 |  * Sends summary email with status of the import.
 69 |  */
 70 | function updateApplicationSheet() {
 71 | 
 72 |   // Gets application & supporting folders.
 73 |   const folderAppPrimary = getApplicationFolder_(APP_FOLDER);
 74 |   const folderSource = getFolder_(SOURCE_FOLDER);
 75 |   const folderProcessed = getFolder_(PROCESSED_FOLDER);
 76 | 
 77 |   // Gets the application's destination spreadsheet {Spreadsheet object}
 78 |   let objSpreadSheet = getSpreadSheet_(SHEET_REPORT_NAME, folderAppPrimary)
 79 | 
 80 |   // Creates arrays to track every CSV file, categorized as processed sucessfully or not.
 81 |   let filesProcessed = [];
 82 |   let filesNotProcessed = [];
 83 | 
 84 |   // Gets all CSV files found in the source folder.
 85 |   let cvsFiles = folderSource.getFilesByType(MimeType.CSV);
 86 | 
 87 |   // Iterates through each CSV file.
 88 |   while (cvsFiles.hasNext()) {
 89 | 
 90 |     let csvFile = cvsFiles.next();
 91 |     let isSuccess;
 92 | 
 93 |     // Appends the unprocessed CSV data into the Google Sheets spreadsheet.
 94 |     isSuccess = processCsv_(objSpreadSheet, csvFile);
 95 | 
 96 |     if (isSuccess) {
 97 |       // Moves the processed file to the processed folder to prevent future duplicate data imports.
 98 |       csvFile.moveTo(folderProcessed);
 99 |       // Logs the successfully processed file to the filesProcessed array.
100 |       filesProcessed.push(csvFile.getName());
101 |       console.log(`Successfully processed: ${csvFile.getName()}`);
102 | 
103 |     } else if (!isSuccess) {
104 |       // Doesn't move the unsuccesfully processed file so that it can be corrected and reprocessed later.
105 |       // Logs the unsuccessfully processed file to the filesNotProcessed array.
106 |       filesNotProcessed.push(csvFile.getName());
107 |       console.log(`Not processed: ${csvFile.getName()}`);
108 |     }
109 |   }
110 |   
111 |   // Prepares summary email.
112 |   // Gets variables to link to this Apps Script project.
113 |   const scriptId = ScriptApp.getScriptId();
114 |   const scriptUrl = DriveApp.getFileById(scriptId).getUrl();
115 |   const scriptName = DriveApp.getFileById(scriptId).getName();
116 | 
117 |   // Gets variables to link to the main application spreadsheet.
118 |   const sheetUrl = objSpreadSheet.getUrl()
119 |   const sheetName = objSpreadSheet.getName()   
120 | 
121 |   // Gets user email and timestamp.
122 |   const emailTo = Session.getEffectiveUser().getEmail();
123 |   const timestamp = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "yyyy-MM-dd HH:mm:ss zzzz");
124 | 
125 |   // Prepares lists and counts of processed CSV files.
126 |   let processedList = "";
127 |   const processedCount = filesProcessed.length
128 |   for (const processed of filesProcessed) {
129 |     processedList += processed + '<br>'
130 |   };
131 | 
132 |   const unProcessedCount = filesNotProcessed.length
133 |   let unProcessedList = "";
134 |   for (const unProcessed of filesNotProcessed) {
135 |     unProcessedList += unProcessed + '\n'
136 |   };
137 | 
138 |   // Assembles email body as html.
139 |   const eMailBody = `${APP_TITLE} ran an automated process at ${timestamp}.<br><br>` +
140 |     `<b>Files successfully updated:</b> ${processedCount}<br>` +
141 |     `${processedList}<br>` +
142 |     `<b>Files not updated:</b> ${unProcessedCount}<br>` +
143 |     `${unProcessedList}<br>` +
144 |     `<br>View all updates in the Google Sheets spreadsheet ` +
145 |     `<b><a href= "${sheetUrl}" target=\"_blank\">${sheetName}</a></b>.<br>` +
146 |     `<br>*************<br>` +
147 |     `<br>This email was generated by Google Apps Script. ` +
148 |     `To learn more about this application or make changes, open the script project below: <br>` +
149 |     `<a href= "${scriptUrl}" target=\"_blank\">${scriptName}</a>`
150 | 
151 |   MailApp.sendEmail({
152 |     to: emailTo,
153 |     subject: `Automated email from ${APP_TITLE}`,
154 |     htmlBody: eMailBody
155 |   });
156 |   console.log(`Email sent to ${emailTo}`);
157 | }
158 | 
159 | /**
160 |  * Parses CSV data into an array and appends it after the last row in the destination spreadsheet.
161 |  * 
162 |  * @return {boolean} true if the update is successful, false if unexpected errors occur.
163 |  */
164 | function processCsv_(objSpreadSheet, csvFile) {
165 | 
166 |   try {
167 |     // Gets the first sheet of the destination spreadsheet.
168 |     let sheet = objSpreadSheet.getSheets()[0];
169 | 
170 |     // Parses CSV file into data array.
171 |     let data = Utilities.parseCsv(csvFile.getBlob().getDataAsString());
172 | 
173 |     // Omits header row if application variable CSV_HEADER_EXIST is set to 'true'.
174 |     if (CSV_HEADER_EXIST) {
175 |       data.splice(0, 1);
176 |     }
177 |     // Gets the row and column coordinates for next available range in the spreadsheet. 
178 |     let startRow = sheet.getLastRow() + 1;
179 |     let startCol = 1;
180 |     // Determines the incoming data size.
181 |     let numRows = data.length;
182 |     let numColumns = data[0].length;
183 | 
184 |     // Appends data into the sheet.
185 |     sheet.getRange(startRow, startCol, numRows, numColumns).setValues(data);
186 |     return true; // Success.
187 | 
188 |   } catch {
189 |     return false; // Failure. Checks for CSV data file error.
190 |   }
191 | }
192 | 


--------------------------------------------------------------------------------
/solutions/automations/import-csv-sheets/README.md:
--------------------------------------------------------------------------------
1 | # Import CSV data to a spreadsheet
2 | 
3 | See [developers.google.com](https://developers.google.com/apps-script/samples/automations/import-csv-sheets) for additional details.
4 | 


--------------------------------------------------------------------------------
/solutions/automations/import-csv-sheets/SampleData.js:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright 2022 Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *      http://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | 
 17 | /** 
 18 |  * This file contains functions to access headings and data for sample files.
 19 |  * 
 20 |  * Sample data is stored in the variable SAMPLE_DATA.
 21 |  */
 22 | 
 23 | // Fictitious sample data.
 24 | const SAMPLE_DATA = {
 25 |   "headings": [
 26 |     "PropertyName",
 27 |     "LeaseID",
 28 |     "LeaseLocation",
 29 |     "OwnerName",
 30 |     "SquareFootage",
 31 |     "RenewDate",
 32 |     "LastAmount",
 33 |     "LastPaymentDate",
 34 |     "Revenue"
 35 |   ],
 36 |   "csvFiles": [
 37 |     {
 38 |       "name": "Sample One.CSV",
 39 |       "rows": [
 40 |         {
 41 |           "PropertyName": "The Modern Building",
 42 |           "LeaseID": "271312",
 43 |           "LeaseLocation": "Mountain View CA 94045",
 44 |           "OwnerName": "Yuri",
 45 |           "SquareFootage": "17500",
 46 |           "RenewDate": "12/15/2022",
 47 |           "LastAmount": "100000",
 48 |           "LastPaymentDate": "3/01/2022",
 49 |           "Revenue": "12000"
 50 |         },
 51 |         {
 52 |           "PropertyName": "Garage @ 45",
 53 |           "LeaseID": "271320",
 54 |           "LeaseLocation": "Mountain View CA 94045",
 55 |           "OwnerName": "Luka",
 56 |           "SquareFootage": "1000",
 57 |           "RenewDate": "6/2/2022",
 58 |           "LastAmount": "50000",
 59 |           "LastPaymentDate": "4/01/2022",
 60 |           "Revenue": "20000"
 61 |         },
 62 |         {
 63 |           "PropertyName": "Office Park Deluxe",
 64 |           "LeaseID": "271301",
 65 |           "LeaseLocation": "Mountain View CA 94045",
 66 |           "OwnerName": "Sasha",
 67 |           "SquareFootage": "5000",
 68 |           "RenewDate": "6/2/2022",
 69 |           "LastAmount": "25000",
 70 |           "LastPaymentDate": "4/01/2022",
 71 |           "Revenue": "1200"
 72 |         }
 73 |       ]
 74 |     },
 75 |     {
 76 |       "name": "Sample Two.CSV",
 77 |       "rows": [
 78 |         {
 79 |           "PropertyName": "Tours Jumelles Minuscules",
 80 |           "LeaseID": "271260",
 81 |           "LeaseLocation": "8 Rue du Nom Fictif 341 Paris",
 82 |           "OwnerName": "Lucian",
 83 |           "SquareFootage": "1000000",
 84 |           "RenewDate": "7/14/2022",
 85 |           "LastAmount": "1250000",
 86 |           "LastPaymentDate": "5/01/2022",
 87 |           "Revenue": "77777"
 88 |         },
 89 |         {
 90 |           "PropertyName": "Barraca da Praia",
 91 |           "LeaseID": "271281",
 92 |           "LeaseLocation": "Avenida da Pastelaria 1903 Lisbon 1229-076",
 93 |           "OwnerName": "Raha",
 94 |           "SquareFootage": "1000",
 95 |           "RenewDate": "6/2/2022",
 96 |           "LastAmount": "50000",
 97 |           "LastPaymentDate": "4/01/2022",
 98 |           "Revenue": "20000"
 99 |         }
100 |       ]
101 |     },
102 |     {
103 |       "name": "Sample Three.CSV",
104 |       "rows": [
105 |         {
106 |           "PropertyName": "Round Building in the Square",
107 |           "LeaseID": "371260",
108 |           "LeaseLocation": "8 Rue du Nom Fictif 341 Paris",
109 |           "OwnerName": "Charlie",
110 |           "SquareFootage": "75000",
111 |           "RenewDate": "8/1/2022",
112 |           "LastAmount": "250000",
113 |           "LastPaymentDate": "6/01/2022",
114 |           "Revenue": "22222"
115 |         },
116 |         {
117 |           "PropertyName": "Square Building in the Round",
118 |           "LeaseID": "371281",
119 |           "LeaseLocation": "Avenida da Pastelaria 1903 Lisbon 1229-076",
120 |           "OwnerName": "Lee",
121 |           "SquareFootage": "10000",
122 |           "RenewDate": "6/2/2022",
123 |           "LastAmount": "5000",
124 |           "LastPaymentDate": "4/01/2022",
125 |           "Revenue": "1800"
126 |         }
127 |       ]
128 |     }
129 |   ]
130 | }
131 | 
132 | 
133 | /**
134 |  * Returns headings for use in destination spreadsheet and CSV files.
135 |  * @return {string[][]} array of each column heading as string.
136 |  */
137 | function getHeadings() {
138 |   let headings = [[]];
139 |   for (let i in SAMPLE_DATA.headings)
140 |     headings[0].push(SAMPLE_DATA.headings[i]);
141 |   return (headings)
142 | }
143 | 
144 | /**
145 |  * Returns CSV file names and content to create sample CSV files.
146 |  * @return {object[]} {"file": ["name","csv"]}
147 |  */
148 | function getCSVFilesData() {
149 | 
150 |   let files = [];
151 | 
152 |   // Gets headings once - same for all files/rows.
153 |   let csvHeadings = "";
154 |   for (let i in SAMPLE_DATA.headings)
155 |     csvHeadings += (SAMPLE_DATA.headings[i] + ',');
156 | 
157 |   // Gets data for each file by rows.
158 |   for (let i in SAMPLE_DATA.csvFiles) {
159 |     let sampleCSV = "";
160 |     sampleCSV += csvHeadings;
161 |     let fileName = SAMPLE_DATA.csvFiles[i].name
162 |     for (let j in SAMPLE_DATA.csvFiles[i].rows) {
163 |       sampleCSV += '\n'
164 |       for (let k in SAMPLE_DATA.csvFiles[i].rows[j]) {
165 |         sampleCSV += SAMPLE_DATA.csvFiles[i].rows[j][k] + ','
166 |       }
167 |     }
168 |     files.push({ name: fileName, csv: sampleCSV })
169 |   }
170 |   return (files)
171 | }
172 | 
173 | /*
174 |  * Checks data functions are working as necessary.
175 |  */
176 | function test_getHeadings() {
177 |   let h = getHeadings()
178 |   console.log(h);
179 |   console.log(h[0].length);
180 | }
181 | 
182 | function test_getCSVFilesData() {
183 |   const csvFiles = getCSVFilesData();
184 |   console.log(csvFiles)
185 | 
186 |   for (const file of csvFiles) {
187 |     console.log(file.name)
188 |     console.log(file.csv)
189 |   }
190 | }


--------------------------------------------------------------------------------
/solutions/automations/import-csv-sheets/SetupSample.js:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright 2022 Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *      http://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | 
 17 | /** 
 18 |  * This file contains functions that set up the folders and sample files used to demo the application.
 19 |  * 
 20 |  * Sample data for the application is stored in the SampleData.gs file.
 21 |  */
 22 | 
 23 | // Global variables for sample setup.
 24 | const INCLUDE_SAMPLE_DATA_FILES = true; // Set to true to create sample data files, false to skip.
 25 | 
 26 | /**
 27 |  * Runs the setup for the sample. 
 28 |  * 1) Creates the application folder and subfolders for unprocessed/processed CSV files.
 29 |  *    from global variables APP_FOLDER | SOURCE_FOLDER | PROCESSED_FOLDER
 30 |  * 2) Creates the sample Sheets spreadsheet in the application folder.
 31 |  *    from global variable SHEET_REPORT_NAME 
 32 |  * 3) Creates CSV files from sample data in the unprocessed files folder. 
 33 |  *    from variable SAMPLE_DATA in SampleData.gs.
 34 |  * 4) Creates an installable trigger to run process automatically at a specified time interval.
 35 |  */
 36 | function setupSample() {
 37 | 
 38 |   console.log(`Application setup for: ${APP_TITLE}`)
 39 | 
 40 |   // Creates application folder.
 41 |   const folderAppPrimary = getApplicationFolder_(APP_FOLDER);
 42 |   // Creates supporting folders.
 43 |   const folderSource = getFolder_(SOURCE_FOLDER);
 44 |   const folderProcessed = getFolder_(PROCESSED_FOLDER);
 45 | 
 46 |   console.log(`Application folders: ${folderAppPrimary.getName()}, ${folderSource.getName()}, ${folderProcessed.getName()}`)
 47 | 
 48 |   if (INCLUDE_SAMPLE_DATA_FILES) {
 49 | 
 50 |     // Sets up primary destination spreadsheet
 51 |     const sheet = setupPrimarySpreadsheet_(folderAppPrimary);
 52 | 
 53 |     // Gets the CSV files data - refer to the SampleData.gs file to view.
 54 |     const csvFiles = getCSVFilesData();
 55 | 
 56 |     // Processes each CSV file.
 57 |     for (const file of csvFiles) {
 58 |       // Creates CSV file in source folder if it doesn't exist.
 59 |       if (!fileExists_(file.name, folderSource)) {
 60 |         let csvFileId = DriveApp.createFile(file.name, file.csv, MimeType.CSV);
 61 |         console.log(`Created Sample CSV: ${file.name}`)
 62 |         csvFileId.moveTo(folderSource);
 63 |       }
 64 |     }
 65 |   }
 66 |   // Installs (or recreates) project trigger
 67 |   installTrigger()
 68 | 
 69 |   console.log(`Setup completed for: ${APP_TITLE}`)
 70 | }
 71 | 
 72 | /**
 73 |  * 
 74 |  */
 75 | function setupPrimarySpreadsheet_(folderAppPrimary) {
 76 | 
 77 |   // Creates the report destination spreadsheet if doesn't exist.
 78 |   if (!fileExists_(SHEET_REPORT_NAME, folderAppPrimary)) {
 79 | 
 80 |     // Creates new destination spreadsheet (report) with cell size of 20 x 10. 
 81 |     const sheet = SpreadsheetApp.create(SHEET_REPORT_NAME, 20, 10);
 82 | 
 83 |     // Adds the sample data headings.
 84 |     let sheetHeadings = getHeadings();
 85 |     sheet.getSheets()[0].getRange(1, 1, 1, sheetHeadings[0].length).setValues(sheetHeadings);
 86 |     SpreadsheetApp.flush();
 87 |     // Moves to primary application root folder.
 88 |     DriveApp.getFileById(sheet.getId()).moveTo(folderAppPrimary)
 89 | 
 90 |     console.log(`Created file: ${SHEET_REPORT_NAME} In folder: ${folderAppPrimary.getName()}.`)
 91 |     return sheet;
 92 |   }
 93 | }
 94 | 
 95 | /**
 96 |  * Moves sample content to Drive trash & uninstalls trigger.
 97 |  * This function removes all folders and content related to this application.
 98 |  */
 99 | function removeSample() {
100 |   getApplicationFolder_(APP_FOLDER).setTrashed(true);
101 |   console.log(`'${APP_FOLDER}' contents have been moved to Drive Trash folder.`)
102 | 
103 |   // Removes existing trigger if found.
104 |   const projectTriggers = ScriptApp.getProjectTriggers();
105 |   for (var i = 0; i < projectTriggers.length; i++) {
106 |     if (projectTriggers[i].getHandlerFunction() == HANDLER_FUNCTION) {
107 |       console.log(`Existing trigger with handler function of '${HANDLER_FUNCTION}' removed.`);
108 |       ScriptApp.deleteTrigger(projectTriggers[i]);
109 |     }
110 |   }
111 | }


--------------------------------------------------------------------------------
/solutions/automations/import-csv-sheets/Utilities.js:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright 2022 Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *      http://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | 
 17 | /** 
 18 |  * This file contains utility functions that work with application's folder and files.
 19 |  */
 20 | 
 21 | /**
 22 |  * Gets application destination spreadsheet from a given folder
 23 |  * Returns new sample version if orignal is not found. 
 24 |  * 
 25 |  * @param {string} fileName - Name of the file to test for.
 26 |  * @param {object} objFolder - Folder object in which to search.
 27 |  * @return {object} Spreadsheet object.
 28 |  */
 29 | function getSpreadSheet_(fileName, objFolder) {
 30 | 
 31 |   let files = objFolder.getFilesByName(fileName);
 32 | 
 33 |   while (files.hasNext()) {
 34 |     let file = files.next();
 35 |     let fileId = file.getId();
 36 | 
 37 |     const existingSpreadsheet = SpreadsheetApp.openById(fileId);
 38 |     return existingSpreadsheet;
 39 |   }
 40 | 
 41 |   // If application destination spreadsheet is missing, creates a new sample version.
 42 |   const folderAppPrimary = getApplicationFolder_(APP_FOLDER);
 43 |   const sampleSheet = setupPrimarySpreadsheet_(folderAppPrimary);
 44 |   return sampleSheet;
 45 | }
 46 | 
 47 | /**
 48 |  * Tests if a file exists within a given folder.
 49 |  * 
 50 |  * @param {string} fileName - Name of the file to test for.
 51 |  * @param {object} objFolder - Folder object in which to search.
 52 |  * @return {boolean} true if found in folder, false if not.
 53 |  */
 54 | function fileExists_(fileName, objFolder) {
 55 | 
 56 |   let files = objFolder.getFilesByName(fileName);
 57 | 
 58 |   while (files.hasNext()) {
 59 |     let file = files.next();
 60 |     console.log(`${file.getName()} already exists.`)
 61 |     return true;
 62 |   }
 63 |   return false;
 64 | }
 65 | 
 66 | /** 
 67 |  * Returns folder named in folderName parameter. 
 68 |  * Checks if folder already exists,  creates it if it doesn't.
 69 |  *
 70 |  * @param {string} folderName - Name of the Drive folder. 
 71 |  * @return {object} Google Drive Folder
 72 |  */
 73 | function getFolder_(folderName) {
 74 | 
 75 |   // Gets the primary folder for the application.
 76 |   const parentFolder = getApplicationFolder_();
 77 | 
 78 |   // Iterates subfolders to check if folder already exists.
 79 |   const subFolders = parentFolder.getFolders();
 80 |   while (subFolders.hasNext()) {
 81 |     let folder = subFolders.next();
 82 | 
 83 |     // Returns the existing folder if found.
 84 |     if (folder.getName() === folderName) {
 85 |       return folder;
 86 |     }
 87 |   }
 88 |   // Creates a new folder if one doesn't already exist.
 89 |   return parentFolder.createFolder(folderName)
 90 |     .setDescription(`Supporting folder created by ${APP_TITLE}.`);
 91 | }
 92 | 
 93 | /** 
 94 |  * Returns the primary folder as named by the APP_FOLDER variable in the Code.gs file.
 95 |  * Checks if folder already exists to avoid duplication.
 96 |  * Creates new instance if existing folder not found.
 97 |  *
 98 |  * @return {object} Google Drive Folder
 99 |  */
100 | function getApplicationFolder_() {
101 | 
102 |   // Gets root folder, currently set to 'My Drive'
103 |   const parentFolder = DriveApp.getRootFolder();
104 | 
105 |   // Iterates through the subfolders to check if folder already exists.
106 |   const subFolders = parentFolder.getFolders();
107 |   while (subFolders.hasNext()) {
108 |     let folder = subFolders.next();
109 | 
110 |     // Returns the existing folder if found.
111 |     if (folder.getName() === APP_FOLDER) {
112 |       return folder;
113 |     }
114 |   }
115 |   // Creates a new folder if one doesn't already exist.
116 |   return parentFolder.createFolder(APP_FOLDER)
117 |     .setDescription(`Main application folder created by ${APP_TITLE}.`);
118 | }
119 | 
120 | /**
121 |  * Tests getApplicationFolder_ and getFolder_
122 |  * @logs details of created Google Drive folder.
123 |  */
124 | function test_getFolderByName() {
125 | 
126 |   let folder = getApplicationFolder_()
127 |   console.log(`Name: ${folder.getName()}\rID: ${folder.getId()}\rURL:${folder.getUrl()}\rDescription: ${folder.getDescription()}`)
128 |   // Uncomment the following to automatically delete test folder.
129 |   // folder.setTrashed(true);
130 | 
131 |   folder = getFolder_(SOURCE_FOLDER);
132 |   console.log(`Name: ${folder.getName()}\rID: ${folder.getId()}\rURL:${folder.getUrl()}\rDescription: ${folder.getDescription()}`)
133 |   // Uncomment the following to automatically delete test folder.
134 |   // folder.setTrashed(true);
135 | 
136 |   folder = getFolder_(PROCESSED_FOLDER);
137 |   console.log(`Name: ${folder.getName()}\rID: ${folder.getId()}\rURL:${folder.getUrl()}\rDescription: ${folder.getDescription()}`)
138 |   // Uncomment the following to automatically delete test folder.
139 |   // folder.setTrashed(true);
140 | 
141 | 
142 | }


--------------------------------------------------------------------------------
/solutions/automations/mail-merge/Code.js:
--------------------------------------------------------------------------------
  1 | // To learn how to use this script, refer to the documentation:
  2 | // https://developers.google.com/apps-script/samples/automations/mail-merge
  3 | 
  4 | /*
  5 | Copyright 2022 Martin Hawksey
  6 | 
  7 | Licensed under the Apache License, Version 2.0 (the "License");
  8 | you may not use this file except in compliance with the License.
  9 | You may obtain a copy of the License at
 10 | 
 11 |     https://www.apache.org/licenses/LICENSE-2.0
 12 | 
 13 | Unless required by applicable law or agreed to in writing, software
 14 | distributed under the License is distributed on an "AS IS" BASIS,
 15 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 16 | See the License for the specific language governing permissions and
 17 | limitations under the License.
 18 | */
 19 |  
 20 | /**
 21 |  * @OnlyCurrentDoc
 22 | */
 23 |  
 24 | /**
 25 |  * Change these to match the column names you are using for email 
 26 |  * recipient addresses and email sent column.
 27 | */
 28 | const RECIPIENT_COL  = "Recipient";
 29 | const EMAIL_SENT_COL = "Email Sent";
 30 |  
 31 | /** 
 32 |  * Creates the menu item "Mail Merge" for user to run scripts on drop-down.
 33 |  */
 34 | function onOpen() {
 35 |   const ui = SpreadsheetApp.getUi();
 36 |   ui.createMenu('Mail Merge')
 37 |       .addItem('Send Emails', 'sendEmails')
 38 |       .addToUi();
 39 | }
 40 |  
 41 | /**
 42 |  * Sends emails from sheet data.
 43 |  * @param {string} subjectLine (optional) for the email draft message
 44 |  * @param {Sheet} sheet to read data from
 45 | */
 46 | function sendEmails(subjectLine, sheet=SpreadsheetApp.getActiveSheet()) {
 47 |   // option to skip browser prompt if you want to use this code in other projects
 48 |   if (!subjectLine){
 49 |     subjectLine = Browser.inputBox("Mail Merge", 
 50 |                                       "Type or copy/paste the subject line of the Gmail " +
 51 |                                       "draft message you would like to mail merge with:",
 52 |                                       Browser.Buttons.OK_CANCEL);
 53 |                                       
 54 |     if (subjectLine === "cancel" || subjectLine == ""){ 
 55 |     // If no subject line, finishes up
 56 |     return;
 57 |     }
 58 |   }
 59 |   
 60 |   // Gets the draft Gmail message to use as a template
 61 |   const emailTemplate = getGmailTemplateFromDrafts_(subjectLine);
 62 |   
 63 |   // Gets the data from the passed sheet
 64 |   const dataRange = sheet.getDataRange();
 65 |   // Fetches displayed values for each row in the Range HT Andrew Roberts 
 66 |   // https://mashe.hawksey.info/2020/04/a-bulk-email-mail-merge-with-gmail-and-google-sheets-solution-evolution-using-v8/#comment-187490
 67 |   // @see https://developers.google.com/apps-script/reference/spreadsheet/range#getdisplayvalues
 68 |   const data = dataRange.getDisplayValues();
 69 | 
 70 |   // Assumes row 1 contains our column headings
 71 |   const heads = data.shift(); 
 72 |   
 73 |   // Gets the index of the column named 'Email Status' (Assumes header names are unique)
 74 |   // @see http://ramblings.mcpher.com/Home/excelquirks/gooscript/arrayfunctions
 75 |   const emailSentColIdx = heads.indexOf(EMAIL_SENT_COL);
 76 |   
 77 |   // Converts 2d array into an object array
 78 |   // See https://stackoverflow.com/a/22917499/1027723
 79 |   // For a pretty version, see https://mashe.hawksey.info/?p=17869/#comment-184945
 80 |   const obj = data.map(r => (heads.reduce((o, k, i) => (o[k] = r[i] || '', o), {})));
 81 | 
 82 |   // Creates an array to record sent emails
 83 |   const out = [];
 84 | 
 85 |   // Loops through all the rows of data
 86 |   obj.forEach(function(row, rowIdx){
 87 |     // Only sends emails if email_sent cell is blank and not hidden by a filter
 88 |     if (row[EMAIL_SENT_COL] == ''){
 89 |       try {
 90 |         const msgObj = fillInTemplateFromObject_(emailTemplate.message, row);
 91 | 
 92 |         // See https://developers.google.com/apps-script/reference/gmail/gmail-app#sendEmail(String,String,String,Object)
 93 |         // If you need to send emails with unicode/emoji characters change GmailApp for MailApp
 94 |         // Uncomment advanced parameters as needed (see docs for limitations)
 95 |         GmailApp.sendEmail(row[RECIPIENT_COL], msgObj.subject, msgObj.text, {
 96 |           htmlBody: msgObj.html,
 97 |           // bcc: 'a.bcc@email.com',
 98 |           // cc: 'a.cc@email.com',
 99 |           // from: 'an.alias@email.com',
100 |           // name: 'name of the sender',
101 |           // replyTo: 'a.reply@email.com',
102 |           // noReply: true, // if the email should be sent from a generic no-reply email address (not available to gmail.com users)
103 |           attachments: emailTemplate.attachments,
104 |           inlineImages: emailTemplate.inlineImages
105 |         });
106 |         // Edits cell to record email sent date
107 |         out.push([new Date()]);
108 |       } catch(e) {
109 |         // modify cell to record error
110 |         out.push([e.message]);
111 |       }
112 |     } else {
113 |       out.push([row[EMAIL_SENT_COL]]);
114 |     }
115 |   });
116 |   
117 |   // Updates the sheet with new data
118 |   sheet.getRange(2, emailSentColIdx+1, out.length).setValues(out);
119 |   
120 |   /**
121 |    * Get a Gmail draft message by matching the subject line.
122 |    * @param {string} subject_line to search for draft message
123 |    * @return {object} containing the subject, plain and html message body and attachments
124 |   */
125 |   function getGmailTemplateFromDrafts_(subject_line){
126 |     try {
127 |       // get drafts
128 |       const drafts = GmailApp.getDrafts();
129 |       // filter the drafts that match subject line
130 |       const draft = drafts.filter(subjectFilter_(subject_line))[0];
131 |       // get the message object
132 |       const msg = draft.getMessage();
133 | 
134 |       // Handles inline images and attachments so they can be included in the merge
135 |       // Based on https://stackoverflow.com/a/65813881/1027723
136 |       // Gets all attachments and inline image attachments
137 |       const allInlineImages = draft.getMessage().getAttachments({includeInlineImages: true,includeAttachments:false});
138 |       const attachments = draft.getMessage().getAttachments({includeInlineImages: false});
139 |       const htmlBody = msg.getBody(); 
140 | 
141 |       // Creates an inline image object with the image name as key 
142 |       // (can't rely on image index as array based on insert order)
143 |       const img_obj = allInlineImages.reduce((obj, i) => (obj[i.getName()] = i, obj) ,{});
144 | 
145 |       //Regexp searches for all img string positions with cid
146 |       const imgexp = RegExp('<img.*?src="cid:(.*?)".*?alt="(.*?)"[^\>]+>', 'g');
147 |       const matches = [...htmlBody.matchAll(imgexp)];
148 | 
149 |       //Initiates the allInlineImages object
150 |       const inlineImagesObj = {};
151 |       // built an inlineImagesObj from inline image matches
152 |       matches.forEach(match => inlineImagesObj[match[1]] = img_obj[match[2]]);
153 | 
154 |       return {message: {subject: subject_line, text: msg.getPlainBody(), html:htmlBody}, 
155 |               attachments: attachments, inlineImages: inlineImagesObj };
156 |     } catch(e) {
157 |       throw new Error("Oops - can't find Gmail draft");
158 |     }
159 | 
160 |     /**
161 |      * Filter draft objects with the matching subject linemessage by matching the subject line.
162 |      * @param {string} subject_line to search for draft message
163 |      * @return {object} GmailDraft object
164 |     */
165 |     function subjectFilter_(subject_line){
166 |       return function(element) {
167 |         if (element.getMessage().getSubject() === subject_line) {
168 |           return element;
169 |         }
170 |       }
171 |     }
172 |   }
173 |   
174 |   /**
175 |    * Fill template string with data object
176 |    * @see https://stackoverflow.com/a/378000/1027723
177 |    * @param {string} template string containing {{}} markers which are replaced with data
178 |    * @param {object} data object used to replace {{}} markers
179 |    * @return {object} message replaced with data
180 |   */
181 |   function fillInTemplateFromObject_(template, data) {
182 |     // We have two templates one for plain text and the html body
183 |     // Stringifing the object means we can do a global replace
184 |     let template_string = JSON.stringify(template);
185 | 
186 |     // Token replacement
187 |     template_string = template_string.replace(/{{[^{}]+}}/g, key => {
188 |       return escapeData_(data[key.replace(/[{}]+/g, "")] || "");
189 |     });
190 |     return  JSON.parse(template_string);
191 |   }
192 | 
193 |   /**
194 |    * Escape cell data to make JSON safe
195 |    * @see https://stackoverflow.com/a/9204218/1027723
196 |    * @param {string} str to escape JSON special characters from
197 |    * @return {string} escaped string
198 |   */
199 |   function escapeData_(str) {
200 |     return str
201 |       .replace(/[\\]/g, '\\\\')
202 |       .replace(/[\"]/g, '\\\"')
203 |       .replace(/[\/]/g, '\\/')
204 |       .replace(/[\b]/g, '\\b')
205 |       .replace(/[\f]/g, '\\f')
206 |       .replace(/[\n]/g, '\\n')
207 |       .replace(/[\r]/g, '\\r')
208 |       .replace(/[\t]/g, '\\t');
209 |   };
210 | }
211 | 


--------------------------------------------------------------------------------
/solutions/automations/mail-merge/README.md:
--------------------------------------------------------------------------------
1 | # Create a mail merge with Gmail & Google Sheets
2 | 
3 | See [developers.google.com](https://developers.google.com/apps-script/samples/automations/mail-merge) for additional details.
4 | 


--------------------------------------------------------------------------------
/solutions/automations/news-sentiment/Code.js:
--------------------------------------------------------------------------------
  1 | // To learn how to use this script, refer to the documentation:
  2 | // https://developers.google.com/apps-script/samples/automations/news-sentiment
  3 | 
  4 | /*
  5 | Copyright 2022 Google LLC
  6 | 
  7 | Licensed under the Apache License, Version 2.0 (the "License");
  8 | you may not use this file except in compliance with the License.
  9 | You may obtain a copy of the License at
 10 | 
 11 |     https://www.apache.org/licenses/LICENSE-2.0
 12 | 
 13 | Unless required by applicable law or agreed to in writing, software
 14 | distributed under the License is distributed on an "AS IS" BASIS,
 15 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 16 | See the License for the specific language governing permissions and
 17 | limitations under the License.
 18 | */
 19 | 
 20 | // Global variables
 21 | const googleAPIKey = 'YOUR_GOOGLE_API_KEY';
 22 | const newsApiKey = 'YOUR_NEWS_API_KEY';
 23 | const apiEndPointHdr = 'https://newsapi.org/v2/everything?q=';
 24 | const happyFace =
 25 |   '=IMAGE(\"https://cdn.pixabay.com/photo/2016/09/01/08/24/smiley-1635449_1280.png\")';
 26 | const mehFace =
 27 |   '=IMAGE(\"https://cdn.pixabay.com/photo/2016/09/01/08/24/smiley-1635450_1280.png\")';
 28 | const sadFace =
 29 |   '=IMAGE(\"https://cdn.pixabay.com/photo/2016/09/01/08/25/smiley-1635454_1280.png\")';
 30 | const happyColor = '#44f83d';
 31 | const mehColor = '#f7f6cc';
 32 | const sadColor = '#ff3c3d';
 33 | const fullsheet = 'A2:D25';
 34 | const sentimentCols = 'B2:D25';
 35 | const articleMax = 20;
 36 | const threshold = 0.3;
 37 | 
 38 | let headlines = [];
 39 | let rows = null;
 40 | let rowValues = null;
 41 | let topic = null;
 42 | let bottomRow = 0;
 43 | let ds = null;
 44 | let ss = null;
 45 | let headerRow = null;
 46 | let sentimentCol = null;
 47 | let headlineCol = null;
 48 | let scoreCol = null;
 49 | 
 50 | /**
 51 |  * Creates menu in the Google Sheets spreadsheet when the spreadsheet is opened.
 52 |  * 
 53 |  */
 54 | function onOpen() {
 55 |   let ui = SpreadsheetApp.getUi();
 56 |   ui.createMenu('News Headlines Sentiments')
 57 |     .addItem('Analyze News Headlines...', 'showNewsPrompt')
 58 |     .addToUi();
 59 | }
 60 | 
 61 | /**
 62 |  * Prompts user to enter a new headline topic. 
 63 |  * Calls main function AnalyzeHeadlines with entered topic.
 64 |  */
 65 | function showNewsPrompt() {
 66 |   //Initializes global variables
 67 |   ss = SpreadsheetApp.getActiveSpreadsheet();
 68 |   ds = ss.getSheetByName('Sheet1');
 69 |   headerRow = ds.getDataRange().getValues()[0];
 70 |   sentimentCol = headerRow.indexOf('Sentiment');
 71 |   headlineCol = headerRow.indexOf('Headlines');
 72 |   scoreCol = headerRow.indexOf('Score');
 73 | 
 74 |   // Builds Menu
 75 |   let ui = SpreadsheetApp.getUi();
 76 |   let result = ui.prompt(
 77 |     'Enter news topic:',
 78 |     ui.ButtonSet.OK_CANCEL);
 79 | 
 80 |   // Processes the user's response.
 81 |   let button = result.getSelectedButton();
 82 |   topic = result.getResponseText();
 83 |   if (button == ui.Button.OK) {
 84 |     analyzeNewsHeadlines();
 85 |   } else if (button == ui.Button.CANCEL) {
 86 |     // Shows alert if user clicked "Cancel."
 87 |     ui.alert('News topic not selected!');
 88 |   }
 89 | }
 90 | 
 91 | /**
 92 |  * For each headline cell, calls the Natural Language API to get general sentiment and then updates
 93 |  * the sentiment response column.
 94 |  */
 95 | function analyzeNewsHeadlines() {
 96 |   // Clears and reformats the sheet
 97 |   reformatSheet();
 98 | 
 99 |   // Gets the headlines array
100 |   headlines = getHeadlinesArray();
101 | 
102 |   // Syncs the headlines array to the sheet using a single setValues call 
103 |   if (headlines.length > 0){
104 |     ds.getRange(2, 1, headlines.length, headlineCol+1).setValues(headlines);
105 |     // Set global rowValues
106 |     rows = ds.getDataRange();
107 |     rowValues = rows.getValues();
108 |     getSentiments();
109 |   } else {
110 |     ss.toast("No headlines returned for topic: " + topic + '!');
111 |   }
112 | }
113 | 
114 | /**
115 |  * Fetches current headlines from the Free News API
116 |  */
117 | function getHeadlinesArray() {
118 |   // Fetches headlines for a given topic
119 |   let hdlnsResp = [];
120 |   let encodedtopic = encodeURIComponent(topic);
121 |   ss.toast("Getting headlines for: " + topic);
122 |   let response = UrlFetchApp.fetch(apiEndPointHdr + encodedtopic + '&apiKey=' +
123 |     newsApiKey);
124 |   let results = JSON.parse(response);
125 |   let articles = results["articles"];
126 | 
127 |   for (let i = 0; i < articles.length && i < articleMax; i++) {
128 |     let newsStory = articles[i]['title'];
129 |     if (articles[i]['description'] !== null) {
130 |       newsStory += ': ' + articles[i]['description'];
131 |     }
132 |     // Scrubs newsStory of invalid characters
133 |     newsStory = scrub(newsStory);
134 | 
135 |     // Constructs hdlnsResp as a 2d array. This simplifies syncing to the sheet.
136 |     hdlnsResp.push(new Array(newsStory));
137 |   }
138 | 
139 |   return hdlnsResp;
140 | }
141 | 
142 | /**
143 |  * For each article cell, calls the Natural Language API to get general sentiment and then updates 
144 |  * the sentiment response columns.
145 |  */
146 | function getSentiments() {
147 |   ss.toast('Analyzing the headline sentiments...');
148 | 
149 |   let articleCount = rows.getNumRows() - 1;
150 |   let avg = 0;
151 | 
152 |   // Gets sentiment for each row 
153 |   for (let i = 1; i <= articleCount; i++) {
154 |     let headlineCell = rowValues[i][headlineCol];
155 |     if (headlineCell) {
156 |       let sentimentData = retrieveSentiment(headlineCell);
157 |       let result = sentimentData['documentSentiment']['score'];
158 |       avg += result;
159 |       ds.getRange(i + 1, sentimentCol + 1).setBackgroundColor(getColor(result));
160 |       ds.getRange(i + 1, sentimentCol + 1).setValue(getFace(result));
161 |       ds.getRange(i + 1, scoreCol + 1).setValue(result);
162 |     }
163 |   }
164 |   let avgDecimal = (avg / articleCount).toFixed(2);
165 |  
166 |   // Shows news topic and average face, color and sentiment value.
167 |   bottomRow = articleCount + 3;
168 |   ds.getRange(bottomRow, 1, headlines.length, scoreCol+1).setFontWeight('bold');
169 |   ds.getRange(bottomRow, headlineCol + 1).setValue('Topic: \"' + topic + '\"');
170 |   ds.getRange(bottomRow, headlineCol + 2).setValue('Avg:');
171 |   ds.getRange(bottomRow, sentimentCol + 1).setValue(getFace(avgDecimal));
172 |   ds.getRange(bottomRow, sentimentCol + 1).setBackgroundColor(getColor(avgDecimal));
173 |   ds.getRange(bottomRow, scoreCol + 1).setValue(avgDecimal);
174 |   ss.toast("Done!!");
175 | }
176 | 
177 | /**
178 |  * Calls the Natureal Language API to get sentiment response for headline.
179 |  * 
180 |  * Important note: Not all languages are supported by Google document 
181 |  * sentiment analysis. 
182 |  * Unsupported languages generate a "400" response: "INVALID_ARGUMENT".
183 |  */
184 | function retrieveSentiment(text) {
185 |   // Sets REST call options   
186 |   let apiEndPoint =
187 |     'https://language.googleapis.com/v1/documents:analyzeSentiment?key=' +
188 |     googleAPIKey;
189 |   let jsonReq = JSON.stringify({
190 |     document: {
191 |       type: "PLAIN_TEXT",
192 |       content: text
193 |     },
194 |     encodingType: "UTF8"
195 |   });
196 | 
197 |   let options = {
198 |     'method': 'post',
199 |     'contentType': 'application/json',
200 |     'payload': jsonReq
201 |   }
202 | 
203 |   //  Makes the REST call
204 |   let response = UrlFetchApp.fetch(apiEndPoint, options);
205 |   let responseData = JSON.parse(response);
206 |   return responseData;
207 | }
208 | 
209 | // Helper Functions 
210 | 
211 | /**
212 |  * Removes old headlines, sentiments and reset formatting
213 |  */
214 | function reformatSheet() {
215 |   let range = ds.getRange(fullsheet);
216 |   range.clearContent();
217 |   range.clearFormat();
218 |   range.setWrapStrategy(SpreadsheetApp.WrapStrategy.CLIP);
219 | 
220 |   range = ds.getRange(sentimentCols); // Center the sentiment cols only
221 |   range.setHorizontalAlignment("center");
222 | }
223 | 
224 | /**
225 |  * Returns a corresponding face based on numeric value.
226 |  */
227 | function getFace(value){
228 |   if (value >= threshold) {
229 |     return happyFace;
230 |   } else if (value < threshold && value > -threshold){
231 |     return mehFace;
232 |   } else if (value <= -threshold) {
233 |    return sadFace;
234 |   }
235 | }
236 | 
237 | /**
238 |  * Returns a corresponding color based on numeric value.
239 |  */
240 | function getColor(value){
241 |   if (value >= threshold) {
242 |     return happyColor;
243 |   } else if (value < threshold && value > -threshold){
244 |     return mehColor;
245 |   } else if (value <= -threshold) {
246 |    return sadColor;
247 |   }
248 | }
249 | 
250 | /**
251 |  * Scrubs invalid characters out of headline text.
252 |  * Can be expanded if needed.
253 |  */
254 | function scrub(text) {
255 |   return text.replace(/[\‘\,\“\”\"\'\’\-\n\â\]/g, ' ');
256 | }


--------------------------------------------------------------------------------
/solutions/automations/news-sentiment/README.md:
--------------------------------------------------------------------------------
1 | # Connect to an external API: Analyze news headlines
2 | 
3 | See [developers.google.com](https://developers.google.com/apps-script/samples/automations/news-sentiment) for additional details.


--------------------------------------------------------------------------------
/solutions/automations/offsite-activity-signup/Code.js:
--------------------------------------------------------------------------------
  1 | // To learn how to use this script, refer to the documentation:
  2 | // https://developers.google.com/apps-script/samples/automations/offsite-activity-signup
  3 | 
  4 | /*
  5 | Copyright 2022 Google LLC
  6 | 
  7 | Licensed under the Apache License, Version 2.0 (the "License");
  8 | you may not use this file except in compliance with the License.
  9 | You may obtain a copy of the License at
 10 | 
 11 |     https://www.apache.org/licenses/LICENSE-2.0
 12 | 
 13 | Unless required by applicable law or agreed to in writing, software
 14 | distributed under the License is distributed on an "AS IS" BASIS,
 15 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 16 | See the License for the specific language governing permissions and
 17 | limitations under the License.
 18 | */
 19 | 
 20 | const NUM_ITEMS_TO_RANK = 5;
 21 | const ACTIVITIES_PER_PERSON = 2;
 22 | const NUM_TEST_USERS = 150;
 23 | 
 24 | /**
 25 |  * Adds custom menu items when opening the sheet.
 26 |  */
 27 | function onOpen() {
 28 |   let menu = SpreadsheetApp.getUi().createMenu('Activities')
 29 |       .addItem('Create form', 'buildForm_')
 30 |       .addItem('Generate test data', 'generateTestData_')
 31 |       .addItem('Assign activities', 'assignActivities_')
 32 |       .addToUi();
 33 | }
 34 | 
 35 | /**
 36 |  * Builds a form based on the "Activity Schedule" sheet. The form asks attendees to rank their top
 37 |  * N choices of activities, where N is defined by NUM_ITEMS_TO_RANK.
 38 |  */
 39 | function buildForm_() {
 40 |   let ss = SpreadsheetApp.getActiveSpreadsheet();
 41 |   if (ss.getFormUrl()) {
 42 |     let msg = 'Form already exists. Unlink the form and try again.';
 43 |     SpreadsheetApp.getUi().alert(msg);
 44 |     return;
 45 |   }
 46 |   let form = FormApp.create('Activity Signup')
 47 |       .setDestination(FormApp.DestinationType.SPREADSHEET, ss.getId())
 48 |       .setAllowResponseEdits(true)
 49 |       .setLimitOneResponsePerUser(true)
 50 |       .setCollectEmail(true);
 51 |   let sectionHelpText = Utilities.formatString('Please choose your top %d activities',
 52 |       NUM_ITEMS_TO_RANK);
 53 |   form.addSectionHeaderItem()
 54 |       .setTitle('Activity choices')
 55 |       .setHelpText(sectionHelpText);
 56 | 
 57 |   // Presents activity ranking as a form grid with each activity as a row and rank as a column.
 58 |   let rows = loadActivitySchedule_(ss).map(function(activity) {
 59 |     return activity.description;
 60 |   });
 61 |   let columns = range_(1, NUM_ITEMS_TO_RANK).map(function(value) {
 62 |     return Utilities.formatString('%s', toOrdinal_(value));
 63 |   });
 64 |   let gridValidation = FormApp.createGridValidation()
 65 |       .setHelpText('Select one item per column.')
 66 |       .requireLimitOneResponsePerColumn()
 67 |       .build();
 68 |   form.addGridItem()
 69 |       .setColumns(columns)
 70 |       .setRows(rows)
 71 |       .setValidation(gridValidation);
 72 | 
 73 |   form.addListItem()
 74 |       .setTitle('Assign other activities if choices are not available?')
 75 |       .setChoiceValues(['Yes', 'No']);
 76 | }
 77 | 
 78 | /**
 79 |  * Assigns activities using a random priority/random serial dictatorship approach. The results
 80 |  * are then populated into two new sheets, one listing activities per person, the other listing
 81 |  * the rosters for each activity.
 82 |  *
 83 |  * See https://en.wikipedia.org/wiki/Random_serial_dictatorship for additional information.
 84 |  */
 85 | function assignActivities_() {
 86 |   let ss = SpreadsheetApp.getActiveSpreadsheet();
 87 |   let activities = loadActivitySchedule_(ss);
 88 |   let activityIds = activities.map(function(activity) {
 89 |     return activity.id;
 90 |   });
 91 |   let attendees = loadAttendeeResponses_(ss, activityIds);
 92 |   assignWithRandomPriority_(attendees, activities, 2);
 93 |   writeAttendeeAssignments_(ss, attendees);
 94 |   writeActivityRosters_(ss, activities);
 95 | }
 96 | 
 97 | /**
 98 |  * Selects activities via random priority.
 99 |  *
100 |  * @param {object[]} attendees - Array of attendees to assign activities to
101 |  * @param {object[]} activities - Array of all available activities
102 |  * @param {number} numActivitiesPerPerson - Maximum number of activities to assign
103 |  */
104 | function assignWithRandomPriority_(attendees, activities, numActivitiesPerPerson) {
105 |   let activitiesById = activities.reduce(function(obj, activity) {
106 |     obj[activity.id] = activity;
107 |     return obj;
108 |   }, {});
109 |   for (let i = 0; i < numActivitiesPerPerson; ++i) {
110 |     let randomizedAttendees = shuffleArray_(attendees);
111 |     randomizedAttendees.forEach(function(attendee) {
112 |       makeChoice_(attendee, activitiesById);
113 |     });
114 |   }
115 | }
116 | 
117 | /**
118 |  * Attempts to assign an activity for an attendee based on their preferences and current schedule.
119 |  *
120 |  * @param {object} attendee - Attendee looking to join an activity
121 |  * @param {object} activitiesById - Map of all available activities
122 |  */
123 | function makeChoice_(attendee, activitiesById) {
124 |   for (let i = 0; i < attendee.preferences.length; ++i) {
125 |     let activity = activitiesById[attendee.preferences[i]];
126 |     if (!activity) {
127 |       continue;
128 |     }
129 |     let canJoin = checkAvailability_(attendee, activity);
130 |     if (canJoin) {
131 |       attendee.assigned.push(activity);
132 |       activity.roster.push(attendee);
133 |       break;
134 |     }
135 |   }
136 | }
137 | 
138 | /**
139 |  * Checks that an activity has capacity and doesn't conflict with previously assigned
140 |  * activities.
141 |  *
142 |  * @param {object} attendee - Attendee looking to join the activity
143 |  * @param {object} activity - Proposed activity
144 |  * @return {boolean} - True if attendee can join the activity
145 |  */
146 | function checkAvailability_(attendee, activity) {
147 |   if (activity.capacity <= activity.roster.length) {
148 |     return false;
149 |   }
150 |   let timesConflict = attendee.assigned.some(function(assignedActivity) {
151 |     return !(assignedActivity.startAt.getTime() > activity.endAt.getTime() ||
152 |       activity.startAt.getTime() > assignedActivity.endAt.getTime());
153 |   });
154 |   return !timesConflict;
155 | };
156 | 
157 | /**
158 |  * Populates a sheet with the assigned activities for each attendee.
159 |  *
160 |  * @param {Spreadsheet} ss - Spreadsheet to write to.
161 |  * @param {object[]} attendees - Array of attendees with their activity assignments
162 |  */
163 | function writeAttendeeAssignments_(ss, attendees) {
164 |   let sheet = findOrCreateSheetByName_(ss, 'Activities by person');
165 |   sheet.clear();
166 |   sheet.appendRow(['Email address', 'Activities']);
167 |   sheet.getRange('B1:1').merge();
168 |   let rows = attendees.map(function(attendee) {
169 |     // Prefill row to ensure consistent length otherwise
170 |     // can't bulk update the sheet with range.setValues()
171 |     let row = fillArray_([], ACTIVITIES_PER_PERSON + 1, '');
172 |     row[0] = attendee.email;
173 |     attendee.assigned.forEach(function(activity, index) {
174 |       row[index + 1] = activity.description;
175 |     });
176 |     return row;
177 |   });
178 |   bulkAppendRows_(sheet, rows);
179 |   sheet.setFrozenRows(1);
180 |   sheet.getRange('1:1').setFontWeight('bold');
181 |   sheet.autoResizeColumns(1, sheet.getLastColumn());
182 | }
183 | 
184 | /**
185 |  * Populates a sheet with the rosters for each activity.
186 |  *
187 |  * @param {Spreadsheet} ss - Spreadsheet to write to.
188 |  * @param {object[]} activities - Array of activities with their rosters
189 |  */
190 | function writeActivityRosters_(ss, activities) {
191 |   let sheet = findOrCreateSheetByName_(ss, 'Activity rosters');
192 |   sheet.clear();
193 |   var rows = [];
194 |   var rows = activities.map(function(activity) {
195 |     let roster = activity.roster.map(function(attendee) {
196 |       return attendee.email;
197 |     });
198 |     return [activity.description].concat(roster);
199 |   });
200 |   // Transpose the data so each activity is a column
201 |   rows = transpose_(rows, '');
202 |   bulkAppendRows_(sheet, rows);
203 |   sheet.setFrozenRows(1);
204 |   sheet.getRange('1:1').setFontWeight('bold');
205 |   sheet.autoResizeColumns(1, sheet.getLastColumn());
206 | }
207 | 
208 | /**
209 |  * Loads the activity schedule.
210 |  *
211 |  * @param {Spreadsheet} ss - Spreadsheet to load from
212 |  * @return {object[]} Array of available activities.
213 |  */
214 | function loadActivitySchedule_(ss) {
215 |   let timeZone = ss.getSpreadsheetTimeZone();
216 |   let sheet = ss.getSheetByName('Activity Schedule');
217 |   let rows = sheet.getSheetValues(
218 |       sheet.getFrozenRows() + 1, 1,
219 |       sheet.getLastRow() - 1, sheet.getLastRow());
220 |   let activities = rows.map(function(row, index) {
221 |     let name = row[0];
222 |     let startAt = new Date(row[1]);
223 |     let endAt = new Date(row[2]);
224 |     let capacity = parseInt(row[3]);
225 |     let formattedStartAt= Utilities.formatDate(startAt, timeZone, 'EEE hh:mm a');
226 |     let formattedEndAt = Utilities.formatDate(endAt, timeZone, 'hh:mm a');
227 |     let description = Utilities.formatString('%s (%s-%s)', name, formattedStartAt, formattedEndAt);
228 |     return {
229 |       id: index,
230 |       name: name,
231 |       description: description,
232 |       capacity: capacity,
233 |       startAt: startAt,
234 |       endAt: endAt,
235 |       roster: [],
236 |     };
237 |   });
238 |   return activities;
239 | }
240 | 
241 | /**
242 |  * Loads the attendeee response data.
243 |  *
244 |  * @param {Spreadsheet} ss - Spreadsheet to load from
245 |  * @param {number[]} allActivityIds - Full set of available activity IDs
246 |  * @return {object[]} Array of parsed attendee respones.
247 |  */
248 | function loadAttendeeResponses_(ss, allActivityIds) {
249 |   let sheet = findResponseSheetForForm_(ss);
250 | 
251 |   if (!sheet || sheet.getLastRow() == 1) {
252 |     return undefined;
253 |   }
254 | 
255 |   let rows = sheet.getSheetValues(
256 |       sheet.getFrozenRows() + 1, 1,
257 |       sheet.getLastRow() - 1, sheet.getLastRow());
258 |   let attendees = rows.map(function(row) {
259 |     let _ = row.shift(); // Ignore timestamp
260 |     let email = row.shift();
261 |     let autoAssign = row.pop();
262 |     // Find ranked items in the response data.
263 |     let preferences = row.reduce(function(prefs, value, index) {
264 |       let match = value.match(/(\d+).*/);
265 |       if (!match) {
266 |         return prefs;
267 |       }
268 |       let rank = parseInt(match[1]) - 1; // Convert ordinal to array index
269 |       prefs[rank] = index;
270 |       return prefs;
271 |     }, []);
272 |     if (autoAssign == 'Yes') {
273 |       // If auto assigning additional activites, append a randomized list of all the activities.
274 |       // These will then be considered as if the attendee ranked them.
275 |       let additionalChoices = shuffleArray_(allActivityIds);
276 |       preferences = preferences.concat(additionalChoices);
277 |     }
278 |     return {
279 |       email: email,
280 |       preferences: preferences,
281 |       assigned: [],
282 |     };
283 |   });
284 |   return attendees;
285 | }
286 | 
287 | /**
288 |  * Simulates a large number of users responding to the form. This enables users to quickly
289 |  * experience the full solution without having to collect sufficient form responses
290 |  * through other means.
291 |  */
292 | function generateTestData_() {
293 |   let ss = SpreadsheetApp.getActiveSpreadsheet();
294 |   let sheet = findResponseSheetForForm_(ss);
295 |   if (!sheet) {
296 |     let msg = 'No response sheet found. Create the form and try again.';
297 |     SpreadsheetApp.getUi().alert(msg);
298 |   }
299 |   if (sheet.getLastRow() > 1) {
300 |     let msg = 'Response sheet is not empty, can not generate test data. ' +
301 |       'Remove responses and try again.';
302 |     SpreadsheetApp.getUi().alert(msg);
303 |     return;
304 |   }
305 | 
306 |   let activities = loadActivitySchedule_(ss);
307 |   let choices = fillArray_([], activities.length, '');
308 |   range_(1, 5).forEach(function(value) {
309 |     choices[value] = toOrdinal_(value);
310 |   });
311 | 
312 |   let rows = range_(1, NUM_TEST_USERS).map(function(value) {
313 |     let randomizedChoices = shuffleArray_(choices);
314 |     let email = Utilities.formatString('person%d@example.com', value);
315 |     return [new Date(), email].concat(randomizedChoices).concat(['Yes']);
316 |   });
317 |   bulkAppendRows_(sheet, rows);
318 | }
319 | 
320 | /**
321 |  * Retrieves a sheet by name, creating it if it doesn't yet exist.
322 |  *
323 |  * @param {Spreadsheet} ss - Containing spreadsheet
324 |  * @Param {string} name - Name of sheet to return
325 |  * @return {Sheet} Sheet instance
326 |  */
327 | function findOrCreateSheetByName_(ss, name) {
328 |   let sheet = ss.getSheetByName(name);
329 |   if (sheet) {
330 |     return sheet;
331 |   }
332 |   return ss.insertSheet(name);
333 | }
334 | 
335 | /**
336 |  * Faster version of appending multiple rows via ranges. Requires all rows are equal length.
337 |  *
338 |  * @param {Sheet} sheet - Sheet to append to
339 |  * @param {Array<Array<object>>} rows - Rows to append
340 |  */
341 | function bulkAppendRows_(sheet, rows) {
342 |   let startRow = sheet.getLastRow() + 1;
343 |   let startColumn = 1;
344 |   let numRows = rows.length;
345 |   let numColumns = rows[0].length;
346 |   sheet.getRange(startRow, startColumn, numRows, numColumns).setValues(rows);
347 | }
348 | 
349 | /**
350 |  * Copies and randomizes an array.
351 |  *
352 |  * @param {object[]} array - Array to shuffle
353 |  * @return {object[]} randomized copy of the array
354 |  */
355 | function shuffleArray_(array) {
356 |   let clone = array.slice(0);
357 |   for (let i = clone.length - 1; i > 0; i--) {
358 |     let j = Math.floor(Math.random() * (i + 1));
359 |     let temp = clone[i];
360 |     clone[i] = clone[j];
361 |     clone[j] = temp;
362 |   }
363 |   return clone;
364 | }
365 | 
366 | /**
367 |  * Formats an number as an ordinal.
368 |  *
369 |  * See: https://stackoverflow.com/questions/13627308/add-st-nd-rd-and-th-ordinal-suffix-to-a-number/13627586
370 |  *
371 |  * @param {number} i - Number to format
372 |  * @return {string} Formatted string
373 |  */
374 | function toOrdinal_(i) {
375 |   let j = i % 10;
376 |   let k = i % 100;
377 |   if (j == 1 && k != 11) {
378 |     return i + 'st';
379 |   }
380 |   if (j == 2 && k != 12) {
381 |     return i + 'nd';
382 |   }
383 |   if (j == 3 && k != 13) {
384 |     return i + 'rd';
385 |   }
386 |   return i + 'th';
387 | }
388 | 
389 | /**
390 |  * Locates the sheet containing the form responses.
391 |  *
392 |  * @param {Spreadsheet} ss - Spreadsheet instance to search
393 |  * @return {Sheet} Sheet with form responses, undefined if not found.
394 |  */
395 | function findResponseSheetForForm_(ss) {
396 |   let formUrl = ss.getFormUrl();
397 |   if (!ss || !formUrl) {
398 |     return undefined;
399 |   }
400 |   let sheets = ss.getSheets();
401 |   for (let i in sheets) {
402 |     if (sheets[i].getFormUrl() === formUrl) {
403 |       return sheets[i];
404 |     }
405 |   }
406 |   return undefined;
407 | }
408 | 
409 | /**
410 |  * Fills an array with a value ([].fill() not supported in Apps Script).
411 |  *
412 |  * @param {object[]} arr - Array to fill
413 |  * @param {number} length - Number of items to fill.
414 |  * @param {object} value - Value to place at each index.
415 |  * @return {object[]} the array, for chaining purposes
416 |  */
417 | function fillArray_(arr, length, value) {
418 |   for (let i = 0; i < length; ++i) {
419 |     arr[i] = value;
420 |   }
421 |   return arr;
422 | }
423 | 
424 | /**
425 |  * Creates and fills an array with numbers in the range [start, end].
426 |  *
427 |  * @param {number} start - First value in the range, inclusive
428 |  * @param {number} end - Last value in the range, inclusive
429 |  * @return {number[]} Array of values representing the range
430 |  */
431 | function range_(start, end) {
432 |   let arr = [start];
433 |   let i = start;
434 |   while (i < end) {
435 |     arr.push(i += 1);
436 |   }
437 |   return arr;
438 | }
439 | 
440 | /**
441 |  * Transposes a matrix/2d array. For cases where the rows are not the same length,
442 |  * `fillValue` is used where no other value would otherwise be present.
443 |  *
444 |  * @param {Array<Array<object>>} arr - 2D array to transpose
445 |  * @param {object} fillValue - Placeholder for undefined values created as a result
446 |  *     of the transpose. Only required if rows aren't all of equal length.
447 |  * @return {Array<Array<object>>} New transposed array
448 |  */
449 | function transpose_(arr, fillValue) {
450 |   let transposed = [];
451 |   arr.forEach(function(row, rowIndex) {
452 |     row.forEach(function(col, colIndex) {
453 |       transposed[colIndex] = transposed[colIndex] || fillArray_([], arr.length, fillValue);
454 |       transposed[colIndex][rowIndex] = row[colIndex];
455 |     });
456 |   });
457 |   return transposed;
458 | }
459 | 


--------------------------------------------------------------------------------
/solutions/automations/offsite-activity-signup/README.md:
--------------------------------------------------------------------------------
1 | # Create a sign-up for an offsite
2 | 
3 | See [developers.google.com](https://developers.google.com/apps-script/samples/automations/offsite-activity-signup) for additional details.
4 | 


--------------------------------------------------------------------------------
/solutions/automations/tax-loss-harvest-alerts/Code.js:
--------------------------------------------------------------------------------
 1 | // To learn how to use this script, refer to the documentation:
 2 | // https://developers.google.com/apps-script/samples/automations/tax-loss-harvest-alerts
 3 | 
 4 | /*
 5 | Copyright 2022 Google LLC
 6 | 
 7 | Licensed under the Apache License, Version 2.0 (the "License");
 8 | you may not use this file except in compliance with the License.
 9 | You may obtain a copy of the License at
10 | 
11 |     https://www.apache.org/licenses/LICENSE-2.0
12 | 
13 | Unless required by applicable law or agreed to in writing, software
14 | distributed under the License is distributed on an "AS IS" BASIS,
15 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
16 | See the License for the specific language governing permissions and
17 | limitations under the License.
18 | */
19 | 
20 | /** 
21 | * Checks for losses in the sheet.
22 | */
23 | function checkLosses() {
24 |   // Pulls data from the spreadsheet
25 |   let sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(
26 |     "Calculations"
27 |   );
28 |   let source = sheet.getRange("A:G");
29 |   let data = source.getValues();
30 | 
31 |   //Prepares the email alert content
32 |   let message = "Stocks: <br><br>";
33 | 
34 |   let send_message = false;
35 | 
36 |   console.log("starting loop");
37 | 
38 |   //Loops through the cells in the spreadsheet to find cells where the stock fell below purchase price
39 |   let n = 0;
40 |   for (let i in data) {
41 |     //Skips the first row
42 |     if (n++ == 0) continue;
43 | 
44 |     //Loads the current row
45 |     let row = data[i];
46 | 
47 |     console.log(row[1]);
48 |     console.log(row[6]);
49 | 
50 |     //Once at the end of the list, exits the loop
51 |     if (row[1] == "") break;
52 | 
53 |     //If value is below purchase price, adds stock ticker and difference to list of tax loss opportunities
54 |     if (row[6] < 0) {
55 |       message +=
56 |         row[1] +
57 |         ": " +
58 |         (parseFloat(row[6].toString()) * 100).toFixed(2).toString() +
59 |         "%<br>";
60 |       send_message = true;
61 |     }
62 |   }
63 |   if (!send_message) return;
64 | 
65 |   MailApp.sendEmail({
66 |     to: SpreadsheetApp.getActiveSpreadsheet().getOwner().getEmail(),
67 |     subject: "Tax-loss harvest",
68 |     htmlBody: message,
69 |     
70 |   });
71 | }
72 | 
73 | 


--------------------------------------------------------------------------------
/solutions/automations/tax-loss-harvest-alerts/README.md:
--------------------------------------------------------------------------------
1 | # Get stock price drop alerts
2 | 
3 | See [developers.google.com](https://developers.google.com/apps-script/samples/automations/tax-loss-harvest-alerts) for additional details.


--------------------------------------------------------------------------------
/solutions/automations/timesheets/Code.js:
--------------------------------------------------------------------------------
  1 | // To learn how to use this script, refer to the documentation:
  2 | // https://developers.google.com/apps-script/samples/automations/timesheets
  3 | 
  4 | /*
  5 | Copyright 2022 Google LLC
  6 | 
  7 | Licensed under the Apache License, Version 2.0 (the "License");
  8 | you may not use this file except in compliance with the License.
  9 | You may obtain a copy of the License at
 10 | 
 11 |     https://www.apache.org/licenses/LICENSE-2.0
 12 | 
 13 | Unless required by applicable law or agreed to in writing, software
 14 | distributed under the License is distributed on an "AS IS" BASIS,
 15 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 16 | See the License for the specific language governing permissions and
 17 | limitations under the License.
 18 | */
 19 | 
 20 | // Global variables representing the index of certain columns.
 21 | let COLUMN_NUMBER = {
 22 |   EMAIL: 2,
 23 |   HOURS_START: 4,
 24 |   HOURS_END: 8,
 25 |   HOURLY_PAY: 9,
 26 |   TOTAL_HOURS: 10,
 27 |   CALC_PAY: 11,
 28 |   APPROVAL: 12,
 29 |   NOTIFY: 13,
 30 | };
 31 | 
 32 | // Global variables:
 33 | let APPROVED_EMAIL_SUBJECT = 'Weekly Timesheet APPROVED';
 34 | let REJECTED_EMAIL_SUBJECT = 'Weekly Timesheet NOT APPROVED';
 35 | let APPROVED_EMAIL_MESSAGE = 'Your timesheet has been approved.';
 36 | let REJECTED_EMAIL_MESSAGE = 'Your timesheet has not been approved.';
 37 | 
 38 | /** 
 39 |  * Creates the menu item "Timesheets" for user to run scripts on drop-down.
 40 |  */
 41 | function onOpen() {
 42 |   let ui = SpreadsheetApp.getUi();
 43 |   ui.createMenu('Timesheets')
 44 |       .addItem('Form setup', 'setUpForm')
 45 |       .addItem('Column setup', 'columnSetup')
 46 |       .addItem('Notify employees', 'checkApprovedStatusToNotify')
 47 |       .addToUi();
 48 | }
 49 | 
 50 | /** 
 51 |  * Adds "WEEKLY PAY" column with calculated values using array formulas. 
 52 |  * Adds an "APPROVAL" column at the end of the sheet, containing 
 53 |  * drop-down menus to either approve/disapprove employee timesheets.  
 54 |  * Adds a "NOTIFIED STATUS" column indicating whether or not an
 55 |  * employee has yet been e mailed.
 56 |  */
 57 | function columnSetup() {
 58 |   let sheet = SpreadsheetApp.getActiveSheet();
 59 |   let lastCol = sheet.getLastColumn();
 60 |   let lastRow = sheet.getLastRow();
 61 |   let frozenRows = sheet.getFrozenRows();
 62 |   let beginningRow = frozenRows + 1;
 63 |   let numRows = lastRow - frozenRows;
 64 | 
 65 |   // Calls helper functions to add new columns.
 66 |   addCalculatePayColumn(sheet, beginningRow);
 67 |   addApprovalColumn(sheet, beginningRow, numRows);
 68 |   addNotifiedColumn(sheet, beginningRow, numRows);
 69 | }
 70 | 
 71 | /**
 72 |  * Adds TOTAL HOURS and CALCULATE PAY columns and automatically calculates
 73 |  * every employee's weekly pay.
 74 |  *
 75 |  * @param {Object} sheet Spreadsheet object of current sheet.
 76 |  * @param {Integer} beginningRow Index of beginning row.
 77 |  */
 78 | function addCalculatePayColumn(sheet, beginningRow) {
 79 |   sheet.insertColumnAfter(COLUMN_NUMBER.HOURLY_PAY);
 80 |   sheet.getRange(1, COLUMN_NUMBER.TOTAL_HOURS).setValue('TOTAL HOURS');
 81 |   sheet.getRange(1, COLUMN_NUMBER.CALC_PAY).setValue('WEEKLY PAY');
 82 | 
 83 |   // Calculates weekly total hours.
 84 |   sheet.getRange(beginningRow, COLUMN_NUMBER.TOTAL_HOURS)
 85 |       .setFormula('=ArrayFormula(D2:D+E2:E+F2:F+G2:G+H2:H)');
 86 |   // Calculates weekly pay.
 87 |   sheet.getRange(beginningRow, COLUMN_NUMBER.CALC_PAY)
 88 |       .setFormula('=ArrayFormula(I2:I * J2:J)');
 89 | }
 90 | 
 91 | /**
 92 |  * Adds an APPROVAL column allowing managers to approve/
 93 |  * disapprove of each employee's timesheet.
 94 |  *
 95 |  * @param {Object} sheet Spreadsheet object of current sheet.
 96 |  * @param {Integer} beginningRow Index of beginning row.
 97 |  * @param {Integer} numRows Number of rows currently in use.
 98 |  */
 99 | function addApprovalColumn(sheet, beginningRow, numRows) {
100 |   sheet.insertColumnAfter(COLUMN_NUMBER.CALC_PAY);
101 |   sheet.getRange(1, COLUMN_NUMBER.APPROVAL).setValue('APPROVAL');
102 | 
103 |   // Make sure approval column is all drop-down menus.
104 |   let approvalColumnRange = sheet.getRange(beginningRow, COLUMN_NUMBER.APPROVAL,
105 |       numRows, 1);
106 |   let dropdownValues = ['APPROVED', 'NOT APPROVED', 'IN PROGRESS'];
107 |   let rule = SpreadsheetApp.newDataValidation().requireValueInList(dropdownValues)
108 |       .build();
109 |   approvalColumnRange.setDataValidation(rule);
110 |   approvalColumnRange.setValue('IN PROGRESS');
111 | }
112 | 
113 | /**
114 |  * Adds a NOTIFIED column allowing managers to see which employees
115 |  * have/have not yet been notified of their approval status.
116 |  *
117 |  * @param {Object} sheet Spreadsheet object of current sheet.
118 |  * @param {Integer} beginningRow Index of beginning row.
119 |  * @param {Integer} numRows Number of rows currently in use.
120 |  */
121 | function addNotifiedColumn(sheet, beginningRow, numRows) {
122 |   sheet.insertColumnAfter(COLUMN_NUMBER.APPROVAL); // global
123 |   sheet.getRange(1, COLUMN_NUMBER.APPROVAL + 1).setValue('NOTIFIED STATUS');
124 | 
125 |   // Make sure notified column is all drop-down menus.
126 |   let notifiedColumnRange = sheet.getRange(beginningRow, COLUMN_NUMBER.APPROVAL
127 |       + 1, numRows, 1);
128 |   dropdownValues = ['NOTIFIED', 'PENDING'];
129 |   rule = SpreadsheetApp.newDataValidation().requireValueInList(dropdownValues)
130 |       .build();
131 |   notifiedColumnRange.setDataValidation(rule);
132 |   notifiedColumnRange.setValue('PENDING');  
133 | }
134 | 
135 | /**
136 |  * Sets the notification status to NOTIFIED for employees
137 |  * who have received a notification email.
138 |  *
139 |  * @param {Object} sheet Current Spreadsheet.
140 |  * @param {Object} notifiedValues Array of notified values.
141 |  * @param {Integer} i Current status in the for loop.
142 |  * @parma {Integer} beginningRow Row where iterations began.
143 |  */
144 | function updateNotifiedStatus(sheet, notifiedValues, i, beginningRow) {
145 |   // Update notification status.
146 |   notifiedValues[i][0] = 'NOTIFIED';
147 |   sheet.getRange(i + beginningRow, COLUMN_NUMBER.NOTIFY).setValue('NOTIFIED');
148 | }
149 | 
150 | /** 
151 |  * Checks the approval status of every employee, and calls helper functions
152 |  * to notify employees via email & update their notification status.
153 |  */
154 | function checkApprovedStatusToNotify() {
155 |   let sheet = SpreadsheetApp.getActiveSheet();
156 |   let lastRow = sheet.getLastRow();
157 |   let lastCol = sheet.getLastColumn();
158 |   // lastCol here is the NOTIFIED column.
159 |   let frozenRows = sheet.getFrozenRows();
160 |   let beginningRow = frozenRows + 1;
161 |   let numRows = lastRow - frozenRows;
162 | 
163 |   // Gets ranges of email, approval, and notified values for every employee.
164 |   let emailValues = sheet.getRange(beginningRow, COLUMN_NUMBER.EMAIL, numRows, 1).getValues();
165 |   let approvalValues = sheet.getRange(beginningRow, COLUMN_NUMBER.APPROVAL,
166 |       lastRow - frozenRows, 1).getValues();
167 |   let notifiedValues = sheet.getRange(beginningRow, COLUMN_NUMBER.NOTIFY, numRows,
168 |       1).getValues();
169 | 
170 |   // Traverses through employee's row.
171 |   for (let i = 0; i < numRows; i++) {
172 |     // Do not notify twice.
173 |     if (notifiedValues[i][0] == 'NOTIFIED') {
174 |       continue;
175 |     }
176 |     let emailAddress = emailValues[i][0];
177 |     let approvalValue = approvalValues[i][0];
178 | 
179 |     // Sends notifying emails & update status.
180 |     if (approvalValue == 'IN PROGRESS') {
181 |       continue;
182 |     } else if (approvalValue == 'APPROVED') {
183 |       MailApp.sendEmail(emailAddress, APPROVED_EMAIL_SUBJECT, APPROVED_EMAIL_MESSAGE);
184 |       updateNotifiedStatus(sheet, notifiedValues, i, beginningRow);
185 |     } else if (approvalValue == 'NOT APPROVED') {
186 |       MailApp.sendEmail(emailAddress,REJECTED_EMAIL_SUBJECT, REJECTED_EMAIL_MESSAGE);
187 |       updateNotifiedStatus(sheet, notifiedValues, i, beginningRow);
188 |     }  
189 |   }
190 | }
191 | 
192 | /** 
193 |  * Set up the Timesheets Responses form, & link the form's trigger to 
194 |  * send manager an email when a new request is submitted.
195 |  */
196 | function setUpForm() {
197 |   let sheet = SpreadsheetApp.getActiveSpreadsheet();
198 |   if (sheet.getFormUrl()) {
199 |     let msg = 'Form already exists. Unlink the form and try again.';
200 |     SpreadsheetApp.getUi().alert(msg);
201 |     return;
202 |   }
203 |   
204 |   // Create the form.
205 |   let form = FormApp.create('Weekly Timesheets')
206 |       .setCollectEmail(true)
207 |       .setDestination(FormApp.DestinationType.SPREADSHEET, sheet.getId())
208 |       .setLimitOneResponsePerUser(false);
209 |   form.addTextItem().setTitle('Employee Name:').setRequired(true);
210 |   form.addTextItem().setTitle('Monday Hours:').setRequired(true);
211 |   form.addTextItem().setTitle('Tuesday Hours:').setRequired(true);
212 |   form.addTextItem().setTitle('Wednesday Hours:').setRequired(true);
213 |   form.addTextItem().setTitle('Thursday Hours:').setRequired(true);
214 |   form.addTextItem().setTitle('Friday Hours:').setRequired(true);
215 |   form.addTextItem().setTitle('HourlyWage:').setRequired(true);
216 |  
217 |   // Set up on form submit trigger.
218 |   ScriptApp.newTrigger('onFormSubmit')
219 |       .forForm(form)
220 |       .onFormSubmit()
221 |       .create(); 
222 | }
223 | 
224 | /**
225 |  * Handle new form submissions to trigger the workflow.
226 |  *
227 |  * @param {Object} event Form submit event
228 |  */
229 | function onFormSubmit(event) {
230 |   let response = getResponsesByName(event.response);
231 |   
232 |   // Load form responses into a new row.
233 |   let row = ['New',
234 |     '',
235 |     response['Emoloyee Email:'],
236 |     response['Employee Name:'],
237 |     response['Monday Hours:'],
238 |     response['Tuesday Hours:'],
239 |     response['Wednesday Hours:'],
240 |     response['Thursday Hours:'],
241 |     response['Friday Hours:'],
242 |     response['Hourly Wage:']];
243 |   let sheet = SpreadsheetApp.getActiveSpreadsheet();
244 |   sheet.appendRow(row);
245 | }
246 | 
247 | /**
248 |  * Converts a form response to an object keyed by the item titles. Allows easier
249 |  * access to response values.
250 |  *
251 |  * @param {FormResponse} response
252 |  * @return {Object} Form values keyed by question title
253 |  */
254 | function getResponsesByName(response) {
255 |   let initialValue = {
256 |     email: response.getRespondentEmail(),
257 |     timestamp: response.getTimestamp(),
258 |   };
259 |   return response.getItemResponses().reduce(function(obj, itemResponse) {
260 |     let key = itemResponse.getItem().getTitle();
261 |     obj[key] = itemResponse.getResponse();
262 |     return obj;
263 |   }, initialValue);
264 | }


--------------------------------------------------------------------------------
/solutions/automations/timesheets/README.md:
--------------------------------------------------------------------------------
1 | # Collect and review timesheets from employees
2 | 
3 | See [developers.google.com](https://developers.google.com/apps-script/samples/automations/timesheets) for additional details.
4 | 


--------------------------------------------------------------------------------
/solutions/automations/upload-files/Code.js:
--------------------------------------------------------------------------------
  1 | // To learn how to use this script, refer to the documentation:
  2 | // https://developers.google.com/apps-script/samples/automations/upload-files
  3 | 
  4 | /*
  5 | Copyright 2022 Google LLC
  6 | 
  7 | Licensed under the Apache License, Version 2.0 (the "License");
  8 | you may not use this file except in compliance with the License.
  9 | You may obtain a copy of the License at
 10 | 
 11 |     https://www.apache.org/licenses/LICENSE-2.0
 12 | 
 13 | Unless required by applicable law or agreed to in writing, software
 14 | distributed under the License is distributed on an "AS IS" BASIS,
 15 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 16 | See the License for the specific language governing permissions and
 17 | limitations under the License.
 18 | */
 19 | 
 20 | // [START apps_script_upload_files]
 21 | // TODO Before you start using this sample, you must run the setUp() 
 22 | // function in the Setup.gs file.
 23 | 
 24 | // Application constants
 25 | const APP_TITLE = "Upload files to Drive from Forms";
 26 | const APP_FOLDER_NAME = "Upload files to Drive (File responses)";
 27 | 
 28 | // Identifies the subfolder form item
 29 | const APP_SUBFOLDER_ITEM = "Subfolder";
 30 | const APP_SUBFOLDER_NONE = "<None>";
 31 | 
 32 | 
 33 | /**
 34 |  * Gets the file uploads from a form response and moves files to the corresponding subfolder.
 35 |  *  
 36 |  * @param {object} event - Form submit.
 37 |  */
 38 | function onFormSubmit(e) {
 39 |   try {
 40 |     // Gets the application root folder.
 41 |     var destFolder = getFolder_(APP_FOLDER_NAME);
 42 |     
 43 |     // Gets all form responses.
 44 |     let itemResponses = e.response.getItemResponses();
 45 | 
 46 |     // Determines the subfolder to route the file to, if any.
 47 |     var subFolderName;
 48 |     let dest = itemResponses.filter((itemResponse) =>
 49 |       itemResponse.getItem().getTitle().toString() === APP_SUBFOLDER_ITEM);
 50 |     
 51 |     // Gets the destination subfolder name, but ignores if APP_SUBFOLDER_NONE was selected;
 52 |     if (dest.length > 0) {
 53 |       if (dest[0].getResponse() != APP_SUBFOLDER_NONE) {
 54 |         subFolderName = dest[0].getResponse();
 55 |       }
 56 |     }
 57 |     // Gets the subfolder or creates it if it doesn't exist.
 58 |     if (subFolderName != undefined) {
 59 |       destFolder = getSubFolder_(destFolder, subFolderName)
 60 |     }
 61 |     console.log(`Destination folder to use:
 62 |     Name: ${destFolder.getName()}
 63 |     ID: ${destFolder.getId()}
 64 |     URL: ${destFolder.getUrl()}`)
 65 | 
 66 |     // Gets the file upload response as an array to allow for multiple files.
 67 |     let fileUploads = itemResponses.filter((itemResponse) => itemResponse.getItem().getType().toString() === "FILE_UPLOAD")
 68 |       .map((itemResponse) => itemResponse.getResponse())
 69 |       .reduce((a, b) => [...a, ...b], []);
 70 | 
 71 |     // Moves the files to the destination folder.
 72 |     if (fileUploads.length > 0) {
 73 |       fileUploads.forEach((fileId) => {
 74 |         DriveApp.getFileById(fileId).moveTo(destFolder);
 75 |         console.log(`File Copied: ${fileId}`)
 76 |       });
 77 |     }
 78 |   }
 79 |   catch (err) {
 80 |     console.log(err);
 81 |   }
 82 | }
 83 | 
 84 | 
 85 | /**
 86 |  * Returns a Drive folder under the passed in objParentFolder parent
 87 |  * folder. Checks if folder of same name exists before creating, returning 
 88 |  * the existing folder or the newly created one if not found.
 89 |  *
 90 |  * @param {object} objParentFolder - Drive folder as an object.
 91 |  * @param {string} subFolderName - Name of subfolder to create/return.
 92 |  * @return {object} Drive folder
 93 |  */
 94 | function getSubFolder_(objParentFolder, subFolderName) {
 95 | 
 96 |   // Iterates subfolders of parent folder to check if folder already exists.
 97 |   const subFolders = objParentFolder.getFolders();
 98 |   while (subFolders.hasNext()) {
 99 |     let folder = subFolders.next();
100 | 
101 |     // Returns the existing folder if found.
102 |     if (folder.getName() === subFolderName) {
103 |       return folder;
104 |     }
105 |   }
106 |   // Creates a new folder if one doesn't already exist.
107 |   return objParentFolder.createFolder(subFolderName)
108 |     .setDescription(`Created by ${APP_TITLE} application to store uploaded Forms files.`);
109 | }
110 | 
111 | // [END apps_script_upload_files]
112 | 


--------------------------------------------------------------------------------
/solutions/automations/upload-files/README.md:
--------------------------------------------------------------------------------
1 | # Upload files to Google Drive from Google Forms
2 | 
3 | See [developers.google.com](https://developers.google.com/apps-script/samples/automations/upload-files) for additional details.
4 | 


--------------------------------------------------------------------------------
/solutions/automations/upload-files/Setup.js:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright 2022 Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *      http://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | 
 17 | // [START apps_script_upload_files_setup]
 18 | // TODO You must run the setUp() function before you start using this sample.
 19 | 
 20 | /** 
 21 |  * The setUp() function performs the following:
 22 |  *  - Creates a Google Drive folder named by the APP_FOLDER_NAME
 23 |  *    variable in the Code.gs file.
 24 |  *  - Creates a trigger to handle onFormSubmit events.
 25 |  */
 26 | function setUp() {
 27 |   // Ensures the root destination folder exists.
 28 |   const appFolder = getFolder_(APP_FOLDER_NAME);
 29 |   if (appFolder !== null) {
 30 |     console.log(`Application folder setup.
 31 |     Name: ${appFolder.getName()}
 32 |     ID: ${appFolder.getId()}
 33 |     URL: ${appFolder.getUrl()}`)
 34 |   }
 35 |   else {
 36 |     console.log(`Could not setup application folder.`)
 37 |   }
 38 |   // Calls the function that creates the Forms onSubmit trigger.
 39 |   installTrigger_();
 40 | }
 41 | 
 42 | /** 
 43 |  * Returns a folder to store uploaded files in the same location
 44 |  * in Drive where the form is located. First, it checks if the folder
 45 |  * already exists, and creates it if it doesn't.
 46 |  *
 47 |  * @param {string} folderName - Name of the Drive folder. 
 48 |  * @return {object} Google Drive Folder
 49 |  */
 50 | function getFolder_(folderName) {
 51 | 
 52 |   // Gets the Drive folder where the form is located.
 53 |   const ssId = FormApp.getActiveForm().getId();
 54 |   const parentFolder = DriveApp.getFileById(ssId).getParents().next();
 55 | 
 56 |   // Iterates through the subfolders to check if folder already exists.
 57 |   // The script checks for the folder name specified in the APP_FOLDER_NAME variable.
 58 |   const subFolders = parentFolder.getFolders();
 59 |   while (subFolders.hasNext()) {
 60 |     let folder = subFolders.next();
 61 | 
 62 |     // Returns the existing folder if found.
 63 |     if (folder.getName() === folderName) {
 64 |       return folder;
 65 |     }
 66 |   }
 67 |   // Creates a new folder if one doesn't already exist.
 68 |   return parentFolder.createFolder(folderName)
 69 |     .setDescription(`Created by ${APP_TITLE} application to store uploaded files.`);
 70 | }
 71 | 
 72 | /**
 73 |  * Installs trigger to capture onFormSubmit event when a form is submitted.
 74 |  * Ensures that the trigger is only installed once.
 75 |  * Called by setup().
 76 |  */
 77 | function installTrigger_() {
 78 |   // Ensures existing trigger doesn't already exist.
 79 |   let propTriggerId = PropertiesService.getScriptProperties().getProperty('triggerUniqueId')
 80 |   if (propTriggerId !== null) {
 81 |     const triggers = ScriptApp.getProjectTriggers();
 82 |     for (let t in triggers) {
 83 |       if (triggers[t].getUniqueId() === propTriggerId) {
 84 |         console.log(`Trigger with the following unique ID already exists: ${propTriggerId}`);
 85 |         return;
 86 |       }
 87 |     }
 88 |   }
 89 |   // Creates the trigger if one doesn't exist.
 90 |   let triggerUniqueId = ScriptApp.newTrigger('onFormSubmit')
 91 |     .forForm(FormApp.getActiveForm())
 92 |     .onFormSubmit()
 93 |     .create()
 94 |     .getUniqueId();
 95 |   PropertiesService.getScriptProperties().setProperty('triggerUniqueId', triggerUniqueId);
 96 |   console.log(`Trigger with the following unique ID was created: ${triggerUniqueId}`);
 97 | }
 98 | 
 99 | /**
100 |  * Removes all script properties and triggers for the project.
101 |  * Use primarily to test setup routines.
102 |  */
103 | function removeTriggersAndScriptProperties() {
104 |   PropertiesService.getScriptProperties().deleteAllProperties();
105 |   // Removes all triggers associated with project.
106 |   const triggers = ScriptApp.getProjectTriggers();
107 |   for (let t in triggers) {
108 |     ScriptApp.deleteTrigger(triggers[t]);
109 |   }
110 | }
111 | 
112 | /**
113 |  * Removes all form responses to reset the form.
114 |  */
115 | function deleteAllResponses() {
116 |   FormApp.getActiveForm().deleteAllResponses();
117 | }
118 | 
119 | // [END apps_script_upload_files_setup]
120 | 


--------------------------------------------------------------------------------
/solutions/automations/vacation-calendar/Code.js:
--------------------------------------------------------------------------------
  1 | // To learn how to use this script, refer to the documentation:
  2 | // https://developers.google.com/apps-script/samples/automations/vacation-calendar
  3 | 
  4 | /*
  5 | Copyright 2022 Google LLC
  6 | 
  7 | Licensed under the Apache License, Version 2.0 (the "License");
  8 | you may not use this file except in compliance with the License.
  9 | You may obtain a copy of the License at
 10 | 
 11 |     https://www.apache.org/licenses/LICENSE-2.0
 12 | 
 13 | Unless required by applicable law or agreed to in writing, software
 14 | distributed under the License is distributed on an "AS IS" BASIS,
 15 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 16 | See the License for the specific language governing permissions and
 17 | limitations under the License.
 18 | */
 19 | 
 20 | // Set the ID of the team calendar to add events to. You can find the calendar's
 21 | // ID on the settings page.
 22 | let TEAM_CALENDAR_ID = 'ENTER_TEAM_CALENDAR_ID_HERE';
 23 | // Set the email address of the Google Group that contains everyone in the team.
 24 | // Ensure the group has less than 500 members to avoid timeouts.
 25 | // Change to an array in order to add indirect members frrm multiple groups, for example:
 26 | // let GROUP_EMAIL = ['ENTER_GOOGLE_GROUP_EMAIL_HERE', 'ENTER_ANOTHER_GOOGLE_GROUP_EMAIL_HERE'];
 27 | let GROUP_EMAIL = 'ENTER_GOOGLE_GROUP_EMAIL_HERE';
 28 | 
 29 | let ONLY_DIRECT_MEMBERS = false;
 30 | 
 31 | let KEYWORDS = ['vacation', 'ooo', 'out of office', 'offline'];
 32 | let MONTHS_IN_ADVANCE = 3;
 33 | 
 34 | /**
 35 |  * Sets up the script to run automatically every hour.
 36 |  */
 37 | function setup() {
 38 |   let triggers = ScriptApp.getProjectTriggers();
 39 |   if (triggers.length > 0) {
 40 |     throw new Error('Triggers are already setup.');
 41 |   }
 42 |   ScriptApp.newTrigger('sync').timeBased().everyHours(1).create();
 43 |   // Runs the first sync immediately.
 44 |   sync();
 45 | }
 46 | 
 47 | /**
 48 |  * Looks through the group members' public calendars and adds any
 49 |  * 'vacation' or 'out of office' events to the team calendar.
 50 |  */
 51 | function sync() {
 52 |   // Defines the calendar event date range to search.
 53 |   let today = new Date();
 54 |   let maxDate = new Date();
 55 |   maxDate.setMonth(maxDate.getMonth() + MONTHS_IN_ADVANCE);
 56 | 
 57 |   // Determines the time the the script was last run.
 58 |   let lastRun = PropertiesService.getScriptProperties().getProperty('lastRun');
 59 |   lastRun = lastRun ? new Date(lastRun) : null;
 60 | 
 61 |   // Gets the list of users in the Google Group.
 62 |   let users = getAllMembers(GROUP_EMAIL);
 63 |   if (ONLY_DIRECT_MEMBERS){
 64 |     users = GroupsApp.getGroupByEmail(GROUP_EMAIL).getUsers();
 65 |   } else if (Array.isArray(GROUP_EMAIL)) {
 66 |     users = getUsersFromGroups(GROUP_EMAIL);
 67 |   }
 68 | 
 69 |   // For each user, finds events having one or more of the keywords in the event
 70 |   // summary in the specified date range. Imports each of those to the team
 71 |   // calendar.
 72 |   let count = 0;
 73 |   users.forEach(function(user) {
 74 |     let username = user.getEmail().split('@')[0];
 75 |     KEYWORDS.forEach(function(keyword) {
 76 |       let events = findEvents(user, keyword, today, maxDate, lastRun);
 77 |       events.forEach(function(event) {
 78 |         importEvent(username, event);
 79 |         count++;
 80 |       }); // End foreach event.
 81 |     }); // End foreach keyword.
 82 |   }); // End foreach user.
 83 | 
 84 |   PropertiesService.getScriptProperties().setProperty('lastRun', today);
 85 |   console.log('Imported ' + count + ' events');
 86 | }
 87 | 
 88 | /**
 89 |  * Imports the given event from the user's calendar into the shared team
 90 |  * calendar.
 91 |  * @param {string} username The team member that is attending the event.
 92 |  * @param {Calendar.Event} event The event to import.
 93 |  */
 94 | function importEvent(username, event) {
 95 |   event.summary = '[' + username + '] ' + event.summary;
 96 |   event.organizer = {
 97 |     id: TEAM_CALENDAR_ID,
 98 |   };
 99 |   event.attendees = [];
100 | 
101 |   // If the event is not of type 'default', it can't be imported, so it needs
102 |   // to be changed.
103 |   if (event.eventType != 'default') {
104 |     event.eventType = 'default';
105 |     delete event.outOfOfficeProperties;
106 |     delete event.focusTimeProperties;
107 |   }
108 | 
109 |   console.log('Importing: %s', event.summary);
110 |   try {
111 |     Calendar.Events.import(event, TEAM_CALENDAR_ID);
112 |   } catch (e) {
113 |     console.error('Error attempting to import event: %s. Skipping.',
114 |         e.toString());
115 |   }
116 | }
117 | 
118 | /**
119 |  * In a given user's calendar, looks for occurrences of the given keyword
120 |  * in events within the specified date range and returns any such events
121 |  * found.
122 |  * @param {Session.User} user The user to retrieve events for.
123 |  * @param {string} keyword The keyword to look for.
124 |  * @param {Date} start The starting date of the range to examine.
125 |  * @param {Date} end The ending date of the range to examine.
126 |  * @param {Date} optSince A date indicating the last time this script was run.
127 |  * @return {Calendar.Event[]} An array of calendar events.
128 |  */
129 | function findEvents(user, keyword, start, end, optSince) {
130 |   let params = {
131 |     q: keyword,
132 |     timeMin: formatDateAsRFC3339(start),
133 |     timeMax: formatDateAsRFC3339(end),
134 |     showDeleted: true,
135 |   };
136 |   if (optSince) {
137 |     // This prevents the script from examining events that have not been
138 |     // modified since the specified date (that is, the last time the
139 |     // script was run).
140 |     params.updatedMin = formatDateAsRFC3339(optSince);
141 |   }
142 |   let pageToken = null;
143 |   let events = [];
144 |   do {
145 |     params.pageToken = pageToken;
146 |     let response;
147 |     try {
148 |       response = Calendar.Events.list(user.getEmail(), params);
149 |     } catch (e) {
150 |       console.error('Error retriving events for %s, %s: %s; skipping',
151 |           user, keyword, e.toString());
152 |       continue;
153 |     }
154 |     events = events.concat(response.items.filter(function(item) {
155 |       return shouldImportEvent(user, keyword, item);
156 |     }));
157 |     pageToken = response.nextPageToken;
158 |   } while (pageToken);
159 |   return events;
160 | }
161 | 
162 | /**
163 |  * Determines if the given event should be imported into the shared team
164 |  * calendar.
165 |  * @param {Session.User} user The user that is attending the event.
166 |  * @param {string} keyword The keyword being searched for.
167 |  * @param {Calendar.Event} event The event being considered.
168 |  * @return {boolean} True if the event should be imported.
169 |  */
170 | function shouldImportEvent(user, keyword, event) {
171 |   // Filters out events where the keyword did not appear in the summary
172 |   // (that is, the keyword appeared in a different field, and are thus
173 |   // is not likely to be relevant).
174 |   if (event.summary.toLowerCase().indexOf(keyword) < 0) {
175 |     return false;
176 |   }
177 |   if (!event.organizer || event.organizer.email == user.getEmail()) {
178 |     // If the user is the creator of the event, always imports it.
179 |     return true;
180 |   }
181 |   // Only imports events the user has accepted.
182 |   if (!event.attendees) return false;
183 |   let matching = event.attendees.filter(function(attendee) {
184 |     return attendee.self;
185 |   });
186 |   return matching.length > 0 && matching[0].responseStatus == 'accepted';
187 | }
188 | 
189 | /**
190 |  * Returns an RFC3339 formated date String corresponding to the given
191 |  * Date object.
192 |  * @param {Date} date a Date.
193 |  * @return {string} a formatted date string.
194 |  */
195 | function formatDateAsRFC3339(date) {
196 |   return Utilities.formatDate(date, 'UTC', 'yyyy-MM-dd\'T\'HH:mm:ssZ');
197 | }
198 | 
199 | /**
200 | * Get both direct and indirect members (and delete duplicates).
201 | * @param {string} the e-mail address of the group.
202 | * @return {object} direct and indirect members.
203 | */
204 | function getAllMembers(groupEmail) {
205 |   var group = GroupsApp.getGroupByEmail(groupEmail);
206 |   var users = group.getUsers();
207 |   var childGroups = group.getGroups();
208 |   for (var i = 0; i < childGroups.length; i++) {
209 |     var childGroup = childGroups[i];
210 |     users = users.concat(getAllMembers(childGroup.getEmail()));
211 |   }
212 |   // Remove duplicate members
213 |   var uniqueUsers = [];
214 |   var userEmails = {};
215 |   for (var i = 0; i < users.length; i++) {
216 |     var user = users[i];
217 |     if (!userEmails[user.getEmail()]) {
218 |       uniqueUsers.push(user);
219 |       userEmails[user.getEmail()] = true;
220 |     }
221 |   }
222 |   return uniqueUsers;
223 | }
224 | 
225 | /**
226 | * Get indirect members from multiple groups (and delete duplicates).
227 | * @param {array} the e-mail addresses of multiple groups.
228 | * @return {object} indirect members of multiple groups.
229 | */
230 | function getUsersFromGroups(groupEmails) {
231 |   let users = [];
232 |   for (let groupEmail of groupEmails) {
233 |     let groupUsers = GroupsApp.getGroupByEmail(groupEmail).getUsers();
234 |     for (let user of groupUsers) {
235 |       if (!users.some(u => u.getEmail() === user.getEmail())) {
236 |         users.push(user);
237 |       }
238 |     }
239 |   }
240 |   return users;
241 | }
242 | 


--------------------------------------------------------------------------------
/solutions/automations/vacation-calendar/README.md:
--------------------------------------------------------------------------------
1 | # Populate a team vacation calendar
2 | 
3 | See [developers.google.com](https://developers.google.com/apps-script/samples/automations/vacation-calendar) for additional details.


--------------------------------------------------------------------------------
/solutions/automations/youtube-tracker/Code.js:
--------------------------------------------------------------------------------
  1 | // To learn how to use this script, refer to the documentation:
  2 | // https://developers.google.com/apps-script/samples/automations/youtube-tracker
  3 | 
  4 | /*
  5 | Copyright 2022 Google LLC
  6 | 
  7 | Licensed under the Apache License, Version 2.0 (the "License");
  8 | you may not use this file except in compliance with the License.
  9 | You may obtain a copy of the License at
 10 | 
 11 |     https://www.apache.org/licenses/LICENSE-2.0
 12 | 
 13 | Unless required by applicable law or agreed to in writing, software
 14 | distributed under the License is distributed on an "AS IS" BASIS,
 15 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 16 | See the License for the specific language governing permissions and
 17 | limitations under the License.
 18 | */
 19 | 
 20 | // Sets preferences for email notification. Choose 'Y' to send emails, 'N' to skip emails.
 21 | const EMAIL_ON = 'Y';
 22 | 
 23 | // Matches column names in Video sheet to variables. If the column names change, update these variables.
 24 | const COLUMN_NAME = {
 25 |   VIDEO: 'Video Link',
 26 |   TITLE: 'Video Title',
 27 | };
 28 | 
 29 | /**
 30 |  * Gets YouTube video details and statistics for all
 31 |  * video URLs listed in 'Video Link' column in each
 32 |  * sheet. Sends email summary, based on preferences above, 
 33 |  * when videos have new comments or replies.
 34 |  */
 35 | function markVideos() {
 36 |   let ss = SpreadsheetApp.getActiveSpreadsheet();
 37 |   let sheets = SpreadsheetApp.getActiveSpreadsheet().getSheets();
 38 |   
 39 |   // Runs through process for each tab in Spreadsheet.
 40 |   sheets.forEach(function(dataSheet) {
 41 |     let tabName = dataSheet.getName();
 42 |     let range = dataSheet.getDataRange();
 43 |     let numRows = range.getNumRows();
 44 |     let rows = range.getValues();
 45 |     let headerRow = rows[0];
 46 |     
 47 |     // Finds the column indices.
 48 |     let videoColumnIdx = headerRow.indexOf(COLUMN_NAME.VIDEO);
 49 |     let titleColumnIdx = headerRow.indexOf(COLUMN_NAME.TITLE);
 50 |     
 51 |     // Creates empty array to collect data for email table.
 52 |     let emailContent = [];
 53 |     
 54 |     // Processes each row in spreadsheet.
 55 |     for (let i = 1; i < numRows; ++i) {
 56 |       let row = rows[i];
 57 |       // Extracts video ID.
 58 |       let videoId = extractVideoIdFromUrl(row[videoColumnIdx])
 59 |       // Processes each row that contains a video ID.
 60 |       if(!videoId) { 
 61 |         continue;
 62 |       }
 63 |       // Calls getVideoDetails function and extracts target data for the video.
 64 |       let detailsResponse = getVideoDetails(videoId);
 65 |       let title = detailsResponse.items[0].snippet.title;
 66 |       let publishDate = detailsResponse.items[0].snippet.publishedAt;
 67 |       let publishDateFormatted = new Date(publishDate);
 68 |       let views = detailsResponse.items[0].statistics.viewCount;
 69 |       let likes = detailsResponse.items[0].statistics.likeCount;
 70 |       let comments = detailsResponse.items[0].statistics.commentCount;
 71 |       let channel = detailsResponse.items[0].snippet.channelTitle;
 72 |       
 73 |       // Collects title, publish date, channel, views, comments, likes details and pastes into tab.
 74 |       let detailsRow = [title,publishDateFormatted,channel,views,comments,likes];
 75 |       dataSheet.getRange(i+1,titleColumnIdx+1,1,6).setValues([detailsRow]);
 76 |       
 77 |       // Determines if new count of comments/replies is greater than old count of comments/replies.
 78 |       let addlCommentCount = comments - row[titleColumnIdx+4];
 79 |       
 80 |       // Adds video title, link, and additional comment count to table if new counts > old counts.
 81 |       if (addlCommentCount > 0) {
 82 |         let emailRow = [title,row[videoColumnIdx],addlCommentCount]
 83 |         emailContent.push(emailRow);
 84 |       }
 85 |     }
 86 |     // Sends notification email if Content is not empty.
 87 |     if (emailContent.length > 0 && EMAIL_ON == 'Y') {
 88 |       sendEmailNotificationTemplate(emailContent, tabName);
 89 |     }
 90 |   });
 91 | }
 92 |                  
 93 | /**
 94 |  * Gets video details for YouTube videos
 95 |  * using YouTube advanced service.
 96 |  */
 97 | function getVideoDetails(videoId) {
 98 |   let part = "snippet,statistics";
 99 |   let response = YouTube.Videos.list(part,
100 |       {'id': videoId});
101 |  return response;
102 | }
103 | 
104 | /**
105 |  * Extracts YouTube video ID from url.
106 |  * (h/t https://stackoverflow.com/a/3452617)
107 |  */
108 | function extractVideoIdFromUrl(url) {
109 |   let videoId = url.split('v=')[1];
110 |   let ampersandPosition = videoId.indexOf('&');
111 |   if (ampersandPosition != -1) {
112 |     videoId = videoId.substring(0, ampersandPosition);
113 |   }   
114 |  return videoId;
115 | }
116 | 
117 | /**
118 |  * Assembles notification email with table of video details. 
119 |  * (h/t https://stackoverflow.com/questions/37863392/making-table-in-google-apps-script-from-array)
120 |  */
121 | function sendEmailNotificationTemplate(content, emailAddress) {
122 |   let template = HtmlService.createTemplateFromFile('email');
123 |   template.content = content;
124 |   let msg = template.evaluate();  
125 |   MailApp.sendEmail(emailAddress,'New comments or replies on YouTube',msg.getContent(),{htmlBody:msg.getContent()});
126 | }


--------------------------------------------------------------------------------
/solutions/automations/youtube-tracker/README.md:
--------------------------------------------------------------------------------
1 | # Track YouTube video views and comments
2 | 
3 | See [developers.google.com](https://developers.google.com/apps-script/samples/automations/youtube-tracker) for additional details.


--------------------------------------------------------------------------------
/solutions/custom-functions/calculate-driving-distance/Code.js:
--------------------------------------------------------------------------------
  1 | // To learn how to use this script, refer to the documentation:
  2 | // https://developers.google.com/apps-script/samples/custom-functions/calculate-driving-distance
  3 | 
  4 | /*
  5 | Copyright 2022 Google LLC
  6 | 
  7 | Licensed under the Apache License, Version 2.0 (the "License");
  8 | you may not use this file except in compliance with the License.
  9 | You may obtain a copy of the License at
 10 | 
 11 |     https://www.apache.org/licenses/LICENSE-2.0
 12 | 
 13 | Unless required by applicable law or agreed to in writing, software
 14 | distributed under the License is distributed on an "AS IS" BASIS,
 15 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 16 | See the License for the specific language governing permissions and
 17 | limitations under the License.
 18 | */
 19 | 
 20 | /**
 21 |  * @OnlyCurrentDoc Limits the script to only accessing the current sheet.
 22 |  */
 23 | 
 24 | /**
 25 |  * A special function that runs when the spreadsheet is open, used to add a
 26 |  * custom menu to the spreadsheet.
 27 |  */
 28 | function onOpen() {
 29 |   try {
 30 |     const spreadsheet = SpreadsheetApp.getActive();
 31 |     const menuItems = [
 32 |       {name: 'Prepare sheet...', functionName: 'prepareSheet_'},
 33 |       {name: 'Generate step-by-step...', functionName: 'generateStepByStep_'}
 34 |     ];
 35 |     spreadsheet.addMenu('Directions', menuItems);
 36 |   } catch (e) {
 37 |     // TODO (Developer) - Handle Exception
 38 |     console.log('Failed with error: %s' + e.error);
 39 |   }
 40 | }
 41 | 
 42 | /**
 43 |  * A custom function that converts meters to miles.
 44 |  *
 45 |  * @param {Number} meters The distance in meters.
 46 |  * @return {Number} The distance in miles.
 47 |  */
 48 | function metersToMiles(meters) {
 49 |   if (typeof meters !== 'number') {
 50 |     return null;
 51 |   }
 52 |   return meters / 1000 * 0.621371;
 53 | }
 54 | 
 55 | /**
 56 |  * A custom function that gets the driving distance between two addresses.
 57 |  *
 58 |  * @param {String} origin The starting address.
 59 |  * @param {String} destination The ending address.
 60 |  * @return {Number} The distance in meters.
 61 |  */
 62 | function drivingDistance(origin, destination) {
 63 |   const directions = getDirections_(origin, destination);
 64 |   return directions.routes[0].legs[0].distance.value;
 65 | }
 66 | 
 67 | /**
 68 |  * A function that adds headers and some initial data to the spreadsheet.
 69 |  */
 70 | function prepareSheet_() {
 71 |   try {
 72 |     const sheet = SpreadsheetApp.getActiveSheet().setName('Settings');
 73 |     const headers = [
 74 |       'Start Address',
 75 |       'End Address',
 76 |       'Driving Distance (meters)',
 77 |       'Driving Distance (miles)'];
 78 |     const initialData = [
 79 |       '350 5th Ave, New York, NY 10118',
 80 |       '405 Lexington Ave, New York, NY 10174'];
 81 |     sheet.getRange('A1:D1').setValues([headers]).setFontWeight('bold');
 82 |     sheet.getRange('A2:B2').setValues([initialData]);
 83 |     sheet.setFrozenRows(1);
 84 |     sheet.autoResizeColumns(1, 4);
 85 |   } catch (e) {
 86 |     // TODO (Developer) - Handle Exception
 87 |     console.log('Failed with error: %s' + e.error);
 88 |   }
 89 | }
 90 | 
 91 | /**
 92 |  * Creates a new sheet containing step-by-step directions between the two
 93 |  * addresses on the "Settings" sheet that the user selected.
 94 |  */
 95 | function generateStepByStep_() {
 96 |   try {
 97 |     const spreadsheet = SpreadsheetApp.getActive();
 98 |     const settingsSheet = spreadsheet.getSheetByName('Settings');
 99 |     settingsSheet.activate();
100 | 
101 |     // Prompt the user for a row number.
102 |     const selectedRow = Browser
103 |         .inputBox('Generate step-by-step', 'Please enter the row number of' +
104 |         ' the' + ' addresses to use' + ' (for example, "2"):',
105 |         Browser.Buttons.OK_CANCEL);
106 |     if (selectedRow === 'cancel') {
107 |       return;
108 |     }
109 |     const rowNumber = Number(selectedRow);
110 |     if (isNaN(rowNumber) || rowNumber < 2 ||
111 |       rowNumber > settingsSheet.getLastRow()) {
112 |       Browser.msgBox('Error',
113 |           Utilities.formatString('Row "%s" is not valid.', selectedRow),
114 |           Browser.Buttons.OK);
115 |       return;
116 |     }
117 | 
118 | 
119 |     // Retrieve the addresses in that row.
120 |     const row = settingsSheet.getRange(rowNumber, 1, 1, 2);
121 |     const rowValues = row.getValues();
122 |     const origin = rowValues[0][0];
123 |     const destination = rowValues[0][1];
124 |     if (!origin || !destination) {
125 |       Browser.msgBox('Error', 'Row does not contain two addresses.',
126 |           Browser.Buttons.OK);
127 |       return;
128 |     }
129 | 
130 |     // Get the raw directions information.
131 |     const directions = getDirections_(origin, destination);
132 | 
133 |     // Create a new sheet and append the steps in the directions.
134 |     const sheetName = 'Driving Directions for Row ' + rowNumber;
135 |     let directionsSheet = spreadsheet.getSheetByName(sheetName);
136 |     if (directionsSheet) {
137 |       directionsSheet.clear();
138 |       directionsSheet.activate();
139 |     } else {
140 |       directionsSheet =
141 |         spreadsheet.insertSheet(sheetName, spreadsheet.getNumSheets());
142 |     }
143 |     const sheetTitle = Utilities
144 |         .formatString('Driving Directions from %s to %s', origin, destination);
145 |     const headers = [
146 |       [sheetTitle, '', ''],
147 |       ['Step', 'Distance (Meters)', 'Distance (Miles)']
148 |     ];
149 |     const newRows = [];
150 |     for (const step of directions.routes[0].legs[0].steps) {
151 |       // Remove HTML tags from the instructions.
152 |       const instructions = step.html_instructions
153 |           .replace(/<br>|<div.*?>/g, '\n').replace(/<.*?>/g, '');
154 |       newRows.push([
155 |         instructions,
156 |         step.distance.value
157 |       ]);
158 |     }
159 |     directionsSheet.getRange(1, 1, headers.length, 3).setValues(headers);
160 |     directionsSheet.getRange(headers.length + 1, 1, newRows.length, 2)
161 |         .setValues(newRows);
162 |     directionsSheet.getRange(headers.length + 1, 3, newRows.length, 1)
163 |         .setFormulaR1C1('=METERSTOMILES(R[0]C[-1])');
164 | 
165 |     // Format the new sheet.
166 |     directionsSheet.getRange('A1:C1').merge().setBackground('#ddddee');
167 |     directionsSheet.getRange('A1:2').setFontWeight('bold');
168 |     directionsSheet.setColumnWidth(1, 500);
169 |     directionsSheet.getRange('B2:C').setVerticalAlignment('top');
170 |     directionsSheet.getRange('C2:C').setNumberFormat('0.00');
171 |     const stepsRange = directionsSheet.getDataRange()
172 |         .offset(2, 0, directionsSheet.getLastRow() - 2);
173 |     setAlternatingRowBackgroundColors_(stepsRange, '#ffffff', '#eeeeee');
174 |     directionsSheet.setFrozenRows(2);
175 |     SpreadsheetApp.flush();
176 |   } catch (e) {
177 |     // TODO (Developer) - Handle Exception
178 |     console.log('Failed with error: %s' + e.error);
179 |   }
180 | }
181 | 
182 | /**
183 |  * Sets the background colors for alternating rows within the range.
184 |  * @param {Range} range The range to change the background colors of.
185 |  * @param {string} oddColor The color to apply to odd rows (relative to the
186 |  *     start of the range).
187 |  * @param {string} evenColor The color to apply to even rows (relative to the
188 |  *     start of the range).
189 |  */
190 | function setAlternatingRowBackgroundColors_(range, oddColor, evenColor) {
191 |   const backgrounds = [];
192 |   for (let row = 1; row <= range.getNumRows(); row++) {
193 |     const rowBackgrounds = [];
194 |     for (let column = 1; column <= range.getNumColumns(); column++) {
195 |       if (row % 2 === 0) {
196 |         rowBackgrounds.push(evenColor);
197 |       } else {
198 |         rowBackgrounds.push(oddColor);
199 |       }
200 |     }
201 |     backgrounds.push(rowBackgrounds);
202 |   }
203 |   range.setBackgrounds(backgrounds);
204 | }
205 | 
206 | /**
207 |  * A shared helper function used to obtain the full set of directions
208 |  * information between two addresses. Uses the Apps Script Maps Service.
209 |  *
210 |  * @param {String} origin The starting address.
211 |  * @param {String} destination The ending address.
212 |  * @return {Object} The directions response object.
213 |  */
214 | function getDirections_(origin, destination) {
215 |   const directionFinder = Maps.newDirectionFinder();
216 |   directionFinder.setOrigin(origin);
217 |   directionFinder.setDestination(destination);
218 |   const directions = directionFinder.getDirections();
219 |   if (directions.status !== 'OK') {
220 |     throw directions.error_message;
221 |   }
222 |   return directions;
223 | }
224 | 


--------------------------------------------------------------------------------
/solutions/custom-functions/calculate-driving-distance/README.md:
--------------------------------------------------------------------------------
1 | # Calculate driving distance & convert meters to miles
2 | 
3 | See [developers.google.com](https://developers.google.com/apps-script/samples/custom-functions/calculate-driving-distance) for additional details.
4 | 
5 | 


--------------------------------------------------------------------------------
/solutions/custom-functions/summarize-sheets-data/Code.js:
--------------------------------------------------------------------------------
 1 | // To learn how to use this script, refer to the documentation:
 2 | // https://developers.google.com/apps-script/samples/custom-functions/summarize-sheets-data
 3 | 
 4 | /*
 5 | Copyright 2022 Google LLC
 6 | 
 7 | Licensed under the Apache License, Version 2.0 (the "License");
 8 | you may not use this file except in compliance with the License.
 9 | You may obtain a copy of the License at
10 | 
11 |     https://www.apache.org/licenses/LICENSE-2.0
12 | 
13 | Unless required by applicable law or agreed to in writing, software
14 | distributed under the License is distributed on an "AS IS" BASIS,
15 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
16 | See the License for the specific language governing permissions and
17 | limitations under the License.
18 | */
19 | 
20 | /**
21 |  * Gets summary data from other sheets. The sheets you want to summarize must have columns with headers that match the names of the columns this function summarizes data from.
22 |  * 
23 |  * @return {string} Summary data from other sheets.
24 |  * @customfunction
25 |  */
26 | 
27 | // The following sheets are ignored. Add additional constants for other sheets that should be ignored.
28 | const READ_ME_SHEET_NAME = "ReadMe";
29 | const PM_SHEET_NAME = "Summary";
30 | 
31 | /**
32 |  * Reads data ranges for each sheet. Filters and counts based on 'Status' columns. To improve performance, the script uses arrays 
33 |  * until all summary data is gathered. Then the script writes the summary array starting at the cell of the custom function.
34 |  */
35 | function getSheetsData() {
36 |   let ss = SpreadsheetApp.getActiveSpreadsheet();
37 |   let sheets = ss.getSheets();
38 |   let outputArr = [];
39 | 
40 |   // For each sheet, summarizes the data and pushes to a temporary array.
41 |   for (let s in sheets) {
42 |     // Gets sheet name.
43 |     let sheetNm = sheets[s].getName();
44 |     // Skips ReadMe and Summary sheets.
45 |     if (sheetNm === READ_ME_SHEET_NAME || sheetNm === PM_SHEET_NAME) { continue; }
46 |     // Gets sheets data.
47 |     let values = sheets[s].getDataRange().getValues();
48 |     // Gets the first row of the sheet which is the header row.
49 |     let headerRowValues = values[0];
50 |     // Finds the columns with the heading names 'Owner Name' and 'Status' and gets the index value of each.
51 |     // Using 'indexOf()' to get the position of each column prevents the script from breaking if the columns change positions in a sheet.
52 |     let columnOwner = headerRowValues.indexOf("Owner Name");
53 |     let columnStatus = headerRowValues.indexOf("Status");
54 |     // Removes header row.
55 |     values.splice(0,1);
56 |     // Gets the 'Owner Name' column value by retrieving the first data row in the array.
57 |     let owner = values[0][columnOwner];
58 |     // Counts the total number of tasks.
59 |     let taskCnt = values.length;
60 |     // Counts the number of tasks that have the 'Complete' status.
61 |     // If the options you want to count in your spreadsheet differ, update the strings below to match the text of each option.
62 |     // To add more options, copy the line below and update the string to the new text.
63 |     let completeCnt = filterByPosition(values,'Complete', columnStatus).length;
64 |     // Counts the number of tasks that have the 'In-Progress' status.
65 |     let inProgressCnt = filterByPosition(values,'In-Progress', columnStatus).length;
66 |     // Counts the number of tasks that have the 'Scheduled' status.
67 |     let scheduledCnt = filterByPosition(values,'Scheduled', columnStatus).length;
68 |     // Counts the number of tasks that have the 'Overdue' status.
69 |     let overdueCnt = filterByPosition(values,'Overdue', columnStatus).length;
70 |     // Builds the output array.
71 |     outputArr.push([owner,taskCnt,completeCnt,inProgressCnt,scheduledCnt,overdueCnt,sheetNm]);
72 |   }
73 |   // Writes the output array.
74 |   return outputArr;
75 | }
76 | 
77 | /**
78 |  * Below is a helper function that filters a 2-dimenstional array.
79 |  */
80 | function filterByPosition(array, find, position) {
81 |   return array.filter(innerArray => innerArray[position] === find);
82 | }
83 | 
84 | 


--------------------------------------------------------------------------------
/solutions/custom-functions/summarize-sheets-data/README.md:
--------------------------------------------------------------------------------
1 | # Summarize data from multiple sheets
2 | 
3 | See [developers.google.com](https://developers.google.com/apps-script/samples/custom-functions/summarize-sheets-data) for additional details.
4 | 
5 | 


--------------------------------------------------------------------------------
/solutions/custom-functions/tier-pricing/Code.js:
--------------------------------------------------------------------------------
 1 | // To learn how to use this script, refer to the documentation:
 2 | // https://developers.google.com/apps-script/samples/custom-functions/tier-pricing
 3 | 
 4 | /*
 5 | Copyright 2022 Google LLC
 6 | 
 7 | Licensed under the Apache License, Version 2.0 (the "License");
 8 | you may not use this file except in compliance with the License.
 9 | You may obtain a copy of the License at
10 | 
11 |     https://www.apache.org/licenses/LICENSE-2.0
12 | 
13 | Unless required by applicable law or agreed to in writing, software
14 | distributed under the License is distributed on an "AS IS" BASIS,
15 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
16 | See the License for the specific language governing permissions and
17 | limitations under the License.
18 | */
19 | 
20 | /**
21 |  * Calculates the tiered pricing discount.  
22 |  *  
23 |  * You must provide a value to calculate its discount. The value can be a string or a reference
24 |  * to a cell that contains a string.
25 |  * You must provide a data table range, for example, $B$4:$D$7, that includes the 
26 |  * tier start, end, and percent columns. If your table has headers, don't include
27 |  * the headers in the range.
28 |  * 
29 |  * @param {string} value The value to calculate the discount for, which can be a string or a 
30 |  * reference to a cell that contains a string.
31 |  * @param {string} table The tier table data range using A1 notation.
32 |  * @return number The total discount amount for the value.
33 |  * @customfunction
34 |  *  
35 |  */
36 | function tierPrice(value, table) {
37 |   let total = 0;
38 |   // Creates an array for each row of the table and loops through each array.
39 |   for (let [start, end, percent] of table) {
40 |   // Checks if the value is less than the starting value of the tier. If it is less, the loop stops.
41 |     if (value < start) {
42 |       break;
43 |     }
44 |   // Calculates the portion of the value to be multiplied by the tier's percent value.
45 |     let amount = Math.min(value, end) - start;
46 |   // Multiplies the amount by the tier's percent value and adds the product to the total.
47 |     total += amount * percent;
48 |   }
49 |   return total;
50 | }
51 |   


--------------------------------------------------------------------------------
/solutions/custom-functions/tier-pricing/README.md:
--------------------------------------------------------------------------------
1 | # Calculate a tiered pricing discount
2 | 
3 | See [developers.google.com](https://developers.google.com/apps-script/samples/custom-functions/tier-pricing) for additional details.
4 | 
5 | 


--------------------------------------------------------------------------------
/solutions/editor-add-on/clean-sheet/Code.js:
--------------------------------------------------------------------------------
  1 | // To learn how to use this script, refer to the documentation:
  2 | // https://developers.google.com/apps-script/add-ons/clean-sheet
  3 | 
  4 | /*
  5 | Copyright 2022 Google LLC
  6 | 
  7 | Licensed under the Apache License, Version 2.0 (the "License");
  8 | you may not use this file except in compliance with the License.
  9 | You may obtain a copy of the License at
 10 | 
 11 |     https://www.apache.org/licenses/LICENSE-2.0
 12 | 
 13 | Unless required by applicable law or agreed to in writing, software
 14 | distributed under the License is distributed on an "AS IS" BASIS,
 15 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 16 | See the License for the specific language governing permissions and
 17 | limitations under the License.
 18 | */
 19 | 
 20 | // Application Constants
 21 | const APP_TITLE = 'Clean sheet';
 22 | 
 23 | /**
 24 |  * Identifies and deletes empty rows in selected range of active sheet.
 25 |  * 
 26 |  * Cells that contain space characters are treated as non-empty.
 27 |  * The entire row, including the cells outside of the selected range,
 28 |  * must be empty to be deleted.
 29 |  *  
 30 |  * Called from menu option.
 31 |  */
 32 | function deleteEmptyRows() {
 33 | 
 34 |   const sheet = SpreadsheetApp.getActiveSheet();
 35 | 
 36 |   // Gets active selection and dimensions.
 37 |   let activeRange = sheet.getActiveRange();
 38 |   const rowCount = activeRange.getHeight();
 39 |   const firstActiveRow = activeRange.getRow();
 40 |   const columnCount = sheet.getMaxColumns();
 41 | 
 42 |   // Tests that the selection is a valid range.
 43 |   if (rowCount < 1) {
 44 |     showMessage('Select a valid range.');
 45 |     return;
 46 |   }
 47 |   // Tests active range isn't too large to process. Enforces limit set to 10k.
 48 |   if (rowCount > 10000) {
 49 |     showMessage("Selected range too large. Select up to 10,000 rows at one time.");
 50 |     return;
 51 |   }
 52 | 
 53 |   // Utilizes an array of values for efficient processing to determine blank rows.
 54 |   const activeRangeValues = sheet.getRange(firstActiveRow, 1, rowCount, columnCount).getValues();
 55 | 
 56 |   // Checks if array is all empty values.
 57 |   const valueFilter = value => value !== '';
 58 |   const isRowEmpty = (row) => {
 59 |     return row.filter(valueFilter).length === 0;
 60 |   }
 61 | 
 62 |   // Maps the range values as an object with value (to test) and corresponding row index (with offset from selection).
 63 |   const rowsToDelete = activeRangeValues.map((row, index) => ({ row, offset: index + activeRange.getRowIndex() }))
 64 |     .filter(item => isRowEmpty(item.row)) // Test to filter out non-empty rows.
 65 |     .map(item => item.offset); //Remap to include just the row indexes that will be removed.
 66 | 
 67 |   // Combines a sorted, ascending list of indexes into a set of ranges capturing consecutive values as start/end ranges.
 68 |   // Combines sequential empty rows for faster processing.
 69 |   const rangesToDelete = rowsToDelete.reduce((ranges, index) => {
 70 |     const currentRange = ranges[ranges.length - 1];
 71 |     if (currentRange && index === currentRange[1] + 1) {
 72 |       currentRange[1] = index;
 73 |       return ranges;
 74 |     }
 75 |     ranges.push([index, index]);
 76 |     return ranges;
 77 |   }, []);
 78 | 
 79 |   // Sends a list of row indexes to be deleted to the console.
 80 |   console.log(rangesToDelete);
 81 | 
 82 |   // Deletes the rows using REVERSE order to ensure proper indexing is used.
 83 |   rangesToDelete.reverse().forEach(([start, end]) => sheet.deleteRows(start, end - start + 1));
 84 |   SpreadsheetApp.flush();
 85 | }
 86 | 
 87 | /**
 88 |  * Removes blank columns in a selected range.
 89 |  * 
 90 |  * Cells containing Space characters are treated as non-empty.
 91 |  * The entire column, including cells outside of the selected range,
 92 |  * must be empty to be deleted.
 93 |  *   
 94 |  * Called from menu option.
 95 |  */
 96 | function deleteEmptyColumns() {
 97 | 
 98 |   const sheet = SpreadsheetApp.getActiveSheet();
 99 | 
100 |   // Gets active selection and dimensions.
101 |   let activeRange = sheet.getActiveRange();
102 |   const rowCountMax = sheet.getMaxRows();
103 |   const columnWidth = activeRange.getWidth();
104 |   const firstActiveColumn = activeRange.getColumn();
105 | 
106 |   // Tests that the selection is a valid range.
107 |   if (columnWidth < 1) {
108 |     showMessage('Select a valid range.');
109 |     return;
110 |   }
111 |   // Tests active range is not too large to process. Enforces limit set to 1k.
112 |   if (columnWidth > 1000) {
113 |     showMessage("Selected range too large. Select up to 10,000 rows at one time.");
114 |     return;
115 |   }
116 | 
117 |   // Utilizes an array of values for efficient processing to determine blank columns.
118 |   const activeRangeValues = sheet.getRange(1, firstActiveColumn, rowCountMax, columnWidth).getValues();
119 | 
120 |   // Transposes the array of range values so it can be processed in order of columns.
121 |   const activeRangeValuesTransposed = activeRangeValues[0].map((_, colIndex) => activeRangeValues.map(row => row[colIndex]));
122 | 
123 |   // Checks if array is all empty values.
124 |   const valueFilter = value => value !== '';
125 |   const isColumnEmpty = (column) => {
126 |     return column.filter(valueFilter).length === 0;
127 |   }
128 | 
129 |   // Maps the range values as an object with value (to test) and corresponding column index (with offset from selection).
130 |   const columnsToDelete = activeRangeValuesTransposed.map((column, index) => ({ column, offset: index + firstActiveColumn}))
131 |     .filter(item => isColumnEmpty(item.column)) // Test to filter out non-empty rows.
132 |     .map(item => item.offset); //Remap to include just the column indexes that will be removed.
133 | 
134 |   // Combines a sorted, ascending list of indexes into a set of ranges capturing consecutive values as start/end ranges.
135 |   // Combines sequential empty columns for faster processing.
136 |   const rangesToDelete = columnsToDelete.reduce((ranges, index) => {
137 |     const currentRange = ranges[ranges.length - 1];
138 |     if (currentRange && index === currentRange[1] + 1) {
139 |       currentRange[1] = index;
140 |       return ranges;
141 |     }
142 |     ranges.push([index, index]);
143 |     return ranges;
144 |   }, []);
145 | 
146 |   // Sends a list of column indexes to be deleted to the console.
147 |   console.log(rangesToDelete);
148 | 
149 |   // Deletes the columns using REVERSE order to ensure proper indexing is used.
150 |   rangesToDelete.reverse().forEach(([start, end]) => sheet.deleteColumns(start, end - start + 1));
151 |   SpreadsheetApp.flush();
152 | }
153 | 
154 | /**
155 |  * Trims all of the unused rows and columns outside of selected data range.
156 |  * 
157 |  * Called from menu option.
158 |  */
159 | function cropSheet() {
160 |   const dataRange = SpreadsheetApp.getActiveSheet().getDataRange();
161 |   const sheet = dataRange.getSheet();
162 | 
163 |   let numRows = dataRange.getNumRows();
164 |   let numColumns = dataRange.getNumColumns();
165 | 
166 |   const maxRows = sheet.getMaxRows();
167 |   const maxColumns = sheet.getMaxColumns();
168 | 
169 |   const numFrozenRows = sheet.getFrozenRows();
170 |   const numFrozenColumns = sheet.getFrozenColumns();
171 | 
172 |   // If last data row is less than maximium row, then deletes rows after the last data row.
173 |   if (numRows < maxRows) {
174 |     numRows = Math.max(numRows, numFrozenRows + 1); // Don't crop empty frozen rows.
175 |     sheet.deleteRows(numRows + 1, maxRows - numRows);
176 |   }
177 | 
178 |   // If last data column is less than maximium column, then deletes columns after the last data column.
179 |   if (numColumns < maxColumns) {
180 |     numColumns = Math.max(numColumns, numFrozenColumns + 1); // Don't crop empty frozen columns.
181 |     sheet.deleteColumns(numColumns + 1, maxColumns - numColumns);
182 |   }
183 | }
184 | 
185 | /**
186 |  * Copies value of active cell to the blank cells beneath it. 
187 |  * Stops at last row of the sheet's data range if only blank cells are encountered.
188 |  * 
189 |  * Called from menu option.
190 |  */
191 | function fillDownData() {
192 | 
193 |   const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
194 | 
195 |   // Gets sheet's active cell and confirms it's not empty.
196 |   const activeCell = sheet.getActiveCell();
197 |   const activeCellValue = activeCell.getValue();
198 | 
199 |   if (!activeCellValue) {
200 |     showMessage("The active cell is empty. Nothing to fill.");
201 |     return;
202 |   }
203 | 
204 |   // Gets coordinates of active cell.
205 |   const column = activeCell.getColumn();
206 |   const row = activeCell.getRow();
207 | 
208 |   // Gets entire data range of the sheet.
209 |   const dataRange = sheet.getDataRange();
210 |   const dataRangeRows = dataRange.getNumRows();
211 | 
212 |   // Gets trimmed range starting from active cell to the end of sheet data range.
213 |   const searchRange = dataRange.offset(row - 1, column - 1, dataRangeRows - row + 1, 1)
214 |   const searchValues = searchRange.getDisplayValues();
215 | 
216 |   // Find the number of empty rows below the active cell.
217 |   let i = 1; // Start at 1 to skip the ActiveCell.
218 |   while (searchValues[i] && searchValues[i][0] == "") { i++; }
219 | 
220 |   // If blanks exist, fill the range with values.
221 |   if (i > 1) {
222 |     const fillRange = searchRange.offset(0, 0, i, 1).setValue(activeCellValue)
223 |     //sheet.setActiveRange(fillRange) // Uncomment to test affected range.
224 |   }
225 |   else {
226 |     showMessage("There are no empty cells below the Active Cell to fill.");
227 |   }
228 | }
229 | 
230 | /**
231 |  * A helper function to display messages to user.
232 |  * 
233 |  * @param {string} message - Message to be displayed.
234 |  * @param {string} caller - {Optional} text to append to title.
235 |  */
236 | function showMessage(message, caller) {
237 | 
238 |   // Sets the title using the APP_TITLE variable; adds optional caller string.
239 |   const title = APP_TITLE
240 |   if (caller != null) {
241 |     title += ` : ${caller}`
242 |   };
243 | 
244 |   const ui = SpreadsheetApp.getUi();
245 |   ui.alert(title, message, ui.ButtonSet.OK);
246 | }
247 | 


--------------------------------------------------------------------------------
/solutions/editor-add-on/clean-sheet/Menu.js:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright 2022 Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *      http://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | /**
18 |  * Creates a menu entry in the Google Sheets Extensions menu when the document is opened.
19 |  *
20 |  * @param {object} e The event parameter for a simple onOpen trigger. 
21 |  */
22 | function onOpen(e) {
23 |   // Builds a menu that displays under the Extensions menu in Sheets.
24 |   let menu = SpreadsheetApp.getUi().createAddonMenu()
25 | 
26 |   menu
27 |     .addItem('Delete blank rows (from selected rows only)', 'deleteEmptyRows')
28 |     .addItem('Delete blank columns (from selected columns only)', 'deleteEmptyColumns')
29 |     .addItem('Crop sheet to data range', 'cropSheet')
30 |     .addSeparator()
31 |     .addItem('Fill in blank rows below', 'fillDownData')
32 |     .addSeparator()
33 |     .addItem('About', 'aboutApp')
34 |     .addToUi();
35 | }
36 | 
37 | /**
38 |  * Runs when the add-on is installed; calls onOpen() to ensure menu creation and
39 |  * any other initializion work is done immediately. This method is only used by 
40 |  * the desktop add-on and is never called by the mobile version.
41 |  *
42 |  * @param {object} e The event parameter for a simple onInstall trigger. 
43 |  */
44 | function onInstall(e) {
45 |   onOpen(e);
46 | }
47 | 
48 | /**
49 |  * About box for context and developer contact information.
50 |  * TODO: Personalize
51 |  */
52 | function aboutApp() {
53 |   const msg = `
54 |   Name: ${APP_TITLE}
55 |   Version: 1.0
56 |   Contact: <Developer Email Goes Here>`
57 | 
58 |   const ui = SpreadsheetApp.getUi();
59 |   ui.alert("About this application", msg, ui.ButtonSet.OK);
60 | }


--------------------------------------------------------------------------------
/solutions/editor-add-on/clean-sheet/README.md:
--------------------------------------------------------------------------------
1 | # Clean up data in a spreadsheet
2 | 
3 | See [developers.google.com](https://developers.google.com/apps-script/add-ons/clean-sheet) for additional details.
4 | 
5 | 


--------------------------------------------------------------------------------
/solutions/ooo-chat-app/Code.js:
--------------------------------------------------------------------------------
  1 | /*
  2 | Copyright 2022 Google LLC
  3 | Licensed under the Apache License, Version 2.0 (the "License");
  4 | you may not use this file except in compliance with the License.
  5 | You may obtain a copy of the License at
  6 |     https://www.apache.org/licenses/LICENSE-2.0
  7 | Unless required by applicable law or agreed to in writing, software
  8 | distributed under the License is distributed on an "AS IS" BASIS,
  9 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 10 | See the License for the specific language governing permissions and
 11 | limitations under the License.
 12 | */
 13 | 
 14 | /**
 15 |  * Responds to an ADDED_TO_SPACE event in Chat.
 16 |  * @param {object} event the event object from Chat
 17 |  * @return {object} JSON-formatted response
 18 |  * @see https://developers.google.com/hangouts/chat/reference/message-formats/events
 19 |  */
 20 | function onAddToSpace(event) {
 21 |   let message = 'Thank you for adding me to ';
 22 |   if (event.space.type === 'DM') {
 23 |     message += 'a DM, ' + event.user.displayName + '!';
 24 |   } else {
 25 |     message += event.space.displayName;
 26 |   }
 27 |   return { text: message };
 28 | }
 29 | 
 30 | /**
 31 |  * Responds to a REMOVED_FROM_SPACE event in Chat.
 32 |  * @param {object} event the event object from Chat
 33 |  * @param {object} event the event object from Chat
 34 |  * @see https://developers.google.com/hangouts/chat/reference/message-formats/events
 35 |  */
 36 | function onRemoveFromSpace(event) {
 37 |   console.log('App removed from ', event.space.name);
 38 | }
 39 | 
 40 | 
 41 | /**
 42 |  * Responds to a MESSAGE event triggered in Chat.
 43 |  * @param {object} event the event object from Chat
 44 |  * @return {function} call the respective function
 45 |  */
 46 | function onMessage(event) {
 47 |   const message = event.message;
 48 | 
 49 |   if (message.slashCommand) {
 50 |     switch (message.slashCommand.commandId) {
 51 |       case 1: // Help command
 52 |         return createHelpCard();
 53 |       case 2: // Block out day command
 54 |         return blockDayOut();
 55 |       case 3: // Cancel all meetings command
 56 |         return cancelAllMeetings();
 57 |       case 4: // Set auto reply command
 58 |         return setAutoReply();
 59 |     }
 60 |   }
 61 | }
 62 | 
 63 | function createHelpCard() {
 64 |   return {
 65 |     "cardsV2": [
 66 |       {
 67 |         "cardId": "2",
 68 |         "card": {
 69 |           "sections": [
 70 |             {
 71 |               "header": "",
 72 |               "widgets": [
 73 |                 {
 74 |                   "decoratedText": {
 75 |                     "topLabel": "",
 76 |                     "text": "Hi! 👋 I'm here to help you with your out of office tasks.<br><br>Here's a list of commands I understand.",
 77 |                     "wrapText": true
 78 |                   }
 79 |                 }
 80 |               ]
 81 |             },
 82 |             {
 83 |               "widgets": [
 84 |                 {
 85 |                   "decoratedText": {
 86 |                     "topLabel": "",
 87 |                     "text": "<b>/blockDayOut</b>: I will block out your calendar for you.",
 88 |                     "wrapText": true
 89 |                   }
 90 |                 },
 91 |                 {
 92 |                   "decoratedText": {
 93 |                     "topLabel": "",
 94 |                     "text": "<b>/cancelAllMeetings</b>: I will cancel all your meetings for the day.",
 95 |                     "wrapText": true
 96 |                   }
 97 |                 },
 98 |                 {
 99 |                   "decoratedText": {
100 |                     "topLabel": "",
101 |                     "text": "<b>/setAutoReply</b>: Set an out of office auto reply in Gmail.",
102 |                     "wrapText": true
103 |                   }
104 |                 }
105 |               ]
106 |             }
107 |           ],
108 |           "header": {
109 |             "title": "OOO app",
110 |             "subtitle": "Helping you manage your OOO",
111 |             "imageUrl": "https://goo.gle/3SfMkjb",
112 |             "imageType": "SQUARE"
113 |           }
114 |         }
115 |       }
116 |     ]
117 |   }
118 | }
119 | 
120 | /**
121 |  * Adds an all day event to the users Google Calendar.
122 |  * @return {object} JSON-formatted response
123 |  */
124 | function blockDayOut() {
125 |   blockOutCalendar();
126 |   return createResponseCard('Your calendar has been blocked out for you.')
127 | }
128 | 
129 | /**
130 |  * Cancels all of the users meeting for the current day.
131 |  * @return {object} JSON-formatted response
132 |  */
133 | function cancelAllMeetings() {
134 |   cancelMeetings();
135 |   return createResponseCard('All your meetings have been canceled.')
136 | }
137 | 
138 | /**
139 |  * Sets an out of office auto reply in the users Gmail account.
140 |  * @return {object} JSON-formatted response
141 |  */
142 | function setAutoReply() {
143 |   turnOnAutoResponder();
144 |   return createResponseCard('The out of office auto reply has been turned on.')
145 | }
146 | 
147 | 
148 | 
149 | /**
150 |  * Creates an out of office event in the user's Calendar.
151 |  */
152 | function blockOutCalendar() {
153 |   /**
154 |    * Helper function to get a the current date and set the time for the start and end of the event.
155 |    * @param {number} hour The hour of the day for the new date.
156 |    * @param {number} minutes The minutes of the day for the new date.
157 |    * @return {Date} The new date.
158 |    */
159 |   function getDateAndHours(hour, minutes) {
160 |     const date = new Date();
161 |     date.setHours(hour);
162 |     date.setMinutes(minutes);
163 |     date.setSeconds(0);
164 |     date.setMilliseconds(0);
165 |     return date.toISOString();
166 |   } 
167 |   
168 |   const event = {
169 |     start: {dateTime: getDateAndHours(9,00)},
170 |     end: {dateTime: getDateAndHours(17,00)},
171 |     eventType: 'outOfOffice',
172 |     summary: 'Out of office',
173 |     outOfOfficeProperties: {
174 |       autoDeclineMode: 'declineOnlyNewConflictingInvitations',
175 |       declineMessage: 'Declined because I am taking a day of.',
176 |     }
177 |   }
178 |   Calendar.Events.insert(event, 'primary');
179 | }
180 | 
181 | /**
182 |  * Declines all meetings for the day.
183 |  */
184 | function cancelMeetings() {
185 |   const events = CalendarApp.getEventsForDay(new Date());
186 | 
187 |   events.forEach(function(event) {
188 |     if (event.getGuestList().length > 0) {
189 |       event.setMyStatus(CalendarApp.GuestStatus.NO);
190 |     }
191 |   });
192 | }
193 | 
194 | /**
195 |  * Turns on the user's vacation response for today in Gmail.
196 |  */
197 | function turnOnAutoResponder() {
198 |   const ONE_DAY_MILLIS = 24 * 60 * 60 * 1000;
199 |   const currentTime = (new Date()).getTime();
200 |   Gmail.Users.Settings.updateVacation({
201 |     enableAutoReply: true,
202 |     responseSubject: 'I am out of the office today',
203 |     responseBodyHtml: 'I am out of the office today; will be back on the next business day.<br><br><i>Created by OOO Chat app!</i>',
204 |     restrictToContacts: true,
205 |     restrictToDomain: true,
206 |     startTime: currentTime,
207 |     endTime: currentTime + ONE_DAY_MILLIS
208 |   }, 'me');
209 | }
210 | 
211 | function createResponseCard(responseText) {
212 |   return {
213 |     "cardsV2": [
214 |       {
215 |         "cardId": "1",
216 |         "card": {
217 |           "sections": [
218 |             {
219 |               "widgets": [
220 |                 {
221 |                   "decoratedText": {
222 |                     "topLabel": "",
223 |                     "text": responseText,
224 |                     "startIcon": {
225 |                       "knownIcon": "NONE",
226 |                       "altText": "Task done",
227 |                       "iconUrl": "https://fonts.gstatic.com/s/i/short-term/web/system/1x/task_alt_gm_grey_48dp.png"
228 |                     },
229 |                     "wrapText": true
230 |                   }
231 |                 }
232 |               ]
233 |             }
234 |           ],
235 |           "header": {
236 |             "title": "OOO app",
237 |             "subtitle": "Helping you manage your OOO",
238 |             "imageUrl": "https://goo.gle/3SfMkjb",
239 |             "imageType": "CIRCLE"
240 |           }
241 |         }
242 |       }
243 |     ]
244 |   }
245 | }
246 | 
247 | 


--------------------------------------------------------------------------------
/solutions/ooo-chat-app/README.md:
--------------------------------------------------------------------------------
1 | # OOO Chat App
2 | 
3 | Sample code for a custom Google Chat app that manages your out of office tasks.
4 | 
5 | Learn more about [Chat apps](https://developers.google.com/chat).
6 | 


--------------------------------------------------------------------------------
/solutions/schedule-meetings/Code.js:
--------------------------------------------------------------------------------
  1 | // To learn how to use this script, refer to the documentation:
  2 | // https://developers.google.com/apps-script/samples/chat-apps/schedule-meetings
  3 | 
  4 | /*
  5 | Copyright 2022 Google LLC
  6 | 
  7 | Licensed under the Apache License, Version 2.0 (the "License");
  8 | you may not use this file except in compliance with the License.
  9 | You may obtain a copy of the License at
 10 | 
 11 |     https://www.apache.org/licenses/LICENSE-2.0
 12 | 
 13 | Unless required by applicable law or agreed to in writing, software
 14 | distributed under the License is distributed on an "AS IS" BASIS,
 15 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 16 | See the License for the specific language governing permissions and
 17 | limitations under the License.
 18 | */
 19 | 
 20 | // Application constants
 21 | const APPNAME = 'Chat Meeting Scheduler';
 22 | const SLASHCOMMAND = {
 23 |   HELP: 1, // /help
 24 |   DIALOG: 2, // /schedule_Meeting
 25 | };
 26 | 
 27 | /**
 28 |  * Responds to an ADDED_TO_SPACE event in Google Chat.
 29 |  * Called when the Chat app is added to a space. The Chat app can either be directly added to the space
 30 |  * or added by a @mention. If the Chat app is added by a @mention, the event object includes a message property. 
 31 |  * Returns a Message object, which is usually a welcome message informing users about the Chat app.
 32 |  *
 33 |  * @param {Object} event The event object from Google Chat
 34 |  */
 35 | function onAddToSpace(event) {
 36 |   let message = '';
 37 | 
 38 |   // Personalizes the message depending on how the Chat app is called.
 39 |   if (event.space.singleUserBotDm) {
 40 |     message = `Hi ${event.user.displayName}!`;
 41 |   } else {
 42 |     const spaceName = event.space.displayName ? event.space.displayName : "this chat";
 43 |     message = `Hi! Thank you for adding me to ${spaceName}`;
 44 |   }
 45 | 
 46 |   // Lets users know what they can do and how they can get help.
 47 |   message = message + '/nI can quickly schedule a meeting for you with just a few clicks.' +
 48 |     'Try me out by typing */schedule_Meeting*. ' +
 49 |     '/nTo learn what else I can do, type */help*.'
 50 | 
 51 |   return { "text": message };
 52 | }
 53 | 
 54 | /**
 55 |  * Responds to a MESSAGE event triggered in Chat.
 56 |  * Called when the Chat app is already in the space and the user invokes it via @mention or / command.
 57 |  * Returns a message object containing the Chat app's response. For this Chat app, the response is either the
 58 |  * help text or the dialog to schedule a meeting.
 59 |  * 
 60 |  * @param {object} event The event object from Google Chat
 61 |  * @return {object} JSON-formatted response as text or Card message
 62 |  */
 63 | function onMessage(event) {
 64 | 
 65 |   // Handles regular onMessage logic.
 66 |   // Evaluates if and handles for all slash commands.
 67 |   if (event.message.slashCommand) {
 68 |     switch (event.message.slashCommand.commandId) {
 69 | 
 70 |       case SLASHCOMMAND.DIALOG: // Displays meeting dialog for /schedule_Meeting.
 71 | 
 72 |         // TODO update this with your own logic to set meeting recipients, subjects, etc (e.g. a group email).
 73 |         return getInputFormAsDialog_({
 74 |           invitee: '',
 75 |           startTime: getTopOfHourDateString_(),
 76 |           duration: 30,
 77 |           subject: 'Status Stand-up',
 78 |           body: 'Scheduling a quick status stand-up meeting.'
 79 |         });
 80 | 
 81 |       case SLASHCOMMAND.HELP: // Responds with help text for /help.
 82 |         return getHelpTextResponse_();
 83 | 
 84 |       /* TODO Add other use cases here. E.g:
 85 |       case SLASHCOMMAND.NEW_FEATURE:  // Your Feature Here
 86 |         getDialogForAddContact(message);
 87 |       */
 88 | 
 89 |     }
 90 |   }
 91 |   else {
 92 |     // Returns text if users didn't invoke a slash command.
 93 |     return { text: 'No action taken - use Slash Commands.' }
 94 |   }
 95 | }
 96 | 
 97 | /**
 98 |  * Responds to a CARD_CLICKED event triggered in Chat.
 99 |  * @param {object} event the event object from Chat
100 |  * @return {object} JSON-formatted response
101 |  * @see https://developers.google.com/chat/api/guides/message-formats/events
102 |  */
103 | function onCardClick(event) {
104 |   if (event.action.actionMethodName === 'handleFormSubmit') {
105 |     const recipients = getFieldValue_(event.common.formInputs, 'email');
106 |     const subject = getFieldValue_(event.common.formInputs, 'subject');
107 |     const body = getFieldValue_(event.common.formInputs, 'body');
108 | 
109 |     // Assumes dialog card inputs for date and times are in the correct format. mm/dd/yyy HH:MM
110 |     const dateTimeInput = getFieldValue_(event.common.formInputs, 'date');
111 |     const startTime = getStartTimeAsDateObject_(dateTimeInput);
112 |     const duration = Number(getFieldValue_(event.common.formInputs, 'duration'));
113 | 
114 |     // Handles instances of missing or invalid input parameters.
115 |     const errors = [];
116 | 
117 |     if (!recipients) {
118 |       errors.push('Missing or invalid recipient email address.');
119 |     }
120 |     if (!subject) {
121 |       errors.push('Missing subject line.');
122 |     }
123 |     if (!body) {
124 |       errors.push('Missing event description.');
125 |     }
126 |     if (!startTime) {
127 |       errors.push('Missing or invalid start time.');
128 |     }
129 |     if (!duration || isNaN(duration)) {
130 |       errors.push('Missing or invalid duration');
131 |     }
132 |     if (errors.length) {
133 |       // Redisplays the form if missing or invalid inputs exist.
134 |       return getInputFormAsDialog_({
135 |         errors,
136 |         invitee: recipients,
137 |         startTime: dateTimeInput,
138 |         duration,
139 |         subject,
140 |         body
141 |       });
142 |     }
143 | 
144 |     //  Calculates the end time via duration.
145 |     const endTime = new Date(startTime.valueOf());
146 |     endTime.setMinutes(endTime.getMinutes() + duration);
147 | 
148 |     // Creates calendar event with notification.
149 |     const calendar = CalendarApp.getDefaultCalendar()
150 |     const scheduledEvent = calendar.createEvent(subject,
151 |       startTime,
152 |       endTime,
153 |       {
154 |         guests: recipients,
155 |         sendInvites: true,
156 |         description: body + '\nThis meeting scheduled by a Google Chat App!'
157 |       });
158 | 
159 |     // Gets a link to the Calendar event.
160 |     const url = getCalendarEventURL_(scheduledEvent, calendar)
161 |         
162 |     return getConfirmationDialog_(url);
163 | 
164 |   } else if (event.action.actionMethodName === 'closeDialog') {
165 | 
166 |     // Returns this dialog as success.
167 |     return {
168 |       actionResponse: {
169 |         type: 'DIALOG',
170 |         dialog_action: {
171 |           actionStatus: 'OK'
172 |         }
173 |       }
174 |     }
175 |   }
176 | }
177 | 
178 | /**
179 |  * Responds with help text about this Chat app.
180 |  * @return {string} The help text as seen below
181 |  */
182 | function getHelpTextResponse_() {
183 |   const help = `*${APPNAME}* lets you quickly create meetings from Google Chat. Here\'s a list of all its commands:
184 |   \`/schedule_Meeting\`  Opens a dialog with editable, preset parameters to create a meeting event
185 |   \`/help\`  Displays this help message
186 |   
187 |   Learn more about creating Google Chat apps at https://developers.google.com/chat.`
188 | 
189 |   return { 'text': help }
190 | }
191 | 


--------------------------------------------------------------------------------
/solutions/schedule-meetings/Dialog.js:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright 2022 Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *      http://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | 
 17 | /**
 18 | * Form input dialog as JSON.
 19 | * @return {object} JSON-formatted cards for the dialog.
 20 | */
 21 | function getInputFormAsDialog_(options) {
 22 |   const form = getForm_(options);
 23 |   return {
 24 |     'actionResponse': {
 25 |       'type': 'DIALOG',
 26 |       'dialogAction': {
 27 |         'dialog': {
 28 |           'body': form
 29 |         }
 30 |       }
 31 |     }
 32 |   };
 33 | }
 34 | 
 35 | /**
 36 | * Form JSON to collect inputs regarding the meeting.
 37 | * @return {object} JSON-formatted cards.
 38 | */
 39 | function getForm_(options) {
 40 |   const sections = [];
 41 | 
 42 |   // If errors present, display additional section with validation messages.
 43 |   if (options.errors && options.errors.length) {
 44 |     let errors = options.errors.reduce((str, err) => `${str}• ${err}<br>`, '');
 45 |     errors = `<b>Errors:</b><br><font color="#ba0000">${errors}</font>`;
 46 |     const errorSection = {
 47 |       'widgets': [
 48 |         {
 49 |           textParagraph: {
 50 |             text: errors
 51 |           }
 52 |         }
 53 |       ]
 54 |     }
 55 |     sections.push(errorSection);
 56 |   }
 57 |   let formSection = {
 58 |     'header': 'Schedule meeting and send email to invited participants',
 59 |     'widgets': [
 60 |       {
 61 |         'textInput': {
 62 |           'label': 'Event Title',
 63 |           'type': 'SINGLE_LINE',
 64 |           'name': 'subject',
 65 |           'value': options.subject
 66 |         }
 67 |       },
 68 |       {
 69 |         'textInput': {
 70 |           'label': 'Invitee Email Address',
 71 |           'type': 'SINGLE_LINE',
 72 |           'name': 'email',
 73 |           'value': options.invitee,
 74 |           'hintText': 'Add team group email'
 75 |         }
 76 |       },
 77 |       {
 78 |         'textInput': {
 79 |           'label': 'Description',
 80 |           'type': 'MULTIPLE_LINE',
 81 |           'name': 'body',
 82 |           'value': options.body
 83 |         }
 84 |       },
 85 |       {
 86 |         'textInput': {
 87 |           'label': 'Meeting start date & time',
 88 |           'type': 'SINGLE_LINE',
 89 |           'name': 'date',
 90 |           'value': options.startTime,
 91 |           'hintText': 'mm/dd/yyyy H:MM'
 92 |         }
 93 |       },
 94 |       {
 95 |         'selectionInput': {
 96 |           'type': 'DROPDOWN',
 97 |           'label': 'Meeting Duration',
 98 |           'name': 'duration',
 99 |           'items': [
100 |             {
101 |               'text': '15 minutes',
102 |               'value': '15',
103 |               'selected': options.duration === 15
104 |             },
105 |             {
106 |               'text': '30 minutes',
107 |               'value': '30',
108 |               'selected': options.duration === 30
109 |             },
110 |             {
111 |               'text': '45 minutes',
112 |               'value': '45',
113 |               'selected': options.duration === 45
114 |             },
115 |             {
116 |               'text': '1 Hour',
117 |               'value': '60',
118 |               'selected': options.duration === 60
119 |             },
120 |             {
121 |               'text': '1.5 Hours',
122 |               'value': '90',
123 |               'selected': options.duration === 90
124 |             },
125 |             {
126 |               'text': '2 Hours',
127 |               'value': '120',
128 |               'selected': options.duration === 120
129 |             }
130 |           ]
131 |         }
132 |       }
133 |     ],
134 |     'collapsible': false
135 |   };
136 |   sections.push(formSection);
137 |   const card =  {
138 |     'sections': sections,
139 |     'name': 'Google Chat Scheduled Meeting',
140 |     'fixedFooter': {
141 |       'primaryButton': {
142 |         'text': 'Submit',
143 |         'onClick': {
144 |           'action': {
145 |             'function': 'handleFormSubmit'
146 |           }
147 |         },
148 |         'altText': 'Submit'
149 |       }
150 |     }
151 |   };
152 |   return card;
153 | }
154 | 
155 | /**
156 | * Confirmation dialog after a calendar event is created successfully.
157 | * @param {string} url The Google Calendar Event url for link button
158 | * @return {object} JSON-formatted cards for the dialog
159 | */
160 | function getConfirmationDialog_(url) {
161 |   return {
162 |     'actionResponse': {
163 |       'type': 'DIALOG',
164 |       'dialogAction': {
165 |         'dialog': {
166 |           'body': {
167 |             'sections': [
168 |               {
169 |                 'widgets': [
170 |                   {
171 |                     'textParagraph': {
172 |                       'text': 'Meeting created successfully!'
173 |                     },
174 |                     'horizontalAlignment': 'CENTER'
175 |                   },
176 |                   {
177 |                     'buttonList': {
178 |                       'buttons': [
179 |                         {
180 |                           'text': 'Open Calendar Event',
181 |                           'onClick': {
182 |                             'openLink': {
183 |                               'url': url
184 |                             }
185 |                           }
186 |                         }
187 | 
188 |                       ]
189 |                     },
190 |                     'horizontalAlignment': 'CENTER'
191 |                   }
192 |                 ]
193 |               }
194 |             ],
195 |             'fixedFooter': {
196 |               'primaryButton': {
197 |                 'text': 'OK',
198 |                 'onClick': {
199 |                   'action': {
200 |                     'function': 'closeDialog'
201 |                   }
202 |                 }
203 |               }
204 |             }
205 |           }
206 |         }
207 |       }
208 |     }
209 |   }
210 | }


--------------------------------------------------------------------------------
/solutions/schedule-meetings/README.md:
--------------------------------------------------------------------------------
1 | # Schedule meetings from Google Chat
2 | 
3 | See [developers.google.com](https://developers.google.com/apps-script/samples/chat-apps/schedule-meetings) for additional details.
4 | 
5 | 


--------------------------------------------------------------------------------
/solutions/schedule-meetings/Utilities.js:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright 2022 Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *      http://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | /**
18 | * Helper function that gets the field value from the given form input.
19 | * @return {string} 
20 | */
21 | function getFieldValue_(formInputs, fieldName) {
22 |   return formInputs[fieldName][''].stringInputs.value[0];
23 | }
24 | 
25 | // Regular expression to validate the date/time input.
26 | const DATE_TIME_PATTERN = /\d{1,2}\/\d{1,2}\/\d{4}\s+\d{1,2}:\d\d/;
27 | 
28 | /**
29 | * Casts date and time from string to Date object.
30 | * @return {date} 
31 | */
32 | function getStartTimeAsDateObject_(dateTimeStr) {
33 |   if (!dateTimeStr || !dateTimeStr.match(DATE_TIME_PATTERN)) {
34 |     return null;
35 |   }
36 | 
37 |   const parts = dateTimeStr.split(' ');
38 |   const [month, day, year] = parts[0].split('/').map(Number);
39 |   const [hour, minute] = parts[1].split(':').map(Number);
40 |   
41 |   
42 |   Session.getScriptTimeZone()
43 |   
44 |   return new Date(year, month - 1, day, hour, minute)
45 | }
46 | 
47 | /** 
48 | * Gets the current date and time for the upcoming top of the hour (e.g. 01/25/2022 18:00).
49 | * @return {string} date/time in mm/dd/yyy HH:MM format needed for use by Calendar
50 | */
51 | function getTopOfHourDateString_() {
52 |   const date = new Date();
53 |   date.setHours(date.getHours() + 1);
54 |   date.setMinutes(0, 0, 0);
55 |   // Adding the date as string might lead to an incorrect response due to time zone adjustments.
56 |   return Utilities.formatDate(date, Session.getScriptTimeZone(), 'MM/dd/yyyy H:mm');
57 | }
58 | 
59 | 
60 | /** 
61 | * Creates the URL for the Google Calendar event.
62 | *
63 | * @param {object} event The Google Calendar Event instance
64 | * @param {object} cal The associated Google Calendar 
65 | * @return {string} URL in the form of 'https://www.google.com/calendar/event?eid={event-id}'
66 | */
67 | function getCalendarEventURL_(event, cal) {
68 |   const baseCalUrl = 'https://www.google.com/calendar';
69 |   // Joins Calendar Event Id with Calendar Id, then base64 encode to derive the event URL.
70 |   let encodedId = Utilities.base64Encode(event.getId().split('@')[0] + " " + cal.getId()).replace(/\=/g, '');
71 |   encodedId = `/event?eid=${encodedId}`;
72 |   return (baseCalUrl + encodedId);
73 | 
74 | }


--------------------------------------------------------------------------------
/tasks/quickstart/quickstart.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | // [START tasks_quickstart]
17 | /**
18 |  * Lists the user's tasks.
19 |  * @see https://developers.google.com/tasks/reference/rest/v1/tasklists/list
20 |  */
21 | function listTaskLists() {
22 |   const optionalArgs = {
23 |     maxResults: 10
24 |   };
25 |   try {
26 |     // Returns all the authenticated user's task lists.
27 |     const response = Tasks.Tasklists.list(optionalArgs);
28 |     const taskLists = response.items;
29 |     // Print task list of user if available.
30 |     if (!taskLists || taskLists.length === 0) {
31 |       console.log('No task lists found.');
32 |       return;
33 |     }
34 |     for (const taskList of taskLists) {
35 |       console.log('%s (%s)', taskList.title, taskList.id);
36 |     }
37 |   } catch (err) {
38 |     // TODO (developer) - Handle exception from Task API
39 |     console.log('Failed with error %s', err.message);
40 |   }
41 | }
42 | // [END tasks_quickstart]
43 | 


--------------------------------------------------------------------------------
/tasks/simpleTasks/README.md:
--------------------------------------------------------------------------------
 1 | # Simple Tasks
 2 | 
 3 | Simple Tasks is a sample web app built using Apps Script that provides limited
 4 | read and write access to your data in
 5 | [Google Tasks](https://mail.google.com/tasks/canvas). It was created using the
 6 | [HTML Service](https://developers.google.com/apps-script/guides/html-service)
 7 | and demonstrates some common patterns and best practices to use when developing
 8 | user interfaces.
 9 | 
10 | ![Simple tasks screenshot](screenshot.png)
11 | 
12 | ## Try it out
13 | 
14 | For your convience we have a
15 | [deployed instance](https://script.google.com/macros/s/AKfycbx-sB0Lp8JVgfvVoXkFtLsxMzqvOdfjG7VDo8OAeLusUDkFLj8/exec)
16 | of the script already running. The application supports reading your task lists
17 | and tasks, marking tasks as complete or incomplete, and adding new tasks to a
18 | task list.
19 | 
20 | ## Setup
21 | 
22 | The first step is to create your script and copy in the code. The simplest way
23 | to do this is to
24 | [make a copy](https://script.google.com/d/1HCsbqH8WNEKFwRZCw8KEhykCGEzfXi-1k5eN-7t8lZoEAAvfqzOOsKtu/edit?newcopy=true)
25 | of the deployed instance of the script. If you wish to create your project from
26 | scratch, follow the steps below.
27 | 
28 | 1. Create a new standalone script in your Google Drive
29 |    ([instructions available here](https://developers.google.com/apps-script/managing_projects#creatingDrive))
30 |    and add in each of the files in this directory. You should already  have a
31 |    file named Code.gs in your project, and you can replace its contents with
32 |    the new code. For the remaining files, ensure you select
33 |    **File > New > HTML file** when creating the files, and when entering the
34 |    filename omit the `.html` suffix as it will be added automatically.
35 | 
36 | 2. Enabled the Google Tasks API on the script
37 |    ([instructions available here](https://developers.google.com/apps-script/built_in_services#advanced_google_services)).
38 | 3. Save a new version of your script and publish it as a web app that runs as
39 |    the **User acessing the web app**.
40 |    ([instructions available here](https://developers.google.com/apps-script/execution_web_apps)).
41 | 


--------------------------------------------------------------------------------
/tasks/simpleTasks/simpleTasks.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | /**
18 |  * Special function that handles HTTP GET requests to the published web app.
19 |  * @return {HtmlOutput} The HTML page to be served.
20 |  */
21 | function doGet() {
22 |   return HtmlService.createTemplateFromFile('page').evaluate()
23 |       .setTitle('Simple Tasks');
24 | }
25 | 
26 | /**
27 |  * Returns the ID and name of every task list in the user's account.
28 |  * @return {Array.<Object>} The task list data.
29 |  */
30 | function getTaskLists() {
31 |   var taskLists = Tasks.Tasklists.list().getItems();
32 |   if (!taskLists) {
33 |     return [];
34 |   }
35 |   return taskLists.map(function(taskList) {
36 |     return {
37 |       id: taskList.getId(),
38 |       name: taskList.getTitle()
39 |     };
40 |   });
41 | }
42 | 
43 | /**
44 |  * Returns information about the tasks within a given task list.
45 |  * @param {String} taskListId The ID of the task list.
46 |  * @return {Array.<Object>} The task data.
47 |  */
48 | function getTasks(taskListId) {
49 |   var tasks = Tasks.Tasks.list(taskListId).getItems();
50 |   if (!tasks) {
51 |     return [];
52 |   }
53 |   return tasks.map(function(task) {
54 |     return {
55 |       id: task.getId(),
56 |       title: task.getTitle(),
57 |       notes: task.getNotes(),
58 |       completed: Boolean(task.getCompleted())
59 |     };
60 |   }).filter(function(task) {
61 |     return task.title;
62 |   });
63 | }
64 | 
65 | /**
66 |  * Sets the completed status of a given task.
67 |  * @param {String} taskListId The ID of the task list.
68 |  * @param {String} taskId The ID of the task.
69 |  * @param {Boolean} completed True if the task should be marked as complete, false otherwise.
70 |  */
71 | function setCompleted(taskListId, taskId, completed) {
72 |   var task = Tasks.newTask();
73 |   if (completed) {
74 |     task.setStatus('completed');
75 |   } else {
76 |     task.setStatus('needsAction');
77 |     task.setCompleted(null);
78 |   }
79 |   Tasks.Tasks.patch(task, taskListId, taskId);
80 | }
81 | 
82 | /**
83 |  * Adds a new task to the task list.
84 |  * @param {String} taskListId The ID of the task list.
85 |  * @param {String} title The title of the new task.
86 |  */
87 | function addTask(taskListId, title) {
88 |   var task = Tasks.newTask().setTitle(title);
89 |   Tasks.Tasks.insert(task, taskListId);
90 | }
91 | 


--------------------------------------------------------------------------------
/templates/README.md:
--------------------------------------------------------------------------------
 1 | # Templates for Google Apps Script
 2 | 
 3 | Templates that provide an initial, working framework for Apps Script
 4 | projects.
 5 | 
 6 | ## Introduction
 7 | 
 8 | Google Apps Script allows developers to extend and maniplate Google
 9 | Docs, Sheets and Forms. For those just starting with Apps Script, it
10 | can be useful to have a template to work from -- a framework that
11 | developers can learn from and modify to suit their needs.
12 | 
13 | This collection hosts the following templates:
14 | 
15 | * Custom Functions for Sheets
16 | * Google Docs Add-on
17 | * Google Sheets Add-on
18 | * Google Forms Add-on
19 | * Script as Web App
20 | 
21 | Within these templates the following Google Apps Script concepts are
22 | illustrated:
23 | 
24 | * [Dialogs and Sidebars](https://developers.google.com/apps-script/guides/dialogs)
25 | * Using [Templated HTML](https://developers.google.com/apps-script/guides/html/templates)
26 | * Responding to HTTP GET requests with doGet(e)
27 | * Using IFRAME sandbox mode
28 | 
29 | ## Getting Started
30 | 
31 | Templates can be accessed from the Apps Script editor Welcome Screen
32 | (which is shown when the editor is first opened or by clicking the
33 | "Help > Welcome screen" menu item. Selecting a template from the
34 | Welcome Screen will create a new project pre-populated with the code
35 | you need to get started.
36 | 
37 | Alternatively, the code provided in this repository can be manually copied
38 | into the Apps Script editor. Note that certain templates need to be used
39 | in a container-bound script (that is, the template is meant to be in a
40 | script attached to a Doc, Sheet or Form, rather than a standalone script).
41 | 


--------------------------------------------------------------------------------
/templates/custom-functions/Code.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | 
 17 | /**
 18 |  * @OnlyCurrentDoc Limits the script to only accessing the current spreadsheet.
 19 |  */
 20 | 
 21 | /**
 22 |  * A function that takes a single input value and returns a single value.
 23 |  * Returns a simple concatenation of Strings.
 24 |  *
 25 |  * @param {String} name A name to greet.
 26 |  * @return {String} A greeting.
 27 |  * @customfunction
 28 |  */
 29 | function SAY_HELLO(name) {
 30 |   return 'Hello ' + name;
 31 | }
 32 | 
 33 | /**
 34 |  * A function that takes an input cell or range of cells and returns a cell or
 35 |  * range of cells.
 36 |  * Returns a range with all the input values incremented by one.
 37 |  *
 38 |  * @param {Array} input The range of numbers to increment.
 39 |  * @return {Array} The incremented values.
 40 |  * @customfunction
 41 |  */
 42 | function INCREMENT(input) {
 43 |   if (input instanceof Array) {
 44 |     // Recurse to process an array.
 45 |     return input.map(INCREMENT);
 46 |   } else if (!(typeof input === 'number')) {
 47 |     throw new Error('Input contains a cell value that is not a number');
 48 |   }
 49 |   // Otherwise process as a single value.
 50 |   return input + 1;
 51 | }
 52 | 
 53 | /**
 54 |  * A function that takes an range of values and returns a single value.
 55 |  * Returns the sum the corner values in the range; for a single cell,
 56 |  * this is equal to (4 * the cell value).
 57 |  *
 58 |  * @param {Array} input The Range of numbers to sum the corners of.
 59 |  * @return {Number} The calculated sum.
 60 |  * @customfunction
 61 |  */
 62 | function CORNER_SUM(input) {
 63 |   if (!(input instanceof Array)) {
 64 |     // Handle non-range inputs by putting them in an array.
 65 |     return CORNER_SUM([[input]]); // eslint-disable-line new-cap
 66 |   }
 67 |   // Range processing here.
 68 |   var maxRowIndex = input.length - 1;
 69 |   var maxColIndex = input[0].length - 1;
 70 |   return input[0][0] + input[0][maxColIndex] +
 71 |       input[maxRowIndex][0] + input[maxRowIndex][maxColIndex];
 72 | }
 73 | 
 74 | /**
 75 |  * A function that takes a single value and returns a range of values.
 76 |  * Returns a range consisting of the first 10 powers and roots of that
 77 |  * number (with column headers).
 78 |  *
 79 |  * @param {Number} input The number to calculate from.
 80 |  * @return {Array} The first ten powers and roots of that number,
 81 |  *     with associated labels.
 82 |  * @customfunction
 83 |  */
 84 | function POWERS_AND_ROOTS(input) {
 85 |   if (input instanceof Array) {
 86 |     throw new Error('Invalid: Range input not permitted');
 87 |   }
 88 |   // Value processing and range generation here.
 89 |   var headers = ['x', input + '^x', input + '^(1/x)'];
 90 |   var result = [headers];
 91 |   for (var i = 1; i <= 10; i++) {
 92 |     result.push([i, Math.pow(input, i), Math.pow(input, 1/i)]);
 93 |   }
 94 |   return result;
 95 | }
 96 | 
 97 | /**
 98 |  * A function that takes a single input cell that is Date- or Date time-formatted.
 99 |  * Returns the day of the year represented by the provided date.
100 |  *
101 |  * @param {Date} date A Date to examine.
102 |  * @return {Number} The day of year for that date.
103 |  * @customfunction
104 |  */
105 | function GET_DAY_OF_YEAR(date) {
106 |   if (!(date instanceof Date)) {
107 |     throw new Error('Invalid: Date input required');
108 |   }
109 |   // Date processing here.
110 |   var firstOfYear = new Date(date.getFullYear(), 0, 0);
111 |   var diff = date - firstOfYear;
112 |   var oneDay = 1000 * 60 * 60 * 24;
113 |   return Math.floor(diff / oneDay);
114 | }
115 | 
116 | /**
117 |  * A function that takes a single input cell that is Duration-formatted.
118 |  * Returns the number of seconds measured by that duration.
119 |  *
120 |  * @param {Date} duration A duration to convert.
121 |  * @return {Number} Number of seconds in that duration.
122 |  * @customfunction
123 |  */
124 | function CONVERT_DURATION_TO_SECONDS(duration) {
125 |   if (!(duration instanceof Date)) {
126 |     throw new Error('Invalid: Duration input required');
127 |   }
128 | 
129 |   // Getting elapsed times from duration-formatted cells in Sheets requires
130 |   // subtracting the reference date from the cell value (while correcting for
131 |   // timezones).
132 |   var spreadsheetTimezone =
133 |       SpreadsheetApp.getActiveSpreadsheet().getSpreadsheetTimeZone();
134 |   var dateString = Utilities.formatDate(duration, spreadsheetTimezone,
135 |       'EEE, d MMM yyyy HH:mm:ss');
136 |   var date = new Date(dateString);
137 |   var epoch = new Date('Dec 30, 1899 00:00:00');
138 |   var durationInMilliseconds = date.getTime() - epoch.getTime();
139 | 
140 |   // Duration processing here.
141 |   return Math.round(durationInMilliseconds / 1000);
142 | }
143 | 


--------------------------------------------------------------------------------
/templates/custom-functions/README.md:
--------------------------------------------------------------------------------
 1 | Template: Custom Functions for Sheets
 2 | =====================================
 3 | 
 4 | This template provides a framework for creating custom functions
 5 | in Google Sheets. It shows the structure needed to define a
 6 | custom function and its autocomplete documentation, and provides
 7 | a few examples.
 8 | 
 9 | The examples provided here demonstrate:
10 | 
11 | * How to create custom functions that accept arguments of different types
12 | * How to document a custom function to generate correct autocomplete
13 |   information in Sheets
14 | 
15 | Note that this template must be added to a container-bound script
16 | attached to a Google Sheet in order to function.
17 | 
18 | 
19 | For more information, see [Custom Functions in Google Sheets](https://developers.google.com/apps-script/guides/sheets/functions).
20 | 
21 | In addition, developers of Sheets custom functions should be aware of
22 | the [known issues specific to Google Sheets](https://developers.google.com/apps-script/migration/sheets).
23 | 
24 | 


--------------------------------------------------------------------------------
/templates/docs-addon/Code.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | 
 17 | /**
 18 |  * @OnlyCurrentDoc  Limits the script to only accessing the current document.
 19 |  */
 20 | 
 21 | var DIALOG_TITLE = 'Example Dialog';
 22 | var SIDEBAR_TITLE = 'Example Sidebar';
 23 | 
 24 | /**
 25 |  * Adds a custom menu with items to show the sidebar and dialog.
 26 |  *
 27 |  * @param {Object} e The event parameter for a simple onOpen trigger.
 28 |  */
 29 | function onOpen(e) {
 30 |   DocumentApp.getUi()
 31 |       .createAddonMenu()
 32 |       .addItem('Show sidebar', 'showSidebar')
 33 |       .addItem('Show dialog', 'showDialog')
 34 |       .addToUi();
 35 | }
 36 | 
 37 | /**
 38 |  * Runs when the add-on is installed; calls onOpen() to ensure menu creation and
 39 |  * any other initializion work is done immediately.
 40 |  *
 41 |  * @param {Object} e The event parameter for a simple onInstall trigger.
 42 |  */
 43 | function onInstall(e) {
 44 |   onOpen(e);
 45 | }
 46 | 
 47 | /**
 48 |  * Opens a sidebar. The sidebar structure is described in the Sidebar.html
 49 |  * project file.
 50 |  */
 51 | function showSidebar() {
 52 |   var ui = HtmlService.createTemplateFromFile('Sidebar')
 53 |       .evaluate()
 54 |       .setTitle(SIDEBAR_TITLE);
 55 |   DocumentApp.getUi().showSidebar(ui);
 56 | }
 57 | 
 58 | /**
 59 |  * Opens a dialog. The dialog structure is described in the Dialog.html
 60 |  * project file.
 61 |  */
 62 | function showDialog() {
 63 |   var ui = HtmlService.createTemplateFromFile('Dialog')
 64 |       .evaluate()
 65 |       .setWidth(400)
 66 |       .setHeight(150);
 67 |   DocumentApp.getUi().showModalDialog(ui, DIALOG_TITLE);
 68 | }
 69 | 
 70 | /**
 71 |  * Returns the existing footer text (if any).
 72 |  *
 73 |  * @return {String} existing document footer text (as a plain string).
 74 |  */
 75 | function getFooterText() {
 76 |   // Retrieve and return the information requested by the sidebar.
 77 |   return DocumentApp.getActiveDocument().getFooter().getText();
 78 | }
 79 | 
 80 | /**
 81 |  * Replaces the current document footer with the given text.
 82 |  *
 83 |  * @param {String} footerText text collected from the client-side
 84 |  *     sidebar.
 85 |  */
 86 | function setFooterText(footerText) {
 87 |   // Use data collected from sidebar to manipulate the document.
 88 |   DocumentApp.getActiveDocument().getFooter().setText(footerText);
 89 | }
 90 | 
 91 | /**
 92 |  * Returns the document title.
 93 |  *
 94 |  * @return {String} the current document title.
 95 |  */
 96 | function getDocTitle() {
 97 |   // Retrieve and return the information requested by the dialog.
 98 |   return DocumentApp.getActiveDocument().getName();
 99 | }
100 | 
101 | /**
102 |  * Changes the document title.
103 |  *
104 |  * @param {String} title the new title to use for the document.
105 |  */
106 | function setDocTitle(title) {
107 |   // Use data collected from dialog to manipulate the document.
108 |   DocumentApp.getActiveDocument().setName(title);
109 | }
110 | 


--------------------------------------------------------------------------------
/templates/docs-addon/README.md:
--------------------------------------------------------------------------------
 1 | Template: Google Docs Add-on
 2 | ============================
 3 | 
 4 | This template provides a framework for creating a
 5 | [Google Docs add-on](https://developers.google.com/apps-script/add-ons/).
 6 | It shows the structure needed to define a UI (including
 7 | menus, a sidebar and dialog) and how to coordinate communication
 8 | between the UI client and the server where the Doc resides. This
 9 | template also covers some basic uses of Apps Script with Google
10 | Docs, including:
11 | 
12 | * Reading and writing text to and from a Google Doc
13 | * Getting and modifying basic file information, such as the file title
14 | 
15 | Note that add-ons that work with Google Docs will usually need to read
16 | and manipulate the (sometimes complex)
17 | [Doc structure](https://developers.google.com/apps-script/guides/docs#structure_of_a_document).
18 | 
19 | Finally, note that this template must be added to a container-bound
20 | script attached to a Google Doc in order to function. Developed
21 | add-ons must go through a
22 | [publishing process](https://developers.google.com/apps-script/add-ons/publish)
23 | before they can be made available publicly.
24 | 


--------------------------------------------------------------------------------
/templates/forms-addon/Code.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | 
 17 | /**
 18 |  * @OnlyCurrentDoc  Limits the script to only accessing the current form.
 19 |  */
 20 | 
 21 | var DIALOG_TITLE = 'Example Dialog';
 22 | var SIDEBAR_TITLE = 'Example Sidebar';
 23 | 
 24 | /**
 25 |  * Adds a custom menu with items to show the sidebar and dialog.
 26 |  *
 27 |  * @param {Object} e The event parameter for a simple onOpen trigger.
 28 |  */
 29 | function onOpen(e) {
 30 |   FormApp.getUi()
 31 |       .createAddonMenu()
 32 |       .addItem('Show sidebar', 'showSidebar')
 33 |       .addItem('Show dialog', 'showDialog')
 34 |       .addToUi();
 35 | }
 36 | 
 37 | /**
 38 |  * Runs when the add-on is installed; calls onOpen() to ensure menu creation and
 39 |  * any other initializion work is done immediately.
 40 |  *
 41 |  * @param {Object} e The event parameter for a simple onInstall trigger.
 42 |  */
 43 | function onInstall(e) {
 44 |   onOpen(e);
 45 | }
 46 | 
 47 | /**
 48 |  * Opens a sidebar. The sidebar structure is described in the Sidebar.html
 49 |  * project file.
 50 |  */
 51 | function showSidebar() {
 52 |   var ui = HtmlService.createTemplateFromFile('Sidebar')
 53 |       .evaluate()
 54 |       .setTitle(SIDEBAR_TITLE);
 55 |   FormApp.getUi().showSidebar(ui);
 56 | }
 57 | 
 58 | /**
 59 |  * Opens a dialog. The dialog structure is described in the Dialog.html
 60 |  * project file.
 61 |  */
 62 | function showDialog() {
 63 |   var ui = HtmlService.createTemplateFromFile('Dialog')
 64 |       .evaluate()
 65 |       .setWidth(350)
 66 |       .setHeight(180);
 67 |   FormApp.getUi().showModalDialog(ui, DIALOG_TITLE);
 68 | }
 69 | 
 70 | /**
 71 |  * Appends a new form item to the current form.
 72 |  *
 73 |  * @param {Object} itemData a collection of String data used to
 74 |  *     determine the exact form item created.
 75 |  */
 76 | function addFormItem(itemData) {
 77 |   // Use data collected from sidebar to manipulate the form.
 78 |   var form = FormApp.getActiveForm();
 79 |   switch (itemData.type) {
 80 |     case 'Date':
 81 |       form.addDateItem().setTitle(itemData.name);
 82 |       break;
 83 |     case 'Scale':
 84 |       form.addScaleItem().setTitle(itemData.name);
 85 |       break;
 86 |     case 'Text':
 87 |       form.addTextItem().setTitle(itemData.name);
 88 |       break;
 89 |   }
 90 | }
 91 | 
 92 | /**
 93 |  * Queries the form DocumentProperties to determine whether the formResponse
 94 |  * trigger is enabled or not.
 95 |  *
 96 |  * @return {Boolean} True if the form submit trigger is enabled; false
 97 |  *     otherwise.
 98 |  */
 99 | function getTriggerState() {
100 |   // Retrieve and return the information requested by the dialog.
101 |   var properties = PropertiesService.getDocumentProperties();
102 |   return properties.getProperty('triggerId') != null;
103 | }
104 | 
105 | /**
106 |  * Turns the form submit trigger on or off based on the given argument.
107 |  *
108 |  * @param {Boolean} enableTrigger whether to turn on the form submit
109 |  *     trigger or not
110 |  */
111 | function adjustFormSubmitTrigger(enableTrigger) {
112 |   // Use data collected from dialog to manipulate form.
113 | 
114 |   // Determine existing state of trigger on the server.
115 |   var form = FormApp.getActiveForm();
116 |   var properties = PropertiesService.getDocumentProperties();
117 |   var triggerId = properties.getProperty('triggerId');
118 | 
119 |   if (!enableTrigger && triggerId != null) {
120 |     // Delete the existing trigger.
121 |     var triggers = ScriptApp.getUserTriggers(form);
122 |     for (var i = 0; i < triggers.length; i++) {
123 |       if (triggers[i].getUniqueId() == triggerId) {
124 |         ScriptApp.deleteTrigger(triggers[i]);
125 |         break;
126 |       }
127 |     }
128 |     properties.deleteProperty('triggerId');
129 |   } else if (enableTrigger && triggerId == null) {
130 |     // Create a new trigger.
131 |     var trigger = ScriptApp.newTrigger('respondToFormSubmit')
132 |         .forForm(form)
133 |         .onFormSubmit()
134 |         .create();
135 |     properties.setProperty('triggerId', trigger.getUniqueId());
136 |   }
137 | }
138 | 
139 | /**
140 |  * Responds to form submit events if a form summit trigger is enabled.
141 |  * Collects some form information and sends it as an email to the form creator.
142 |  *
143 |  * @param {Object} e The event parameter created by a form
144 |  *      submission; see
145 |  *      https://developers.google.com/apps-script/understanding_events
146 |  */
147 | function respondToFormSubmit(e) {
148 |   if (MailApp.getRemainingDailyQuota() > 0) {
149 |     var form = FormApp.getActiveForm();
150 |     var message = 'There have been ' + form.getResponses().length +
151 |         ' response(s) so far. Latest Response:\n';
152 |     var itemResponses = e.response.getItemResponses();
153 |     for (var i = 0; i < itemResponses.length; i++) {
154 |       var itemTitle = itemResponses[i].getItem().getTitle();
155 |       var itemResponse = JSON.stringify(itemResponses[i].getResponse());
156 |       message += itemTitle + ': ' + itemResponse + '\n';
157 |     }
158 |     MailApp.sendEmail(
159 |         Session.getEffectiveUser().getEmail(),
160 |         'Form response received for form ' + form.getTitle(),
161 |         message,
162 |         {name: 'Forms Add-on Template'});
163 |   }
164 | }
165 | 


--------------------------------------------------------------------------------
/templates/forms-addon/README.md:
--------------------------------------------------------------------------------
 1 | Template: Google Forms Add-on
 2 | =============================
 3 | 
 4 | This template provides a framework for creating a
 5 | [Google Forms add-on](https://developers.google.com/apps-script/add-ons/).
 6 | It shows the structure needed to define a UI (including
 7 | menus, a sidebar and dialog) and how to coordinate communication
 8 | between the UI client and the server where the Form resides. This
 9 | template also covers some basic uses of Apps Script with Google
10 | Forms, including:
11 | 
12 | * Creating new form items programmatically
13 | * Setting, removing and responding to form submit triggers
14 | 
15 | Note that this template must be added to a container-bound script
16 | attached to a Google Form in order to function. Also note that
17 | developed add-ons must go through a
18 | [publishing process](https://developers.google.com/apps-script/add-ons/publish)
19 | before they can be made available publicly.
20 | 


--------------------------------------------------------------------------------
/templates/sheets-addon/Code.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | 
 17 | /**
 18 |  * @OnlyCurrentDoc  Limits the script to only accessing the current spreadsheet.
 19 |  */
 20 | 
 21 | var DIALOG_TITLE = 'Example Dialog';
 22 | var SIDEBAR_TITLE = 'Example Sidebar';
 23 | 
 24 | /**
 25 |  * Adds a custom menu with items to show the sidebar and dialog.
 26 |  *
 27 |  * @param {Object} e The event parameter for a simple onOpen trigger.
 28 |  */
 29 | function onOpen(e) {
 30 |   SpreadsheetApp.getUi()
 31 |       .createAddonMenu()
 32 |       .addItem('Show sidebar', 'showSidebar')
 33 |       .addItem('Show dialog', 'showDialog')
 34 |       .addToUi();
 35 | }
 36 | 
 37 | /**
 38 |  * Runs when the add-on is installed; calls onOpen() to ensure menu creation and
 39 |  * any other initializion work is done immediately.
 40 |  *
 41 |  * @param {Object} e The event parameter for a simple onInstall trigger.
 42 |  */
 43 | function onInstall(e) {
 44 |   onOpen(e);
 45 | }
 46 | 
 47 | /**
 48 |  * Opens a sidebar. The sidebar structure is described in the Sidebar.html
 49 |  * project file.
 50 |  */
 51 | function showSidebar() {
 52 |   var ui = HtmlService.createTemplateFromFile('Sidebar')
 53 |       .evaluate()
 54 |       .setTitle(SIDEBAR_TITLE);
 55 |   SpreadsheetApp.getUi().showSidebar(ui);
 56 | }
 57 | 
 58 | /**
 59 |  * Opens a dialog. The dialog structure is described in the Dialog.html
 60 |  * project file.
 61 |  */
 62 | function showDialog() {
 63 |   var ui = HtmlService.createTemplateFromFile('Dialog')
 64 |       .evaluate()
 65 |       .setWidth(400)
 66 |       .setHeight(190);
 67 |   SpreadsheetApp.getUi().showModalDialog(ui, DIALOG_TITLE);
 68 | }
 69 | 
 70 | /**
 71 |  * Returns the value in the active cell.
 72 |  *
 73 |  * @return {String} The value of the active cell.
 74 |  */
 75 | function getActiveValue() {
 76 |   // Retrieve and return the information requested by the sidebar.
 77 |   var cell = SpreadsheetApp.getActiveSheet().getActiveCell();
 78 |   return cell.getValue();
 79 | }
 80 | 
 81 | /**
 82 |  * Replaces the active cell value with the given value.
 83 |  *
 84 |  * @param {Number} value A reference number to replace with.
 85 |  */
 86 | function setActiveValue(value) {
 87 |   // Use data collected from sidebar to manipulate the sheet.
 88 |   var cell = SpreadsheetApp.getActiveSheet().getActiveCell();
 89 |   cell.setValue(value);
 90 | }
 91 | 
 92 | /**
 93 |  * Executes the specified action (create a new sheet, copy the active sheet, or
 94 |  * clear the current sheet).
 95 |  *
 96 |  * @param {String} action An identifier for the action to take.
 97 |  */
 98 | function modifySheets(action) {
 99 |   // Use data collected from dialog to manipulate the spreadsheet.
100 |   var ss = SpreadsheetApp.getActiveSpreadsheet();
101 |   var currentSheet = ss.getActiveSheet();
102 |   if (action == 'create') {
103 |     ss.insertSheet();
104 |   } else if (action == 'copy') {
105 |     currentSheet.copyTo(ss);
106 |   } else if (action == 'clear') {
107 |     currentSheet.clear();
108 |   }
109 | }
110 | 


--------------------------------------------------------------------------------
/templates/sheets-addon/README.md:
--------------------------------------------------------------------------------
 1 | Template: Google Sheets Add-on
 2 | ==============================
 3 | 
 4 | This template provides a framework for creating a
 5 | [Google Sheets add-on](https://developers.google.com/apps-script/add-ons/).
 6 | It shows the structure needed to define a UI (including menus, a sidebar and
 7 | dialog) and how to coordinate communication between the UI client and the server
 8 | where the Sheet resides. This template also covers some basic uses of Apps
 9 | Script with Google Sheets, including:
10 | 
11 | * Reading and writing data to a Sheet
12 | * Creating, copying and clearing a sheet
13 | 
14 | Note that add-ons that work with Google Sheets will usually need to
15 | read and manipulate the Sheet data, formatting, validation, etc. For
16 | more information, see
17 | [Extending Google Sheets](https://developers.google.com/apps-script/guides/sheets).
18 | 
19 | In addition, developers of Sheets add-ons should be aware of the
20 | [Known Issues specific to Google Sheets](https://developers.google.com/apps-script/migration/sheets).
21 | 
22 | Finally, note that this template must be added to a container-bound
23 | script attached to a Google Sheet in order to function. Developed
24 | add-ons must go through a
25 | [publishing process](https://developers.google.com/apps-script/add-ons/publish)
26 | before they can be made available publicly.
27 | 
28 | 


--------------------------------------------------------------------------------
/templates/sheets-import/APICode.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | /**
18 |  * Return an array of potential columns (identifiers to locate them in
19 |  * the data response object and the labels to use as column headers).
20 |  * @return {Array} list of potential columns.
21 |  */
22 | function getColumnOptions() {
23 |   var columns = [];
24 | 
25 |   // TODO: Replace this section, adding a column entry for each data of
26 |   // interest. id should be an identifier that can be used to locate
27 |   // the data in the data request response, and label should be the name
28 |   // to associate with that data in the UI.
29 |   columns.push({id: 'DATA_ITEM1_ID', label: 'Data Item 1 label'});
30 |   columns.push({id: 'DATA_ITEM2_ID', label: 'Data Item 2 label'});
31 |   columns.push({id: 'DATA_ITEM3_ID', label: 'Data Item 3 label'});
32 | 
33 |   return columns;
34 | }
35 | 
36 | /**
37 |  * Return a page of results from the data source as a 2D array of
38 |  * values (with columns corresponding to the columns specified). Return
39 |  * null if no data exists for the specified pageNumber.
40 |  * @param {Array} columns an array of Strings specifying the column ids
41 |  *   to include in the output.
42 |  * @param {Number} pageNumber a number indicating what page of data to
43 |  *   retrieve from the data source.
44 |  * @param {Number} pageSize a number indicating the maximum number of
45 |  *   rows to return per call.
46 |  * @param {Object} opt_settings optional object containing any additional
47 |  *   information needed to retrieve data from the data source.
48 |  * @return {object[]|null} Pages of data.
49 |  */
50 | function getDataPage(columns, pageNumber, pageSize, opt_settings) {
51 |   var data = null;
52 |   /**
53 |    * TODO: This function needs to be implemented based on the particular
54 |    * details of the data source you are extracting data from. For example,
55 |    * you might request a page of data from an API using OAuth2 credentials
56 |    * similar to this:
57 |    *
58 |    * var service = getService(); // Be sure to configure the Auth.gs code
59 |    *
60 |    * // Build the appropriate API URL based on the parameters (pageNumber,
61 |    * // pageSize, and opt_settings).
62 |    * var url = '...';
63 |    * var response = UrlFetchApp.fetch(url, {
64 |    *   headers: {
65 |    *     Authorization: 'Bearer ' + service.getAccessToken(),
66 |    *     // Include any API-required headers needed for the call
67 |    *   }
68 |    * });
69 |    *
70 |    * // Given the response, construct the appropriate data output. Return
71 |    * // null if there is no data for the specified page.
72 |    * if (noData(response)) {
73 |    *   return null;
74 |    * }
75 |    * data = [];
76 |    *
77 |    * // Iterate over each relevant data item in the API response and build
78 |    * // a data row for it containing the data specified by columns
79 |    * // (in the same column order). Add each data row to data.
80 |    *
81 |    */
82 | 
83 |    return data;
84 | }
85 | 


--------------------------------------------------------------------------------
/templates/sheets-import/Auth.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright 2015 Google Inc. All Rights Reserved.
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     http://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | /**
18 |  * Return an OAuth service object to handle authorization for a specific
19 |  * data source (such as an API resource). Makes use of the OAuth2 Apps
20 |  * Script library:
21 |  *   https://github.com/googlesamples/apps-script-oauth2
22 |  * @return {Object} a service object associated with the specified
23 |  *   resource.
24 |  */
25 | function getService() {
26 |   /* TODO: Fill in the following required parameters for your data source. */
27 |   var service = OAuth2.createService('ENTER_SERVICE_NAME_HERE')
28 |       .setAuthorizationBaseUrl('ENTER_BASE_URL_HERE')
29 |       .setTokenUrl('ENTER_TOKEN_URL_HERE')
30 |       .setClientId('ENTER_CLIENT_ID_HERE')
31 |       .setClientSecret('ENTER_CLIENT_SECRET_HERE')
32 |       .setCallbackFunction('authCallback')
33 |       .setPropertyStore(PropertiesService.getUserProperties());
34 | 
35 |   /* TODO: Do any app-specific OAuth property setting here.
36 |    * For details, see:
37 |    *   https://github.com/googlesamples/apps-script-oauth2
38 |    */
39 | 
40 |   return service;
41 | }
42 | 
43 | /**
44 |  * Example of a authorization callback function that is called after an
45 |  * authorization attempt. Presents an authorization results window upon
46 |  * completion of the API auth sequence. For additional details, see the
47 |  * OAuth2 Apps Script library:
48 |  *   https://github.com/googlesamples/apps-script-oauth2
49 |  * @param {Object} request results of API auth request.
50 |  * @return {HTML} A auth callback HTML page.
51 |  */
52 | function authCallback(request) {
53 |   var template = HtmlService.createTemplateFromFile('AuthCallbackView');
54 |   template.user = Session.getEffectiveUser().getEmail();
55 |   template.isAuthorized = false;
56 |   template.error = null;
57 |   var title;
58 |   try {
59 |     var service = getService();
60 |     var authorized = service.handleCallback(request);
61 |     template.isAuthorized = authorized;
62 |     title = authorized ? 'Access Granted' : 'Access Denied';
63 |   } catch (e) {
64 |     template.error = e;
65 |     title = 'Access Error';
66 |   }
67 |   template.title = title;
68 |   return template.evaluate()
69 |       .setTitle(title);
70 | }
71 | 
72 | /**
73 |  * Builds and returns the API authorization URL from the service object.
74 |  * @return {String} the API authorization URL.
75 |  */
76 | function getAuthorizationUrl() {
77 |   return getService().getAuthorizationUrl();
78 | }
79 | 
80 | /**
81 |  * Resets the API service, forcing re-authorization before
82 |  * additional authorization-required API calls can be made.
83 |  */
84 | function signout() {
85 |   getService().reset();
86 | }
87 | 


--------------------------------------------------------------------------------
/templates/sheets-import/Configurations.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright 2015 Google Inc. All Rights Reserved.
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     http://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | 
 17 | var REPORT_SET_KEY = 'Import.ReportSet';
 18 | var SCHEDULE_TRIGGER_ID = 'Import.scheduled.triggerId';
 19 | 
 20 | /**
 21 |  * Update type enum used when adding or deleting a report.
 22 |  */
 23 | var UPDATE_TYPE = {
 24 |   ADD: 1,
 25 |   REMOVE: 2
 26 | };
 27 | 
 28 | /**
 29 |  * Return the report configuration for the report with the given
 30 |  * ID; returns an empty Object if no such report name exists.
 31 |  * @param {String} reportId a report ID.
 32 |  * @return {Object} a report configuration corresponding to that ID,
 33 |  *   or null if no such report exists.
 34 |  */
 35 | function getReportConfig(reportId) {
 36 |   var config = getObjectFromProperties(reportId);
 37 |   if (!config) {
 38 |     return null;
 39 |   }
 40 |   // Sheet name may have been changed manually, so
 41 |   // get the current one.
 42 |   var ss = SpreadsheetApp.getActiveSpreadsheet();
 43 |   var sheet = getSheetById(ss, parseInt(config.sheetId));
 44 |   config.sheetName = !sheet ? null : sheet.getName();
 45 |   return config;
 46 | }
 47 | 
 48 | /**
 49 |  * Given a report configuration, save it.
 50 |  * @param {object} config the report configuration.
 51 |  * @param {object} the updated report configuration.
 52 |  * @return {object} The saved configuration.
 53 |  */
 54 | function saveReportConfig(config) {
 55 |   var previous = getReportConfig(config.reportId);
 56 |   if (config.reportId === 'new-report') {
 57 |     config.reportId = newReportId();
 58 |     config.lastRun = null;
 59 |     config.owner = Session.getEffectiveUser().getEmail();
 60 |   }
 61 |   saveObjectToProperties(config.reportId, config);
 62 |   updateReportSet(UPDATE_TYPE.ADD, config.reportId, config.name);
 63 |   if (previous == null) {
 64 |     return config;
 65 |   }
 66 |   return _.extend(previous, config);
 67 | }
 68 | 
 69 | /**
 70 |  * Delete the report specified by the given ID.
 71 |  * @param {String} reportId indicates the report to delete.
 72 |  */
 73 | function deleteReportConfig(reportId) {
 74 |   deleteObjectFromProperties(reportId);
 75 |   updateReportSet(UPDATE_TYPE.REMOVE, reportId);
 76 | }
 77 | 
 78 | /**
 79 |  * Returns true if the current user is allowed to edit the
 80 |  * report associated with the given config.
 81 |  * @param {Object} config a report configuration.
 82 |  * @return {boolean} True if the user can edit the report.
 83 |  */
 84 | function canEditReport(config) {
 85 |   if (!config) {
 86 |     return false;
 87 |   }
 88 |   return config.scheduled == false ||
 89 |     Session.getEffectiveUser().getEmail() == config.owner;
 90 | }
 91 | 
 92 | /**
 93 |  * Given a new report configuration, return true if it saving this report would mean the limit on
 94 |  * scheduled reports would be exceeded.
 95 |  * @param {Object} config a report configuration to be saved.
 96 |  * @return {boolean} If it saving this report would mean the limit on scheduled reports
 97 |  * would be exceeded.
 98 |  */
 99 | function isOverScheduleLimit(config) {
100 |   var previous = getReportConfig(config.reportId);
101 |   var currentUser = Session.getEffectiveUser().getEmail();
102 |   var isScheduled = config == null ? false : config.scheduled;
103 |   var wasScheduled = previous == null ? false : previous.scheduled;
104 |   return (isScheduled && wasScheduled != true &&
105 |     getScheduledReports(currentUser).length >= MAX_SCHEDULED_REPORTS);
106 | }
107 | 
108 | /**
109 |  * Return a set of all saved reports (reportIds as keys, report
110 |  * names as values).
111 |  * @return {Object}
112 |  */
113 | function getAllReports() {
114 |   var properties = PropertiesService.getDocumentProperties();
115 |   return JSON.parse(properties.getProperty(REPORT_SET_KEY));
116 | }
117 | 
118 | /**
119 |  * Get a set of report configurations that all have been marked
120 |  * for scheduled imports.
121 |  * @param {String} opt_user optional user email; if provided, returned
122 |  *   results will only include reports that user is the owner of.
123 |  * @return {Object} collection of configuration object for scheduled
124 |  *   reports.
125 |  */
126 | function getScheduledReports(opt_user) {
127 |   var scheduledReports = [];
128 |   _.keys(getAllReports()).forEach(function(reportId) {
129 |     var config = getReportConfig(reportId);
130 |     if (config && config.scheduled &&
131 |       (!opt_user || opt_user == config.owner)) {
132 |       scheduledReports.push(config);
133 |     }
134 |   });
135 |   return scheduledReports;
136 | }
137 | 
138 | /**
139 |  * Updates the current report list (adding or removing a given
140 |  * report name and id).
141 |  * @param {Number} updateType Enum: either UPDATE_TYPE.ADD or
142 |  *   UPDATE_TYPE.REMOVE.
143 |  * @param {String} reportId report to add or remove.
144 |  * @param {String} reportName report name (only needed for ADD).
145 |  */
146 | function updateReportSet(updateType, reportId, reportName) {
147 |   var properties = PropertiesService.getDocumentProperties();
148 |   var lock = LockService.getDocumentLock();
149 |   lock.waitLock(2000);
150 |   var reportSet = JSON.parse(properties.getProperty(REPORT_SET_KEY));
151 |   if (reportSet == null) {
152 |     reportSet = {};
153 |   }
154 |   if (updateType == UPDATE_TYPE.ADD) {
155 |     reportSet[reportId] = reportName;
156 |   } else if (updateType == UPDATE_TYPE.REMOVE) {
157 |     delete reportSet[reportId];
158 |   }
159 |   properties.setProperty(REPORT_SET_KEY, JSON.stringify(reportSet));
160 |   lock.releaseLock();
161 | }
162 | 
163 | /**
164 |  * Update a report configuration with a sheetId and last runtime
165 |  * information, save and return it. Include but do not save the
166 |  * sheet name.
167 |  * @param {Object} config the report configuration.
168 |  * @param {Sheet} sheet the report's sheet.
169 |  * @param {String} lastRun the datetime string indicating the last
170 |  *   time the report was run.
171 |  * @return {Object} the updated report configuration.
172 |  */
173 | function updateOnImport(config, sheet, lastRun) {
174 |   var update = {
175 |     sheetId: sheet.getSheetId().toString(),
176 |     lastRun: lastRun
177 |   };
178 |   saveObjectToProperties(config.reportId, update);
179 |   update.sheetName = sheet.getName();
180 |   return _.extend(config, update);
181 | }
182 | 
183 | /**
184 |  * Return the array of column IDs used by the given report
185 |  * configuration.
186 |  * @param {Object} config the report configuration.
187 |  * @return {Array} column ID strings.
188 |  */
189 | function getColumnIds(config) {
190 |   return _.map(config.columns, function(col) {
191 |     return col.column;
192 |   });
193 | }
194 | 
195 | /**
196 |  * Return the saved trigger ID of the scheduling trigger for this user.
197 |  * @return {string|null} the trigger ID or null if the trigger is not set.
198 |  */
199 | function getTriggerId() {
200 |   var properties = PropertiesService.getUserProperties();
201 |   return properties.getProperty(SCHEDULE_TRIGGER_ID);
202 | }
203 | 
204 | /**
205 |  * Save the trigger ID of the scheduling trigger for this user.
206 |  * @param {Trigger} trigger the trigger whose ID should be saved.
207 |  */
208 | function saveTriggerId(trigger) {
209 |   var properties = PropertiesService.getUserProperties();
210 |   properties.setProperty(SCHEDULE_TRIGGER_ID, trigger.getUniqueId());
211 | }
212 | 
213 | /**
214 |  * Remove the saved trigger ID.
215 |  */
216 | function removeTriggerId() {
217 |   var properties = PropertiesService.getUserProperties();
218 |   properties.deleteProperty(SCHEDULE_TRIGGER_ID);
219 | }
220 | 


--------------------------------------------------------------------------------
/templates/sheets-import/README.md:
--------------------------------------------------------------------------------
  1 | # Template: Importing Data to Sheets
  2 | 
  3 | This template provides a framework for creating a Sheets [add-on](https://developers.google.com/apps-script/add-ons/)
  4 | that imports data from a third-party source (such as an API).
  5 | 
  6 | It shows the basic structure needed to define a UI and how to coordinate
  7 | communication between the client, server, and third-party source.
  8 | This template also demonstrates some useful aspects of Apps Script, including:
  9 | 
 10 | * Writing data to a Google Sheet
 11 | * Using time-based triggers to establish automated sheet updates
 12 | * Using [Templated HTML](https://developers.google.com/apps-script/guides/html/templates)
 13 | * Using IFRAME sandbox mode
 14 | 
 15 | **Note**: The purpose of this template is to show a general add-on structure.
 16 | It will not run as an add-on in it's current state. To make use of this
 17 | template, you will need to fill in the sections marked **TODO** to customize
 18 | the template to a specific third-party data source.
 19 | 
 20 | ## Project manifest
 21 | The following project files are included in this template:
 22 | 
 23 | * `**APICode.gs**` - This file contains all the API-specific code for handling
 24 |   authorization, callbacks, and API calls. It will need to be modified to handle
 25 |   a specific API.
 26 | * `**Auth.gs**` - This file contains code that assists with constructing a
 27 |   OAuth2 service object using the [Apps Script OAuth2 library](https://github.com/googlesamples/apps-script-oauth2).
 28 | * `**AuthCallbackView.html**` - This file is the page that is presented to the
 29 |   user after an authorization attempt, and shows whether the authorization was
 30 |   successful.
 31 | * `**AuthorizationEmail.html**` - This file contains the HTML template of an email
 32 |   that would be sent to the user in the event that a trigger attempts to fire
 33 |   without all the required authorizations.
 34 | * `**Configurations.gs**` - This file contains code that controls the creation,
 35 |   updating and deletion of report configurations that describe what to import
 36 |   to Sheets from the third-party source. By default report configurations are
 37 |   saved to Apps Script's PropertyService, but it would be possible to adapt the
 38 |   code here to store that data elsewhere (for example, in an external database).
 39 | * `**JavaScript.html**` - This file contains the bulk of the control code for the
 40 |   sidebar UI.
 41 | * `**Server.gs**` - This file contains server-side code that responds to user
 42 |   interactions in the sidebar UI. It also sets up the add-on menu.
 43 | * `**Sidebar.html**` - This file contains the HTML structure for that defines
 44 |   the sidebar UI.
 45 | * *`*Stylesheet.html**` - This file contains all the CSS properties defined for
 46 |   the template.
 47 | * `**Utilities.gs**` - This file contains some generic functionalities to support
 48 |   the rest of the code. The functions here are not specific to this template and
 49 |   could be taken for use in other projects without modification.
 50 | * `**intercom.js.html**` - This file contains a copy of
 51 |   [intercom.js](https://github.com/diy/intercom.js),
 52 |   a cross-window message broadcast interface (intercom.js is released under an
 53 |   Apache V2.0 license).
 54 | 
 55 | ## Setup: Libraries
 56 | 
 57 | This template makes use of the following libraries, which much the added to the
 58 | Apps Script project before the template can be used:
 59 | 
 60 | * [Apps Script OAuth2 library](https://github.com/googlesamples/apps-script-oauth2)
 61 | * [Underscore](http://underscorejs.org/)
 62 | 
 63 | These libraries are already published as an Apps Script, making it easy to
 64 | include in your project. To add it to your script, do the following in the
 65 | Apps Script code editor:
 66 | 
 67 | 1. Click on the menu item "Resources > Libraries..."
 68 | 1. In the "Find a Library" text box, enter the project key
 69 | "MswhXl8fVhTFUH_Q3UOJbXvxhMjh3Sh48" and click the "Select" button.
 70 | 1. Choose the latest version in the dropdown box.
 71 | 1. Click the "Save" button.
 72 | 
 73 | This will add the [OAuth2 library](https://github.com/googlesamples/apps-script-oauth2)
 74 | to your project. Repeat the above steps with the project key
 75 | "MGwgKN2Th03tJ5OdmlzB8KPxhMjh3Sh48" to add Underscore to the project as well.
 76 | 
 77 | ## Setup: API configuration
 78 | 
 79 | This template requires app-specific configuration before it can used.
 80 | Specifically, the template will need to be informed of the authorization
 81 | details, and certain adjustments made to ensure the correct data can be
 82 | extracted from the responses.
 83 | 
 84 | In the Server.gs, APICode.gs and Auth.gs project files, there are several
 85 | comments marked as **TODO**. To configure the template, visit each of these
 86 | **TODO** sections and follow the directions found there.
 87 | 
 88 | Note that the template design assumes that the template will connect to an API
 89 | service using OAuth 2.0; however, it would be possible adapt it to connect to
 90 | a different kind of service, such as a SQL database.
 91 | 
 92 | ## Additional information
 93 | 
 94 | For more information, see:
 95 | 
 96 | * [Extending Google Sheets](https://developers.google.com/apps-script/guides/sheets)
 97 | * [Known Issues specific to Google Sheets](https://developers.google.com/apps-script/migration/sheets)
 98 | 
 99 | Note that this template must be added to a container-bound
100 | script attached to a Google Sheet in order to function. Developed
101 | add-ons must go through a
102 | [publishing process](https://developers.google.com/apps-script/add-ons/publish)
103 | before they can be made available publicly.
104 | 


--------------------------------------------------------------------------------
/templates/sheets-import/Server.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright 2015 Google Inc. All Rights Reserved.
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     http://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | 
 17 | /**
 18 |  * @OnlyCurrentDoc  Limits the script to only accessing the current spreadsheet.
 19 |  */
 20 | 
 21 | var _ = Underscore.load();
 22 | 
 23 | /**
 24 |  * TODO: Replace the following with the name of the service you are importing
 25 |  * from and the name of the add-on you are building, respectively.
 26 |  */
 27 | var DATA_ALIAS = 'MyDataSource';
 28 | var ADDON_NAME = 'YOUR_ADDON_NAME_HERE';
 29 | var SIDEBAR_TITLE = 'Import Control Center';
 30 | var MAX_SCHEDULED_REPORTS = 24;
 31 | var IMPORT_PAGE_SIZE = 30;
 32 | 
 33 | /**
 34 |  * Error code enum; this gets passed to the sidebar for use there as well.
 35 |  */
 36 | var ERROR_CODES = {
 37 |   AUTO_UPDATE_LIMIT: 1,
 38 |   ILLEGAL_EDIT: 2,
 39 |   ILLEGAL_DELETE: 3,
 40 |   IMPORT_FAILED: 4
 41 | };
 42 | 
 43 | /**
 44 |  * Adds a custom menu with items to show the sidebar.
 45 |  * @param {Object} e The event parameter for a simple onOpen trigger.
 46 |  */
 47 | function onOpen(e) {
 48 |   SpreadsheetApp.getUi()
 49 |       .createAddonMenu()
 50 |       .addItem('Import control center', 'showSidebar')
 51 |       .addToUi();
 52 | }
 53 | 
 54 | /**
 55 |  * Runs when the add-on is installed; calls onOpen() to ensure menu creation and
 56 |  * any other initializion work is done immediately.
 57 |  * @param {Object} e The event parameter for a simple onInstall trigger.
 58 |  */
 59 | function onInstall(e) {
 60 |   onOpen(e);
 61 | }
 62 | 
 63 | /**
 64 |  * Opens a sidebar. The sidebar structure is described in the Sidebar.html
 65 |  * project file.
 66 |  */
 67 | function showSidebar() {
 68 |   var service = getService();
 69 |   var template = HtmlService.createTemplateFromFile('Sidebar');
 70 |   template.user = Session.getEffectiveUser().getEmail();
 71 |   template.dataSource = DATA_ALIAS;
 72 |   template.isAuthorized = service.hasAccess();
 73 |   template.authorizationUrl = null;
 74 |   if (!template.isAuthorized) {
 75 |     template.authorizationUrl = service.getAuthorizationUrl();
 76 |   }
 77 |   var page = template.evaluate()
 78 |       .setTitle(SIDEBAR_TITLE);
 79 |   SpreadsheetApp.getUi().showSidebar(page);
 80 | }
 81 | 
 82 | /**
 83 |  * Return data needed to build the sidebar UI: a list of the names of the
 84 |  * currently saved report configurations and the list of potential
 85 |  * column choices.
 86 |  * @return {Object} a collection of saved report data and column options.
 87 |  */
 88 | function getInitialDataForSidebar() {
 89 |   var reportSet = getAllReports();
 90 |   var reportList = [];
 91 |   _.each(reportSet, function(val, key) {
 92 |     reportList.push({'name': val, 'reportId': key});
 93 |   });
 94 |   reportList.sort(function(a, b) {
 95 |     if (a.name > b.name) {
 96 |  return 1;
 97 | }
 98 |     if (a.name < b.name) {
 99 |  return -1;
100 | }
101 |     return 0;
102 |   });
103 |   return {reports: reportList, columns: getColumnOptions()};
104 | }
105 | 
106 | /**
107 |  * Get the report configuration for the given report and, if a sheet
108 |  * exists for it, activate that sheet.
109 |  * @param {String} reportId a report ID.
110 |  * @return {object} The report config.
111 |  */
112 | function switchToReport(reportId) {
113 |   var config = getReportConfig(reportId);
114 |   activateById(config.sheetId);
115 |   return config;
116 | }
117 | 
118 | /**
119 |  * Import data to the spreadsheet according to the given report
120 |  * configuration.
121 |  * @param {string} reportId the report identifier.
122 |  * @return {object} the (possibly updated) report configuration.
123 |  */
124 | function runImport(reportId) {
125 |   var ss = SpreadsheetApp.getActiveSpreadsheet();
126 |   var config = getReportConfig(reportId);
127 | 
128 |   // Acquire the sheet to place the import results in,
129 |   // then clear and format it.
130 |   // Update the saved config with sheet/time information.
131 |   var sheet = activateReportSheet(config);
132 |   var columnIds = getColumnIds(config);
133 |   var lastRun = new Date().toString();
134 |   config = updateOnImport(config, sheet, lastRun);
135 | 
136 |   // Call for pages of API information to place in the sheet, one
137 |   // page at a time.
138 |   var pageNumber = 0;
139 |   var firstRow = 2;
140 |   try {
141 |     var page;
142 |     do {
143 |       page = getDataPage(columnIds, pageNumber, IMPORT_PAGE_SIZE, config);
144 |       if (page) {
145 |         sheet.getRange(firstRow, 1, page.length, page[0].length).setValues(page);
146 |         firstRow += page.length;
147 |         pageNumber++;
148 |         SpreadsheetApp.flush();
149 |       }
150 |     } while (page != null);
151 |   } catch (e) {
152 |     // Ensure a new sheet Id, if created, is preserved.
153 |     throw ERROR_CODES.IMPORT_FAILED;
154 |   }
155 | 
156 |   for (var i = 1; i <= sheet.getLastColumn(); i++) {
157 |     sheet.autoResizeColumn(i);
158 |   }
159 |   ss.toast('Report ' + config.name + ' updated.');
160 |   return config;
161 | }
162 | 
163 | /**
164 |  * Save the given report configuration.
165 |  * @param {Object} config a report configuration to save.
166 |  * @return {Object} the updated report configuration.
167 |  */
168 | function saveReport(config) {
169 |   var existingConfig = getReportConfig(config.reportId);
170 |   if (existingConfig != null) {
171 |     activateById(existingConfig.sheetId);
172 |     // Check: users are not allowed to save edits to reports
173 |     // created by other users if those reports have been marked
174 |     // for auto-update.
175 |     if (!canEditReport(existingConfig)) {
176 |       throw ERROR_CODES.ILLEGAL_EDIT;
177 |     }
178 |   }
179 |   // Check against max number of scheduled reports.
180 |   if (isOverScheduleLimit(config)) {
181 |     throw ERROR_CODES.AUTO_UPDATE_LIMIT;
182 |   }
183 | 
184 |   var result = saveReportConfig(config);
185 |   adjustScheduleTrigger();
186 |   return result;
187 | }
188 | 
189 | /**
190 |  * Delete the given report configuration.
191 |  * @param {String} reportId indicates the report to delete.
192 |  * @return {String} the report ID deleted.
193 |  */
194 | function removeReport(reportId) {
195 |   // Check: users are not allowed to delete reports created by
196 |   // other users if those reports have been marked for auto-update.
197 |   if (!canEditReport(getReportConfig(reportId))) {
198 |     throw ERROR_CODES.ILLEGAL_DELETE;
199 |   }
200 |   deleteReportConfig(reportId);
201 |   adjustScheduleTrigger();
202 |   return reportId;
203 | }
204 | 
205 | /**
206 |  * Activate, clear, format and return the sheet associated with the
207 |  * specified report configuration. If the sheet does not exist, create,
208 |  * format and activate it.
209 |  * @param {Object} config the report configuration.
210 |  * @return {Sheet}
211 |  */
212 | function activateReportSheet(config) {
213 |   var ss = SpreadsheetApp.getActiveSpreadsheet();
214 |   var sheet = getSheetById(ss, parseInt(config.sheetId));
215 |   if (sheet == null) {
216 |     sheet = ss.insertSheet();
217 |     sheet.setName(getUniqueSheetName(ss, config.name));
218 |   }
219 |   sheet.activate();
220 | 
221 |   var headers = _.map(config.columns, function(col) {
222 |     return col.label;
223 |   });
224 |   sheet.clear();
225 |   sheet.clearNotes();
226 |   sheet.setFrozenRows(1);
227 |   sheet.getRange('1:1')
228 |     .setFontWeight('bold')
229 |     .setBackground('#000000')
230 |     .setFontColor('#ffffff');
231 |   sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
232 |   return sheet;
233 | }
234 | 
235 | /**
236 |  * On an hourly trigger, search through scheduled reports, find one
237 |  * that hasn't been run in 24 hours or more (or never), and run
238 |  * an import for that one. With <= 24 scheduled reports, this pattern
239 |  * ensures that every scheduled report will be updated once a day.
240 |  */
241 | function respondToHourlyTrigger() {
242 |   var authInfo = ScriptApp.getAuthorizationInfo(ScriptApp.AuthMode.FULL);
243 |   // Check if the actions of the trigger require authorizations that have not
244 |   // been supplied yet -- if so, warn the active user via email (if possible).
245 |   // This check is required when using triggers with add-ons to maintain
246 |   // functional triggers.
247 |   if (authInfo.getAuthorizationStatus() ==
248 |       ScriptApp.AuthorizationStatus.REQUIRED) {
249 |     // Re-authorization is required. In this case, the user needs to be alerted
250 |     // that they need to reauthorize; the normal trigger action is not
251 |     // conducted, since it authorization needs to be provided first. Send at
252 |     // most one 'Authorization Required' email a day, to avoid spamming users
253 |     // of the add-on.
254 |     sendReauthorizationRequest();
255 |   } else {
256 |     var potentials = getScheduledReports(Session.getEffectiveUser().getEmail());
257 |     for (var i = 0; i < potentials.length; i++) {
258 |       var lastRun = potentials[i].lastRun;
259 |       if (!lastRun || isOlderThanADay(lastRun) ) {
260 |         runImport(potentials[i].reportId);
261 |         return;
262 |       }
263 |     }
264 |   }
265 | }
266 | 
267 | /**
268 |  * Called when the user needs to reauthorize. Sends the user of the
269 |  * add-on an email explaining the need to reauthorize and provides
270 |  * a link for the user to do so. Capped to send at most one email
271 |  * a day to prevent spamming the users of the add-on.
272 |  */
273 | function sendReauthorizationRequest() {
274 |   var authInfo = ScriptApp.getAuthorizationInfo(ScriptApp.AuthMode.FULL);
275 |   var properties = PropertiesService.getUserProperties();
276 |   var LAST_AUTH_EMAIL_KEY = 'Import.reauth.lastAuthEmailDate';
277 |   var lastAuthEmailDate = properties.getProperty(LAST_AUTH_EMAIL_KEY);
278 |   var today = new Date().toDateString();
279 |   if (lastAuthEmailDate != today) {
280 |     if (MailApp.getRemainingDailyQuota() > 0) {
281 |       var template =
282 |           HtmlService.createTemplateFromFile('AuthorizationEmail');
283 |       template.url = authInfo.getAuthorizationUrl();
284 |       template.addonName = ADDON_NAME;
285 |       var message = template.evaluate();
286 |       MailApp.sendEmail(Session.getEffectiveUser().getEmail(),
287 |         'Add-on Authorization Required',
288 |         message.getContent(), {
289 |           name: ADDON_NAME,
290 |           htmlBody: message.getContent()
291 |       });
292 |     }
293 |     properties.setProperty(LAST_AUTH_EMAIL_KEY, today);
294 |   }
295 | }
296 | 
297 | /**
298 |  * Turn on the scheduling trigger if scheduled reports owned
299 |  * by the current user are present; turn it off otherwise.
300 |  */
301 | function adjustScheduleTrigger() {
302 |   var existingTriggerId = getTriggerId();
303 |   var user = Session.getEffectiveUser().getEmail();
304 |   var triggerNeeded = getScheduledReports(user).length > 0;
305 | 
306 |   // Create a new trigger if required; delete existing trigger
307 |   // if it is not needed.
308 |   if (triggerNeeded && existingTriggerId == null) {
309 |     var trigger = ScriptApp.newTrigger('respondToHourlyTrigger')
310 |         .timeBased()
311 |         .everyHours(1)
312 |         .create();
313 |     saveTriggerId(trigger);
314 |   } else if (!triggerNeeded && existingTriggerId != null) {
315 |     var existingTrigger = getUserTriggerById(
316 |         SpreadsheetApp.getActiveSpreadsheet(),
317 |         existingTriggerId);
318 |     if (existingTrigger != null) {
319 |       ScriptApp.deleteTrigger(existingTrigger);
320 |     }
321 |     removeTriggerId();
322 |   }
323 | }
324 | 


--------------------------------------------------------------------------------
/templates/sheets-import/Utilities.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright 2015 Google Inc. All Rights Reserved.
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     http://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | 
 17 | /**
 18 |  * Includes the given project HTML file in the current HTML project file.
 19 |  * Also used to include JavaScript.
 20 |  * @param {string} filename Project file name.
 21 |  * @return {string} The content of the rendered HTML.
 22 |  */
 23 | function include(filename) {
 24 |   return HtmlService.createHtmlOutputFromFile(filename).getContent();
 25 | }
 26 | 
 27 | /**
 28 |  * Returns true if the given date string represents a date that is
 29 |  * more than 24 hours in the past; returns false otherwise.
 30 |  * @param {String} dateStr a date string.
 31 |  * @return {Boolean}
 32 |  */
 33 | function isOlderThanADay(dateStr) {
 34 |   var now = (new Date()).getTime();
 35 |   var then = Date.parse(dateStr);
 36 |   return (then + 24 * 60 * 60 * 1000) < now;
 37 | }
 38 | 
 39 | /**
 40 |  * Given an object and a string prefix, save every value in that object
 41 |  * to the Document properties service as a JSONified string. The property
 42 |  * key for each object key will be: prefix.<object_key>
 43 |  * @param {String} prefix a common string to label each added property.
 44 |  * @param {Object} obj a collection of key-values to save as
 45 |  *   user properties.
 46 |  */
 47 | function saveObjectToProperties(prefix, obj) {
 48 |   var properties = PropertiesService.getDocumentProperties();
 49 |   _.each(obj, function(val, key) {
 50 |       var propKey = prefix + '.' + key;
 51 |       properties.setProperty(propKey, JSON.stringify(val));
 52 |   });
 53 | }
 54 | 
 55 | /**
 56 |  * Given a string prefix, fetch from the Document properties service all
 57 |  * properties whose keys start with that prefix, and return the (JSON-parsed)
 58 |  * values in an object. The keys of the returned object will be the
 59 |  * same as the property keys with the leading "prefix." removed.
 60 |  * @param {String} prefix label of requested properties.
 61 |  * @return {Object} collection of key-value pairs taken from the
 62 |  *   properties service. Will return null if the prefix is unrecognized.
 63 |  */
 64 | function getObjectFromProperties(prefix) {
 65 |   var properties = PropertiesService.getDocumentProperties();
 66 |   var obj = {};
 67 |   _.each(properties.getProperties(), function(val, key) {
 68 |     if (key.indexOf(prefix) > -1) {
 69 |       obj[key.substr(prefix.length + 1)] = JSON.parse(val);
 70 |     }
 71 |   });
 72 |   if (_.keys(obj).length == 0) {
 73 |     return null;
 74 |   }
 75 |   return obj;
 76 | }
 77 | 
 78 | /**
 79 |  * Given a string prefix, remove from the Document properties service all
 80 |  * properties whose keys start with that prefix.
 81 |  * @param {String} prefix label of properties to remove.
 82 |  */
 83 | function deleteObjectFromProperties(prefix) {
 84 |   var properties = PropertiesService.getDocumentProperties();
 85 |   _.each(properties.getProperties(), function(val, key) {
 86 |     if (key.indexOf(prefix) > -1) {
 87 |       properties.deleteProperty(key);
 88 |     }
 89 |   });
 90 | }
 91 | 
 92 | /**
 93 |  * Generate a random alphanumeric string.
 94 |  * @return {String} report ID string.
 95 |  */
 96 | function newReportId() {
 97 |   return Math.random().toString(36).substring(2);
 98 | }
 99 | 
100 | /**
101 |  * Sheets-specific utility. Find a sheet within a spreadsheet with
102 |  * the given id. If not present, return null.
103 |  * @param {Object} ss a Spreadsheet object.
104 |  * @param {Number} sheetId a Sheet id.
105 |  * @return {Object} a Sheet object, or null if not found.
106 |  */
107 | function getSheetById(ss, sheetId) {
108 |   if (sheetId === null) {
109 |     return null;
110 |   }
111 |   var sheets = ss.getSheets();
112 |   for (var i = 0; i < sheets.length; i++) {
113 |     if (sheets[i].getSheetId() === sheetId) {
114 |       return sheets[i];
115 |     }
116 |   }
117 |   return null;
118 | }
119 | 
120 | /**
121 |  * Sheets-specific utility. Given a base title for a sheet, check
122 |  * for that it is unique in the spreadsheet. If not, find an integer
123 |  * suffix to append to it to make it unique and return. This function
124 |  * is used to avoid name collisions while adding or renaming sheets
125 |  * automatically.
126 |  * @param {Object} spreadsheet a Spreadsheet.
127 |  * @param {String} baseName the initial suggested title for a sheet.
128 |  * @return {String} a unique title for the sheet, based on the
129 |  *     given base title.
130 |  */
131 | function getUniqueSheetName(spreadsheet, baseName) {
132 |   var sheetName = baseName;
133 |   var i = 2;
134 |   while (spreadsheet.getSheetByName(sheetName) != null) {
135 |       sheetName = baseName + ' ' + i++;
136 |   }
137 |   return sheetName;
138 | }
139 | 
140 | /**
141 |  * Sheets-specific utility. Given a spreadsheet and a triggerId string,
142 |  * return the user trigger that corresponds to that ID. Returns null
143 |  * if no such trigger exists.
144 |  * @param {Spreadsheet} spreadsheet container of the user triggers.
145 |  * @param {String} triggerId trigger ID string.
146 |  * @return {Trigger} corresponding user trigger, or null if not found.
147 |  */
148 | function getUserTriggerById(spreadsheet, triggerId) {
149 |   var triggers = ScriptApp.getUserTriggers(spreadsheet);
150 |   for (var i = 0; i < triggers.length; i++) {
151 |     if (triggers[i].getUniqueId() == triggerId) {
152 |       return triggers[i];
153 |     }
154 |   }
155 |   return null;
156 | }
157 | 
158 | /**
159 |  * Sheets-specific utility. Given a String sheet id, activate that
160 |  * sheet if it exists.
161 |  * @param {String} sheetId the sheet ID.
162 |  */
163 | function activateById(sheetId) {
164 |   var ss = SpreadsheetApp.getActiveSpreadsheet();
165 |   var sheet = getSheetById(ss, parseInt(sheetId));
166 |   if (sheet != null) {
167 |     sheet.activate();
168 |   }
169 | }
170 | 


--------------------------------------------------------------------------------
/templates/standalone/helloWorld.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright 2018 Google Inc. All Rights Reserved.
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     http://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | // [START apps_script_hello_world]
17 | /**
18 |  * Creates a Google Doc and sends an email to the current user with a link to the doc.
19 |  */
20 | function createAndSendDocument() {
21 |   try {
22 |     // Create a new Google Doc named 'Hello, world!'
23 |     const doc = DocumentApp.create('Hello, world!');
24 | 
25 |     // Access the body of the document, then add a paragraph.
26 |     doc.getBody().appendParagraph('This document was created by Google Apps Script.');
27 | 
28 |     // Get the URL of the document.
29 |     const url = doc.getUrl();
30 | 
31 |     // Get the email address of the active user - that's you.
32 |     const email = Session.getActiveUser().getEmail();
33 | 
34 |     // Get the name of the document to use as an email subject line.
35 |     const subject = doc.getName();
36 | 
37 |     // Append a new string to the "url" variable to use as an email body.
38 |     const body = 'Link to your doc: ' + url;
39 | 
40 |     // Send yourself an email with a link to the document.
41 |     GmailApp.sendEmail(email, subject, body);
42 |   } catch (err) {
43 |     // TODO (developer) - Handle exception
44 |     console.log('Failed with error %s', err.message);
45 |   }
46 | }
47 | // [END apps_script_hello_world]
48 | 


--------------------------------------------------------------------------------
/templates/web-app/Code.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | /**
18 |  * Serves HTML of the application for HTTP GET requests.
19 |  * If folderId is provided as a URL parameter, the web app will list
20 |  * the contents of that folder (if permissions allow). Otherwise
21 |  * the web app will list the contents of the root folder.
22 |  *
23 |  * @param {Object} e event parameter that can contain information
24 |  *     about any URL parameters provided.
25 |  * @return {HTML} The web app's HTML.
26 |  */
27 | function doGet(e) {
28 |   var template = HtmlService.createTemplateFromFile('Index');
29 | 
30 |   // Retrieve and process any URL parameters, as necessary.
31 |   if (e.parameter.folderId) {
32 |     template.folderId = e.parameter.folderId;
33 |   } else {
34 |     template.folderId = 'root';
35 |   }
36 | 
37 |   // Build and return HTML in IFRAME sandbox mode.
38 |   return template.evaluate()
39 |       .setTitle('Web App Window Title');
40 | }
41 | 
42 | /**
43 |  * Return an array of up to 20 filenames contained in the
44 |  * folder previously specified (or the root folder by default).
45 |  *
46 |  * @param {String} folderId String ID of folder whose contents
47 |  *     are to be retrieved; if this is 'root', the
48 |  *     root folder is used.
49 |  * @return {Object} list of content filenames, along with
50 |  *     the root folder name.
51 |  */
52 | function getFolderContents(folderId) {
53 |   var topFolder;
54 |   var contents = {
55 |     children: []
56 |   };
57 | 
58 |   if (folderId == 'root') {
59 |     topFolder = DriveApp.getRootFolder();
60 |   } else {
61 |     // May throw exception if the folderId is invalid or app
62 |     // doesn't have permission to access.
63 |     topFolder = DriveApp.getFolderById(folderId);
64 |   }
65 |   contents.rootName = topFolder.getName() + '/';
66 | 
67 |   var files = topFolder.getFiles();
68 |   var numFiles = 0;
69 |   while (files.hasNext() && numFiles < 20) {
70 |     var file = files.next();
71 |     contents.children.push(file.getName());
72 |     numFiles++;
73 |   }
74 | 
75 |   return contents;
76 | }
77 | 


--------------------------------------------------------------------------------
/templates/web-app/README.md:
--------------------------------------------------------------------------------
 1 | Template: Script as Web App
 2 | ===========================
 3 | 
 4 | This template provides a framework for creating a [web app](https://developers.google.com/apps-script/guides/web).
 5 | 
 6 | It shows the basic structure needed to define a UI and how to coordinate
 7 | communication between the client and server. This template also includes some
 8 | useful aspects of Apps Script, including:
 9 | 
10 | * Using [Templated HTML](https://developers.google.com/apps-script/guides/html/templates)
11 | * Responding to HTTP GET requests with doGet(e)
12 | * Using IFRAME sandbox mode
13 | 


--------------------------------------------------------------------------------
/triggers/form/Code.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | // [START apps_script_triggers_form]
17 | /**
18 |  * Responds to a form when submitted.
19 |  * @param {event} e The Form submit event.
20 |  */
21 | function respondToFormSubmit(e) {
22 |   const addonTitle = 'My Add-on Title';
23 |   const props = PropertiesService.getDocumentProperties();
24 |   const authInfo = ScriptApp.getAuthorizationInfo(ScriptApp.AuthMode.FULL);
25 | 
26 |   // Check if the actions of the trigger requires authorization that has not
27 |   // been granted yet; if so, warn the user via email. This check is required
28 |   // when using triggers with add-ons to maintain functional triggers.
29 |   if (authInfo.getAuthorizationStatus() ===
30 |     ScriptApp.AuthorizationStatus.REQUIRED) {
31 |     // Re-authorization is required. In this case, the user needs to be alerted
32 |     // that they need to re-authorize; the normal trigger action is not
33 |     // conducted, since it requires authorization first. Send at most one
34 |     // "Authorization Required" email per day to avoid spamming users.
35 |     const lastAuthEmailDate = props.getProperty('lastAuthEmailDate');
36 |     const today = new Date().toDateString();
37 |     if (lastAuthEmailDate !== today) {
38 |       if (MailApp.getRemainingDailyQuota() > 0) {
39 |         const html = HtmlService.createTemplateFromFile('AuthorizationEmail');
40 |         html.url = authInfo.getAuthorizationUrl();
41 |         html.addonTitle = addonTitle;
42 |         const message = html.evaluate();
43 |         MailApp.sendEmail(Session.getEffectiveUser().getEmail(),
44 |             'Authorization Required',
45 |             message.getContent(), {
46 |               name: addonTitle,
47 |               htmlBody: message.getContent()
48 |             }
49 |         );
50 |       }
51 |       props.setProperty('lastAuthEmailDate', today);
52 |     }
53 |   } else {
54 |     // Authorization has been granted, so continue to respond to the trigger.
55 |     // Main trigger logic here.
56 |   }
57 | }
58 | // [END apps_script_triggers_form]
59 | 


--------------------------------------------------------------------------------
/triggers/test_triggers.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | /**
18 |  * Tests createTimeDrivenTrigger function of trigger.gs
19 |  */
20 | function itShouldCreateTimeDrivenTriggers() {
21 |   console.log('> itShouldCreateTimeDrivenTriggers');
22 |   createTimeDrivenTriggers();
23 | }
24 | 
25 | /**
26 |  * Tests createSpreadsheetOpenTrigger function of triggers.gs
27 |  */
28 | function itShouldCreateSpreadsheetOpenTrigger() {
29 |   console.log('> itShouldCreateSpreadsheetOpenTrigger');
30 |   createSpreadsheetOpenTrigger();
31 | }
32 | 
33 | /**
34 |  * Tests deleteTrigger function of triggers.gs
35 |  */
36 | function itShouldDeleteTrigger() {
37 |   console.log('> itShouldDeleteTrigger');
38 |   deleteTrigger();
39 | }
40 | 
41 | /**
42 |  * Run all the tests for triggers.gs
43 |  */
44 | function RUN_ALL_TESTS() {
45 |   itShouldCreateSpreadsheetOpenTrigger();
46 |   itShouldCreateTimeDrivenTriggers();
47 |   itShouldDeleteTrigger();
48 | }
49 | 


--------------------------------------------------------------------------------
/triggers/triggers.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the 'License');
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an 'AS IS' BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | 
 17 | // [START apps_script_triggers_onopen]
 18 | /**
 19 |  * The event handler triggered when opening the spreadsheet.
 20 |  * @param {Event} e The onOpen event.
 21 |  * @see https://developers.google.com/apps-script/guides/triggers#onopene
 22 |  */
 23 | function onOpen(e) {
 24 |   // Add a custom menu to the spreadsheet.
 25 |   SpreadsheetApp.getUi() // Or DocumentApp, SlidesApp, or FormApp.
 26 |       .createMenu('Custom Menu')
 27 |       .addItem('First item', 'menuItem1')
 28 |       .addToUi();
 29 | }
 30 | // [END apps_script_triggers_onopen]
 31 | // [START apps_script_triggers_onedit]
 32 | /**
 33 |  * The event handler triggered when editing the spreadsheet.
 34 |  * @param {Event} e The onEdit event.
 35 |  * @see https://developers.google.com/apps-script/guides/triggers#onedite
 36 |  */
 37 | function onEdit(e) {
 38 |   // Set a comment on the edited cell to indicate when it was changed.
 39 |   const range = e.range;
 40 |   range.setNote('Last modified: ' + new Date());
 41 | }
 42 | // [END apps_script_triggers_onedit]
 43 | // [START apps_script_triggers_onselectionchange]
 44 | /**
 45 |  * The event handler triggered when the selection changes in the spreadsheet.
 46 |  * @param {Event} e The onSelectionChange event.
 47 |  * @see https://developers.google.com/apps-script/guides/triggers#onselectionchangee
 48 |  */
 49 | function onSelectionChange(e) {
 50 |   // Set background to red if a single empty cell is selected.
 51 |   const range = e.range;
 52 |   if (range.getNumRows() === 1 &&
 53 |     range.getNumColumns() === 1 &&
 54 |     range.getCell(1, 1).getValue() === '') {
 55 |     range.setBackground('red');
 56 |   }
 57 | }
 58 | // [END apps_script_triggers_onselectionchange]
 59 | // [START apps_script_triggers_oninstall]
 60 | /**
 61 |  * The event handler triggered when installing the add-on.
 62 |  * @param {Event} e The onInstall event.
 63 |  * @see https://developers.google.com/apps-script/guides/triggers#oninstalle
 64 |  */
 65 | function onInstall(e) {
 66 |   onOpen(e);
 67 | }
 68 | // [END apps_script_triggers_oninstall]
 69 | // [START apps_script_triggers_time]
 70 | /**
 71 |  * Creates two time-driven triggers.
 72 |  * @see https://developers.google.com/apps-script/guides/triggers/installable#time-driven_triggers
 73 |  */
 74 | function createTimeDrivenTriggers() {
 75 |   // Trigger every 6 hours.
 76 |   ScriptApp.newTrigger('myFunction')
 77 |       .timeBased()
 78 |       .everyHours(6)
 79 |       .create();
 80 |   // Trigger every Monday at 09:00.
 81 |   ScriptApp.newTrigger('myFunction')
 82 |       .timeBased()
 83 |       .onWeekDay(ScriptApp.WeekDay.MONDAY)
 84 |       .atHour(9)
 85 |       .create();
 86 | }
 87 | // [END apps_script_triggers_time]
 88 | // [START apps_script_triggers_open]
 89 | /**
 90 |  * Creates a trigger for when a spreadsheet opens.
 91 |  * @see https://developers.google.com/apps-script/guides/triggers/installable
 92 |  */
 93 | function createSpreadsheetOpenTrigger() {
 94 |   const ss = SpreadsheetApp.getActive();
 95 |   ScriptApp.newTrigger('myFunction')
 96 |       .forSpreadsheet(ss)
 97 |       .onOpen()
 98 |       .create();
 99 | }
100 | // [END apps_script_triggers_open]
101 | // [START apps_script_triggers_delete]
102 | /**
103 |  * Deletes a trigger.
104 |  * @param {string} triggerId The Trigger ID.
105 |  * @see https://developers.google.com/apps-script/guides/triggers/installable
106 |  */
107 | function deleteTrigger(triggerId) {
108 |   // Loop over all triggers.
109 |   const allTriggers = ScriptApp.getProjectTriggers();
110 |   for (let index = 0; index < allTriggers.length; index++) {
111 |     // If the current trigger is the correct one, delete it.
112 |     if (allTriggers[index].getUniqueId() === triggerId) {
113 |       ScriptApp.deleteTrigger(allTriggers[index]);
114 |       break;
115 |     }
116 |   }
117 | }
118 | // [END apps_script_triggers_delete]
119 | 


--------------------------------------------------------------------------------
/ui/communication/basic/code.gs:
--------------------------------------------------------------------------------
1 | function doGet() {
2 |   return HtmlService.createHtmlOutputFromFile('Index');
3 | }
4 | 
5 | function doSomething() {
6 |   console.log('I was called!');
7 | }
8 | 


--------------------------------------------------------------------------------
/ui/communication/failure/code.gs:
--------------------------------------------------------------------------------
1 | function doGet() {
2 |   return HtmlService.createHtmlOutputFromFile('Index');
3 | }
4 | 
5 | function getUnreadEmails() {
6 |   // 'got' instead of 'get' will throw an error.
7 |   return GmailApp.gotInboxUnreadCount();
8 | }


--------------------------------------------------------------------------------
/ui/communication/private/code.gs:
--------------------------------------------------------------------------------
 1 | function doGet() {
 2 |   return HtmlService.createHtmlOutputFromFile('Index');
 3 | }
 4 | 
 5 | function getBankBalance() {
 6 |   var email = Session.getActiveUser().getEmail()
 7 |   return deepSecret_(email);
 8 | }
 9 | 
10 | function deepSecret_(email) {
11 |  // Do some secret calculations
12 |  return email + ' has $1,000,000 in the bank.';
13 | }


--------------------------------------------------------------------------------
/ui/communication/runner.gs:
--------------------------------------------------------------------------------
1 | var myRunner = google.script.run.withFailureHandler(onFailure);
2 | var myRunner1 = myRunner.withSuccessHandler(onSuccess);
3 | var myRunner2 = myRunner.withSuccessHandler(onDifferentSuccess);
4 | 
5 | myRunner1.doSomething();
6 | myRunner1.doSomethingElse();
7 | myRunner2.doSomething();
8 | 


--------------------------------------------------------------------------------
/ui/communication/success/code.gs:
--------------------------------------------------------------------------------
1 | function doGet() {
2 |   return HtmlService.createHtmlOutputFromFile('Index');
3 | }
4 | 
5 | function getUnreadEmails() {
6 |   return GmailApp.getInboxUnreadCount();
7 | }


--------------------------------------------------------------------------------
/ui/dialogs/dialogs.gs:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     https://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | 
 17 | // [START apps_script_alert_dialogs]
 18 | /**
 19 |  * Creates a custom menu when a user opens a Spreadsheet.
 20 |  */
 21 | function onOpen() {
 22 |   SpreadsheetApp.getUi() // Or DocumentApp or SlidesApp or FormApp.
 23 |     .createMenu('Custom Menu')
 24 |     .addItem('Show alert', 'showAlert')
 25 |     .addToUi();
 26 | }
 27 | 
 28 | /**
 29 |  * Shows an alert dialog.
 30 |  */
 31 | function showAlert() {
 32 |   var ui = SpreadsheetApp.getUi(); // Same variations.
 33 | 
 34 |   var result = ui.alert(
 35 |     'Please confirm',
 36 |     'Are you sure you want to continue?',
 37 |     ui.ButtonSet.YES_NO);
 38 | 
 39 |   // Process the user's response.
 40 |   if (result === ui.Button.YES) {
 41 |     // User clicked "Yes".
 42 |     ui.alert('Confirmation received.');
 43 |   } else {
 44 |     // User clicked "No" or X in the title bar.
 45 |     ui.alert('Permission denied.');
 46 |   }
 47 | }
 48 | // [END apps_script_alert_dialogs]
 49 | 
 50 | // [START apps_script_prompt_dialog]
 51 | /**
 52 |  * Creates a custom menu when a user opens a Spreadsheet.
 53 |  */
 54 | function onOpen() {
 55 |   SpreadsheetApp.getUi() // Or DocumentApp or SlidesApp or FormApp.
 56 |     .createMenu('Custom Menu')
 57 |     .addItem('Show prompt', 'showPrompt')
 58 |     .addToUi();
 59 | }
 60 | 
 61 | /**
 62 |  * Shows a prompt dialog.
 63 |  */
 64 | function showPrompt() {
 65 |   var ui = SpreadsheetApp.getUi(); // Same variations.
 66 | 
 67 |   var result = ui.prompt(
 68 |     'Let\'s get to know each other!',
 69 |     'Please enter your name:',
 70 |     ui.ButtonSet.OK_CANCEL);
 71 | 
 72 |   // Process the user's response.
 73 |   var button = result.getSelectedButton();
 74 |   var text = result.getResponseText();
 75 |   if (button === ui.Button.OK) {
 76 |     // User clicked "OK".
 77 |     ui.alert('Your name is ' + text + '.');
 78 |   } else if (button === ui.Button.CANCEL) {
 79 |     // User clicked "Cancel".
 80 |     ui.alert('I didn\'t get your name.');
 81 |   } else if (button === ui.Button.CLOSE) {
 82 |     // User clicked X in the title bar.
 83 |     ui.alert('You closed the dialog.');
 84 |   }
 85 | }
 86 | // [END apps_script_prompt_dialog]
 87 | 
 88 | // [START apps_script_custom_dialog]
 89 | /**
 90 |  * Creates a custom menu when a user opens a Spreadsheet.
 91 |  */
 92 | function onOpen() {
 93 |   SpreadsheetApp.getUi() // Or DocumentApp or SlidesApp or FormApp.
 94 |     .createMenu('Custom Menu')
 95 |     .addItem('Show dialog', 'showDialog')
 96 |     .addToUi();
 97 | }
 98 | 
 99 | /**
100 |  * Shows a custom dialog.
101 |  */
102 | function showDialog() {
103 |   var html = HtmlService.createHtmlOutputFromFile('Page')
104 |     .setWidth(400)
105 |     .setHeight(300);
106 |   SpreadsheetApp.getUi() // Or DocumentApp or SlidesApp or FormApp.
107 |     .showModalDialog(html, 'My custom dialog');
108 | }
109 | // [END apps_script_custom_dialog]
110 | 
111 | // [START apps_script_custom_sidebar]
112 | /**
113 |  * Creates a custom sidebar when a user opens a Spreadsheet.
114 |  */
115 | function onOpen() {
116 |   SpreadsheetApp.getUi() // Or DocumentApp or SlidesApp or FormApp.
117 |     .createMenu('Custom Menu')
118 |     .addItem('Show sidebar', 'showSidebar')
119 |     .addToUi();
120 | }
121 | 
122 | /**
123 |  * Shows a custom sidebar.
124 |  */
125 | function showSidebar() {
126 |   var html = HtmlService.createHtmlOutputFromFile('Page')
127 |     .setTitle('My custom sidebar')
128 |     .setWidth(300);
129 |   SpreadsheetApp.getUi() // Or DocumentApp or SlidesApp or FormApp.
130 |     .showSidebar(html);
131 | }
132 | // [END apps_script_custom_sidebar]
133 | 


--------------------------------------------------------------------------------
/ui/dialogs/menus.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | // [START apps_script_menu]
18 | /**
19 |  * Handler for when a user opens the spreadsheet.
20 |  * Creates a custom menu.
21 |  */
22 | function onOpen() {
23 |   var ui = SpreadsheetApp.getUi();
24 |   // Or DocumentApp or FormApp.
25 |   ui.createMenu('Custom Menu')
26 |     .addItem('First item', 'menuItem1')
27 |     .addSeparator()
28 |     .addSubMenu(ui.createMenu('Sub-menu')
29 |       .addItem('Second item', 'menuItem2'))
30 |     .addToUi();
31 | }
32 | 
33 | /**
34 |  * Handler for when menu item 1 is clicked.
35 |  */
36 | function menuItem1() {
37 |   SpreadsheetApp.getUi() // Or DocumentApp or FormApp.
38 |     .alert('You clicked the first menu item!');
39 | }
40 | 
41 | /**
42 |  * Handler for when menu item 2 is clicked.
43 |  */
44 | function menuItem2() {
45 |   SpreadsheetApp.getUi() // Or DocumentApp or FormApp.
46 |     .alert('You clicked the second menu item!');
47 | }
48 | // [END apps_script_menu]
49 | 
50 | // [START apps_script_show_message_box]
51 | /**
52 |  * Shows a message box to the user.
53 |  */
54 | function showMessageBox() {
55 |   Browser.msgBox('You clicked it!');
56 | }
57 | // [END apps_script_show_message_box]
58 | 
59 | // [START apps_script_sites_link]
60 | /**
61 |  * A function that can be invoked from a Google Sites link.
62 |  */
63 | function sitesLink() {
64 |   var recipient = Session.getActiveUser().getEmail();
65 |   GmailApp.sendEmail(recipient, 'Email from your site', 'You clicked a link!');
66 | }
67 | // [END apps_script_sites_link]
68 | 


--------------------------------------------------------------------------------
/ui/forms/code.gs:
--------------------------------------------------------------------------------
1 | function doGet() {
2 |   return HtmlService.createHtmlOutputFromFile('Index');
3 | }
4 | 
5 | function processForm(formObject) {
6 |   var formBlob = formObject.myFile;
7 |   var driveFile = DriveApp.createFile(formBlob);
8 |   return driveFile.getUrl();
9 | }


--------------------------------------------------------------------------------
/ui/sidebar/code.gs:
--------------------------------------------------------------------------------
 1 | // Use this code for Google Docs, Slides, Forms, or Sheets.
 2 | function onOpen() {
 3 |   SpreadsheetApp.getUi() // Or DocumentApp or SlidesApp or FormApp.
 4 |       .createMenu('Dialog')
 5 |       .addItem('Open', 'openDialog')
 6 |       .addToUi();
 7 | }
 8 | 
 9 | function openDialog() {
10 |   var html = HtmlService.createHtmlOutputFromFile('Index');
11 |   SpreadsheetApp.getUi() // Or DocumentApp or SlidesApp or FormApp.
12 |       .showModalDialog(html, 'Dialog title');
13 | }


--------------------------------------------------------------------------------
/ui/user/code.gs:
--------------------------------------------------------------------------------
1 | function doGet() {
2 |   return HtmlService.createHtmlOutputFromFile('Index');
3 | }
4 | 
5 | function getEmail() {
6 |   return Session.getActiveUser().getEmail();
7 | }


--------------------------------------------------------------------------------
/ui/webapp/code.gs:
--------------------------------------------------------------------------------
1 | function doGet() {
2 |   return HtmlService.createHtmlOutputFromFile('Index');
3 | }


--------------------------------------------------------------------------------
/utils/logging.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | // [START apps_script_logging_execution_time]
18 | /**
19 |  * Logs the time taken to execute 'myFunction'.
20 |  */
21 | function measuringExecutionTime() {
22 |   // A simple INFO log message, using sprintf() formatting.
23 |   console.info('Timing the %s function (%d arguments)', 'myFunction', 1);
24 | 
25 |   // Log a JSON object at a DEBUG level. The log is labeled
26 |   // with the message string in the log viewer, and the JSON content
27 |   // is displayed in the expanded log structure under "jsonPayload".
28 |   const parameters = {
29 |     isValid: true,
30 |     content: 'some string',
31 |     timestamp: new Date()
32 |   };
33 |   console.log({message: 'Function Input', initialData: parameters});
34 |   const label = 'myFunction() time'; // Labels the timing log entry.
35 |   console.time(label); // Starts the timer.
36 |   try {
37 |     myFunction(parameters); // Function to time.
38 |   } catch (e) {
39 |     // Logs an ERROR message.
40 |     console.error('myFunction() yielded an error: ' + e);
41 |   }
42 |   console.timeEnd(label); // Stops the timer, logs execution duration.
43 | }
44 | // [END apps_script_logging_execution_time]
45 | 
46 | // [START apps_script_logging_sheet_information]
47 | /**
48 |  * Logs Google Sheet information.
49 |  * @param {number} rowNumber The spreadsheet row number.
50 |  * @param {string} email The email to send with the row data.
51 |  */
52 | function emailDataRow(rowNumber, email) {
53 |   console.log('Emailing data row ' + rowNumber + ' to ' + email);
54 |   try {
55 |     const sheet = SpreadsheetApp.getActiveSheet();
56 |     const data = sheet.getDataRange().getValues();
57 |     const rowData = data[rowNumber - 1].join(' ');
58 |     console.log('Row ' + rowNumber + ' data: ' + rowData);
59 |     MailApp.sendEmail(email, 'Data in row ' + rowNumber, rowData);
60 |   } catch (err) {
61 |     // TODO (developer) - Handle exception
62 |     console.log('Failed with error %s', err.message);
63 |   }
64 | }
65 | // [END apps_script_logging_sheet_information]
66 | 


--------------------------------------------------------------------------------
/utils/test_logging.gs:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     https://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | /**
18 |  * create test spreadsheets
19 |  * @return {string} spreadsheet
20 |  */
21 | function createTestSpreadsheet() {
22 |   const spreadsheet = SpreadsheetApp.create('Test Spreadsheet');
23 |   for (let i = 0; i < 3; ++i) {
24 |     spreadsheet.appendRow([1, 2, 3]);
25 |   }
26 |   return spreadsheet.getId();
27 | }
28 | 
29 | /**
30 |  * populate the created spreadsheet with values
31 |  * @param {string} spreadsheetId
32 |  */
33 | function populateValues(spreadsheetId) {
34 |   const batchUpdateRequest = Sheets.newBatchUpdateSpreadsheetRequest();
35 |   const repeatCellRequest = Sheets.newRepeatCellRequest();
36 | 
37 |   const values = [];
38 |   for (let i = 0; i < 10; ++i) {
39 |     values[i] = [];
40 |     for (let j = 0; j < 10; ++j) {
41 |       values[i].push('Hello');
42 |     }
43 |   }
44 |   const range = 'A1:J10';
45 |   SpreadsheetApp.openById(spreadsheetId).getRange(range).setValues(values);
46 |   SpreadsheetApp.flush();
47 | }
48 | 
49 | /**
50 |  * Test emailDataRow of logging.gs
51 |  */
52 | function itShouldEmailDataRow() {
53 |   console.log('> itShouldEmailDataRow');
54 |   const email = Session.getActiveUser().getEmail();
55 |   const spreadsheetId = createTestSpreadsheet();
56 |   populateValues(spreadsheetId);
57 |   const data = Spreadsheet.openById();
58 |   emailDataRow(1, email);
59 | }
60 | 
61 | /**
62 |  * runs all the functions of logging.gs
63 |  */
64 | function RUN_ALL_TESTS() {
65 |   console.log('> itShouldMeasureExecutionTime');
66 |   measuringExecutionTime();
67 |   itShouldEmailDataRow();
68 | }
69 | 


--------------------------------------------------------------------------------
/wasm/README.md:
--------------------------------------------------------------------------------
 1 | # Unleashing the power of Rust, Python, and WebAssembly in Apps Script
 2 | 
 3 | This folder is the companion to the talk "Unleashing the power of Rust, Python, and WebAssembly in Apps Script" at Google Cloud Next '24.
 4 | 
 5 | ## Development
 6 | 
 7 | The development of this proof of concept requires a deep understanding of the Apps Script runtime, JavaScript bundlers, the Rust programming language, and the WebAssembly ecosystem. Please note that this is a quickly evolving space, and the tools and techniques used in this project may become outdated quickly.
 8 | 
 9 | ### Prerequisites
10 | 
11 | - Node.js - https://nodejs.org/en/download
12 | - Rust - https://www.rust-lang.org/tools/install
13 | - Binaryen (for wasm-opt) - https://github.com/WebAssembly/binaryen
14 | 
15 | 


--------------------------------------------------------------------------------
/wasm/hello-world/README.md:
--------------------------------------------------------------------------------
 1 | # Unleashing the power of Rust, Python, and WebAssembly in Apps Script
 2 | 
 3 | This folder is the companion to the talk "Unleashing the power of Rust, Python, and WebAssembly in Apps Script" at Google Cloud Next '24.
 4 | 
 5 | ## Development
 6 | 
 7 | The development of this proof of concept requires a deep understanding of the Apps Script runtime, JavaScript bundlers, the Rust programming language, and the WebAssembly ecosystem. Please note that this is a quickly evolving space, and the tools and techniques used in this project may become outdated quickly.
 8 | 
 9 | ### Prerequisites
10 | 
11 | - Node.js - https://nodejs.org/en/download
12 | - Rust - https://www.rust-lang.org/tools/install
13 | - Binaryen (for wasm-opt) - https://github.com/WebAssembly/binaryen
14 | 
15 | ### Build
16 | 
17 | 1. `npm i`
18 | 1. `npm run build`
19 | 


--------------------------------------------------------------------------------
/wasm/hello-world/build.js:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright 2024 Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     http://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | import fs from "fs";
18 | import esbuild from "esbuild";
19 | import { wasmLoader } from "esbuild-plugin-wasm";
20 | import path from "path";
21 | 
22 | const outdir = "dist";
23 | const sourceRoot = "src";
24 | 
25 | await esbuild.build({
26 |   entryPoints: ["./src/wasm.js"],
27 |   bundle: true,
28 |   outdir,
29 |   sourceRoot,
30 |   platform: "neutral",
31 |   format: "esm",
32 |   plugins: [wasmLoader({ mode: "embedded" })],
33 |   inject: ["polyfill.js"],
34 |   minify: true,
35 |   banner: { js: "// Generated code DO NOT EDIT\n" },
36 | });
37 | 
38 | const passThroughFiles = [
39 |   "main.js", 
40 |   "test.js", 
41 |   "appsscript.json",
42 | ];
43 | 
44 | await Promise.all(
45 |   passThroughFiles.map(async (file) =>
46 |     fs.promises.copyFile(
47 |       path.join(sourceRoot, file),
48 |       path.join(outdir, file)
49 |     )
50 |   )
51 | );
52 | 


--------------------------------------------------------------------------------
/wasm/hello-world/polyfill.js:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright 2024 Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     http://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | export {
18 |   TextEncoder,
19 |   TextDecoder,
20 | } from "fastestsmallesttextencoderdecoder/EncoderDecoderTogether.min.js";
21 | 


--------------------------------------------------------------------------------
/wasm/hello-world/src/main.js:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright 2024 Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     http://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | async function main() {
18 |   const name = "world";
19 |   console.log(await hello_(name));
20 | }
21 | 


--------------------------------------------------------------------------------
/wasm/hello-world/src/test.js:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright 2024 Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     http://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | async function test() {
18 |   await assert(hello_("world"), "Hello, world from Rust!");
19 | }
20 | 
21 | async function assert(a, b, message) {
22 |   const aVal = await a;
23 |   const bVal = await b;
24 | 
25 |   if (aVal !== bVal) {
26 |     throw message ?? `'${aVal}' !== '${bVal}'`;
27 |   }
28 | }
29 | 
30 | async function latency(func, iterations, argsFunc = () => []) {
31 |   const executionTimes = [];
32 | 
33 |   for (let i = 0; i < iterations; i++) {
34 |     const args = argsFunc();
35 | 
36 |     const startTime = Date.now();
37 |     let endTime;
38 | 
39 |     try {
40 |       await func(...args);
41 |       endTime = Date.now();
42 |     } catch (e) {
43 |       endTime = Infinity;
44 |       console.error(e);
45 |       continue;
46 |     }
47 | 
48 |     executionTimes.push(endTime - startTime);
49 |   }
50 | 
51 |   // Calculate statistics
52 |   const min = Math.min(...executionTimes);
53 |   const max = Math.max(...executionTimes);
54 |   const totalTime = executionTimes.reduce((sum, time) => sum + time, 0);
55 |   const average = totalTime / iterations;
56 | 
57 |   return {
58 |     min: min,
59 |     max: max,
60 |     average: average,
61 |     totalTime,
62 |     // times: executionTimes // Array of all execution times
63 |   };
64 | }
65 | 
66 | async function benchmark() {
67 |   await hello_("world"); // Warmup
68 |   
69 |   console.log(await latency(hello_, 100, () => [generateRandomString(10)]));
70 |   console.log(await latency(hello_, 100, () => [generateRandomString(100)]));
71 |   console.log(await latency(hello_, 100, () => [generateRandomString(1000)]));
72 |   console.log(await latency(hello_, 100, () => [generateRandomString(10000)]));
73 |   console.log(await latency(hello_, 100, () => [generateRandomString(100000)]));
74 |   console.log(await latency(hello_, 30, () => [generateRandomString(1000000)]));
75 | }
76 | 
77 | function generateRandomString(length = 1024) {
78 |   // Choose your desired character set
79 |   const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
80 |   const charactersLength = characters.length;
81 | 
82 |   let result = '';
83 |   for (let i = 0; i < length; i++) {
84 |     result += characters.charAt(Math.floor(Math.random() * charactersLength));
85 |   }
86 | 
87 |   return result;
88 | }


--------------------------------------------------------------------------------
/wasm/hello-world/src/wasm.js:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright 2024 Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     http://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | /**
18 |  * Wrapper function for hello
19 |  * @param {string} name
20 |  * @returns
21 |  */
22 | async function hello_(name) {
23 |   const wasm = await import("./pkg/example_bg.wasm");
24 |   const { __wbg_set_wasm, hello } = await import("./pkg/example_bg.js");
25 | 
26 |   __wbg_set_wasm(wasm);
27 | 
28 |   return hello(name);
29 | }
30 | 
31 | globalThis.hello_ = hello_;
32 | 


--------------------------------------------------------------------------------
/wasm/image-add-on/README.md:
--------------------------------------------------------------------------------
 1 | # Unleashing the power of Rust, Python, and WebAssembly in Apps Script
 2 | 
 3 | This folder is the companion to the talk "Unleashing the power of Rust, Python, and WebAssembly in Apps Script" at Google Cloud Next '24.
 4 | 
 5 | ## Development
 6 | 
 7 | The development of this proof of concept requires a deep understanding of the Apps Script runtime, JavaScript bundlers, the Rust programming language, and the WebAssembly ecosystem. Please note that this is a quickly evolving space, and the tools and techniques used in this project may become outdated quickly.
 8 | 
 9 | ### Prerequisites
10 | 
11 | - Node.js - https://nodejs.org/en/download
12 | - Rust - https://www.rust-lang.org/tools/install
13 | - Binaryen (for wasm-opt) - https://github.com/WebAssembly/binaryen
14 | 
15 | ### Build
16 | 
17 | 1. `npm i`
18 | 1. `npm run build`
19 | 


--------------------------------------------------------------------------------
/wasm/image-add-on/build.js:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright 2024 Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     http://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | import fs from "fs";
18 | import path from "path";
19 | import esbuild from "esbuild";
20 | import { wasmLoader } from "esbuild-plugin-wasm";
21 | 
22 | const outdir = "dist";
23 | const sourceRoot = "src";
24 | 
25 | await esbuild.build({
26 |   entryPoints: ["./src/wasm.js"],
27 |   bundle: true,
28 |   outdir,
29 |   sourceRoot,
30 |   platform: "neutral",
31 |   format: "esm",
32 |   plugins: [wasmLoader({ mode: "embedded" })],
33 |   inject: ["polyfill.js"],
34 |   minify: true,
35 |   banner: { js: "// Generated code DO NOT EDIT\n" },
36 | });
37 | 
38 | const passThroughFiles = ["main.js", "test.js", "appsscript.json", "add-on.js"];
39 | 
40 | await Promise.all(
41 |   passThroughFiles.map(async (file) =>
42 |     fs.promises.copyFile(path.join(sourceRoot, file), path.join(outdir, file)),
43 |   ),
44 | );
45 | 


--------------------------------------------------------------------------------
/wasm/image-add-on/polyfill.js:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright 2024 Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     http://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | export {
18 |   TextEncoder,
19 |   TextDecoder,
20 | } from "fastestsmallesttextencoderdecoder/EncoderDecoderTogether.min.js";
21 | 


--------------------------------------------------------------------------------
/wasm/image-add-on/src/add-on.js:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Copyright 2024 Google LLC
  3 |  *
  4 |  * Licensed under the Apache License, Version 2.0 (the "License");
  5 |  * you may not use this file except in compliance with the License.
  6 |  * You may obtain a copy of the License at
  7 |  *
  8 |  *     http://www.apache.org/licenses/LICENSE-2.0
  9 |  *
 10 |  * Unless required by applicable law or agreed to in writing, software
 11 |  * distributed under the License is distributed on an "AS IS" BASIS,
 12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 13 |  * See the License for the specific language governing permissions and
 14 |  * limitations under the License.
 15 |  */
 16 | 
 17 | const COLORS = {
 18 |   RED: "#EA4335",
 19 | };
 20 | 
 21 | const properties = PropertiesService.getUserProperties();
 22 | 
 23 | async function card(items) {
 24 |   const builder = CardService.newCardBuilder();
 25 | 
 26 |   const { quality, format, width, height } = loadSettings();
 27 | 
 28 |   const controls = CardService.newCardSection()
 29 |     .addWidget(
 30 |       CardService.newSelectionInput()
 31 |         .setFieldName("quality")
 32 |         .setTitle("Quality")
 33 |         .setType(CardService.SelectionInputType.RADIO_BUTTON)
 34 |         .addItem("Low", "low", quality === "low")
 35 |         .addItem("Medium", "medium", quality === "medium")
 36 |         .addItem("High", "high", quality === "high")
 37 |     )
 38 |     .addWidget(
 39 |       CardService.newTextInput()
 40 |         .setFieldName("height")
 41 |         .setTitle("Height")
 42 |         .setMultiline(false)
 43 |         .setValue(height ?? "")
 44 |     )
 45 |     .addWidget(
 46 |       CardService.newTextInput()
 47 |         .setFieldName("width")
 48 |         .setTitle("Width")
 49 |         .setMultiline(false)
 50 |         .setValue(width ?? "")
 51 |     )
 52 |     .addWidget(
 53 |       CardService.newTextButton()
 54 |         .setBackgroundColor(COLORS.RED)
 55 |         .setText("Apply Settings")
 56 |         .setOnClickAction(
 57 |           CardService.newAction()
 58 |             .setFunctionName("updateSettings")
 59 |             .setParameters({})
 60 |             .setLoadIndicator(CardService.LoadIndicator.SPINNER)
 61 |         )
 62 |     )
 63 |     .setCollapsible(true)
 64 |     .setNumUncollapsibleWidgets(0);
 65 | 
 66 |   builder.addSection(controls);
 67 | 
 68 |   const sections = await Promise.all(
 69 |     (
 70 |       items ??
 71 |       JSON.parse(
 72 |         PropertiesService.getUserProperties().getProperty("selectedItems")
 73 |       )
 74 |     )
 75 |       .filter((item) => item.mimeType.startsWith("image"))
 76 |       .map(async (item) => {
 77 |         const section = CardService.newCardSection();
 78 | 
 79 |         const bytes = DriveApp.getFileById(item.id).getBlob().getBytes();
 80 | 
 81 |         const newBytes = await compress_(bytes, {
 82 |           quality: qualityToInt(quality),
 83 |           format: item.mimeType.split("/").pop(),
 84 |           width: parseInt(width ?? "0"),
 85 |           height: parseInt(height ?? "0"),
 86 |         });
 87 | 
 88 |         const dataUrl = `data:${item.mimeType};base64,${Utilities.base64Encode(
 89 |           newBytes
 90 |         )}`;
 91 | 
 92 |         section.addWidget(CardService.newImage().setImageUrl(dataUrl));
 93 | 
 94 |         section.addWidget(
 95 |           CardService.newDecoratedText().setText(bytesToText(newBytes.length))
 96 |         );
 97 | 
 98 |         section.addWidget(
 99 |           CardService.newButtonSet()
100 |             .addButton(
101 |               CardService.newTextButton()
102 |                 .setBackgroundColor(COLORS.RED)
103 |                 .setText("Save")
104 |                 .setOnClickAction(
105 |                   CardService.newAction()
106 |                     .setFunctionName("save")
107 |                     .setParameters({
108 |                       bytes: Utilities.base64Encode(newBytes),
109 |                       action: "save",
110 |                       item: JSON.stringify(item),
111 |                     })
112 |                 )
113 |             )
114 |             .addButton(
115 |               CardService.newTextButton()
116 |                 .setBackgroundColor(COLORS.RED)
117 |                 .setText("Save Copy")
118 |                 .setOnClickAction(
119 |                   CardService.newAction()
120 |                     .setFunctionName("save")
121 |                     .setParameters({
122 |                       bytes: Utilities.base64Encode(newBytes),
123 |                       action: "save-as",
124 |                       item: JSON.stringify(item),
125 |                     })
126 |                 )
127 |             )
128 |         );
129 |         return section;
130 |       })
131 |   );
132 | 
133 |   for (const section of sections) {
134 |     builder.addSection(section);
135 |   }
136 | 
137 |   return builder;
138 | }
139 | 
140 | /**
141 |  * Build a simple card that checks selected items' quota usage. Checking
142 |  * quota usage requires user-permissions, so this add-on provides a button
143 |  * to request `drive.file` scope for items the add-on doesn't yet have
144 |  * permission to access.
145 |  *
146 |  * @param e The event object passed containing contextual information about
147 |  *    the Drive items selected.
148 |  * @return {Card}
149 |  */
150 | async function onItemsSelectedTrigger(e) {
151 |   PropertiesService.getUserProperties().setProperty(
152 |     "selectedItems",
153 |     JSON.stringify(e.drive.selectedItems)
154 |   );
155 |   return (await card(e.drive.selectedItems)).build();
156 | }
157 | 
158 | /**
159 |  * Callback function for a button action. Instructs Drive to display a
160 |  * permissions dialog to the user, requesting `drive.file` scope for a
161 |  * specific item on behalf of this add-on.
162 |  *
163 |  * @param {Object} e The parameters object that contains the item's
164 |  *   Drive ID.
165 |  * @return {DriveItemsSelectedActionResponse}
166 |  */
167 | function onRequestFileScopeButtonClicked(e) {
168 |   const idToRequest = e.parameters.id;
169 |   return CardService.newDriveItemsSelectedActionResponseBuilder()
170 |     .requestFileScope(idToRequest)
171 |     .build();
172 | }
173 | 
174 | function onFileScopeGrantedTrigger(e) {
175 |   console.info("after granting item");
176 |   console.info(e);
177 |   const builder = CardService.newCardBuilder();
178 |   return builder.build();
179 | }
180 | 
181 | function onHomePageTrigger() {
182 |   return CardService.newCardBuilder()
183 |     .setHeader(CardService.newCardHeader().setTitle("Drive Image Compress"))
184 |     .addSection(
185 |       CardService.newCardSection().addWidget(
186 |         CardService.newTextParagraph().setText(
187 |           "Select one or more files in Drive to compress the image."
188 |         )
189 |       )
190 |     )
191 |     .build();
192 | }
193 | 
194 | function bytesToText(bytes) {
195 |   const sizes = ["Bytes", "KB", "MB", "GB", "TB"];
196 |   if (bytes === 0) return "0 Byte";
197 |   const i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));
198 |   return `${Math.round(bytes / 1024 ** i)} ${sizes[i]}`;
199 | }
200 | 
201 | async function save(...args) {
202 |   console.log(args);
203 |   return CardService.newActionResponseBuilder()
204 |     .setNavigation(CardService.newNavigation().popToRoot())
205 |     .build();
206 | }
207 | 
208 | async function updateSettings(e) {
209 |   console.log({ e });
210 |   const { formInput } = e;
211 | 
212 |   persistSettings(formInput);
213 | 
214 |   return CardService.newActionResponseBuilder()
215 |     .setNavigation(
216 |       CardService.newNavigation()
217 |         .popToRoot()
218 |         .updateCard((await card()).build())
219 |     )
220 |     .build();
221 | }
222 | 
223 | function persistSettings(settings) {
224 |   properties.setProperty(
225 |     "settings",
226 |     JSON.stringify({
227 |       ...loadSettings,
228 |       ...settings,
229 |     })
230 |   );
231 | }
232 | 
233 | function loadSettings() {
234 |   const defaults = {
235 |     quality: "medium",
236 |   };
237 | 
238 |   return {
239 |     ...defaults,
240 |     ...JSON.parse(properties.getProperty("settings") ?? "{}"),
241 |   };
242 | }
243 | 
244 | function qualityToInt(quality) {
245 |   switch (quality) {
246 |     case "low":
247 |       return 50;
248 |     case "medium":
249 |       return 80;
250 |     case "high":
251 |       return 90;
252 |   }
253 | }
254 | 


--------------------------------------------------------------------------------
/wasm/image-add-on/src/main.js:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright 2024 Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     http://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | const QUALITY = 80;
18 | 
19 | async function main() {
20 |   const iterator = DriveApp.getFilesByType("image/jpeg");
21 | 
22 |   while (iterator.hasNext()) {
23 |     const file = iterator.next();
24 |     const bytes = file.getBlob().getBytes();
25 | 
26 |     const dataUrl = await compress_(bytes, QUALITY);
27 | 
28 |     if (dataUrl) {
29 |       console.log(dataUrl);
30 |     } else {
31 |       console.warn("failed to decode image");
32 |     }
33 |   }
34 | }
35 | 


--------------------------------------------------------------------------------
/wasm/image-add-on/src/test.js:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright 2024 Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     http://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | async function test() {}
18 | 
19 | async function assert(a, b, message) {
20 |   const aVal = await a;
21 |   const bVal = await b;
22 | 
23 |   if (aVal !== bVal) {
24 |     throw message ?? `'${aVal}' !== '${bVal}'`;
25 |   }
26 | }
27 | 
28 | async function latency(func, iterations, argsFunc = () => []) {
29 |   const executionTimes = [];
30 | 
31 |   for (let i = 0; i < iterations; i++) {
32 |     const args = argsFunc();
33 | 
34 |     const startTime = Date.now();
35 |     let endTime;
36 | 
37 |     try {
38 |       await func(...args);
39 |       endTime = Date.now();
40 |     } catch (e) {
41 |       endTime = Infinity;
42 |       console.error(e);
43 |       continue;
44 |     }
45 | 
46 |     executionTimes.push(endTime - startTime);
47 |   }
48 | 
49 |   // Calculate statistics
50 |   const min = Math.min(...executionTimes);
51 |   const max = Math.max(...executionTimes);
52 |   const totalTime = executionTimes.reduce((sum, time) => sum + time, 0);
53 |   const average = totalTime / iterations;
54 | 
55 |   return {
56 |     min: min,
57 |     max: max,
58 |     average: average,
59 |     totalTime,
60 |     // times: executionTimes // Array of all execution times
61 |   };
62 | }
63 | 
64 | async function benchmark() {
65 |   await hello_("world"); // Warmup
66 |   
67 |   console.log(await latency(hello_, 100, () => [generateRandomString(10)]));
68 |   console.log(await latency(hello_, 100, () => [generateRandomString(100)]));
69 |   console.log(await latency(hello_, 100, () => [generateRandomString(1000)]));
70 |   console.log(await latency(hello_, 100, () => [generateRandomString(10000)]));
71 |   console.log(await latency(hello_, 100, () => [generateRandomString(100000)]));
72 |   console.log(await latency(hello_, 30, () => [generateRandomString(1000000)]));
73 | }
74 | 
75 | function generateRandomString(length = 1024) {
76 |   // Choose your desired character set
77 |   const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
78 |   const charactersLength = characters.length;
79 | 
80 |   let result = '';
81 |   for (let i = 0; i < length; i++) {
82 |     result += characters.charAt(Math.floor(Math.random() * charactersLength));
83 |   }
84 | 
85 |   return result;
86 | }


--------------------------------------------------------------------------------
/wasm/image-add-on/src/wasm.js:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright 2024 Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     http://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | async function compress_(bytes, { quality, format, width, height }) {
18 |   const wasm = await import("./pkg/example_bg.wasm");
19 |   const { __wbg_set_wasm, compress } = await import("./pkg/example_bg.js");
20 | 
21 |   __wbg_set_wasm(wasm);
22 | 
23 |   width = width || 0;
24 |   height = height || 0;
25 | 
26 |   console.log({ quality, format, width, height });
27 | 
28 |   const result = compress(bytes, quality, format, width, height);
29 | 
30 |   if (typeof result === "string") {
31 |     throw new Error(result);
32 |   }
33 | 
34 |   return result;
35 | }
36 | 
37 | globalThis.compress_ = compress_;
38 | 


--------------------------------------------------------------------------------
/wasm/python/README.md:
--------------------------------------------------------------------------------
 1 | # Unleashing the power of Rust, Python, and WebAssembly in Apps Script
 2 | 
 3 | This folder is the companion to the talk "Unleashing the power of Rust, Python, and WebAssembly in Apps Script" at Google Cloud Next '24.
 4 | 
 5 | ## Development
 6 | 
 7 | The development of this proof of concept requires a deep understanding of the Apps Script runtime, JavaScript bundlers, the Rust programming language, and the WebAssembly ecosystem. Please note that this is a quickly evolving space, and the tools and techniques used in this project may become outdated quickly.
 8 | 
 9 | ### Prerequisites
10 | 
11 | - Node.js - https://nodejs.org/en/download
12 | - Rust - https://www.rust-lang.org/tools/install
13 | - Binaryen (for wasm-opt) - https://github.com/WebAssembly/binaryen
14 | 
15 | ### Build
16 | 
17 | 1. `npm i`
18 | 1. `npm run build`
19 | 


--------------------------------------------------------------------------------
/wasm/python/build.js:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright 2024 Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     http://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | import fs from "fs";
18 | import path from "path";
19 | import esbuild from "esbuild";
20 | import { wasmLoader } from "esbuild-plugin-wasm";
21 | 
22 | const outdir = "dist";
23 | const sourceRoot = "src";
24 | 
25 | await esbuild.build({
26 |   entryPoints: ["./src/wasm.js"],
27 |   bundle: true,
28 |   outdir,
29 |   sourceRoot,
30 |   platform: "neutral",
31 |   format: "esm",
32 |   plugins: [wasmLoader({ mode: "embedded" })],
33 |   inject: ["polyfill.js"],
34 |   minify: true,
35 |   banner: { js: "// Generated code DO NOT EDIT\n" },
36 | });
37 | 
38 | const passThroughFiles = ["main.js", "test.js", "appsscript.json"];
39 | 
40 | await Promise.all(
41 |   passThroughFiles.map(async (file) =>
42 |     fs.promises.copyFile(path.join(sourceRoot, file), path.join(outdir, file)),
43 |   ),
44 | );
45 | 


--------------------------------------------------------------------------------
/wasm/python/polyfill.js:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright 2024 Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     http://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | export {
18 |   TextEncoder,
19 |   TextDecoder,
20 | } from "fastestsmallesttextencoderdecoder/EncoderDecoderTogether.min.js";
21 | 


--------------------------------------------------------------------------------
/wasm/python/src/main.js:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright 2024 Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     http://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | /**
18 |  * Execute Python code and return the result.
19 |  * @param {string} code
20 |  * @param {...*} args - Arguments to pass to the Python code. Accessible as
21 |  *   `args` in the Python code.
22 |  *
23 |  * @customfunction
24 |  */
25 | async function PYTHON(code = "args", ...args) {
26 |   const result = await python_(`${code}`, ...args);
27 | 
28 |   if (result instanceof Error) {
29 |     throw result;
30 |   }
31 | 
32 |   return result;
33 | }
34 | 


--------------------------------------------------------------------------------
/wasm/python/src/test.js:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright 2024 Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     http://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | async function test() {}
18 | 
19 | async function assert(a, b, message) {
20 |   const aVal = await a;
21 |   const bVal = await b;
22 | 
23 |   if (aVal !== bVal) {
24 |     throw message ?? `'${aVal}' !== '${bVal}'`;
25 |   }
26 | }
27 | 


--------------------------------------------------------------------------------
/wasm/python/src/wasm.js:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Copyright 2024 Google LLC
 3 |  *
 4 |  * Licensed under the Apache License, Version 2.0 (the "License");
 5 |  * you may not use this file except in compliance with the License.
 6 |  * You may obtain a copy of the License at
 7 |  *
 8 |  *     http://www.apache.org/licenses/LICENSE-2.0
 9 |  *
10 |  * Unless required by applicable law or agreed to in writing, software
11 |  * distributed under the License is distributed on an "AS IS" BASIS,
12 |  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13 |  * See the License for the specific language governing permissions and
14 |  * limitations under the License.
15 |  */
16 | 
17 | globalThis.crypto = {
18 |   getRandomValues: (array) => array.map(() => Math.floor(Math.random() * 256)),
19 | };
20 | 
21 | /**
22 |  * Wrapper function for hello
23 |  * @param {string} name
24 |  * @returns
25 |  */
26 | async function python_(source, ...args) {
27 |   const wasm = await import("./pkg/example_bg.wasm");
28 |   const { __wbg_set_wasm, python } = await import("./pkg/example_bg.js");
29 | 
30 |   __wbg_set_wasm(wasm);
31 | 
32 |   return await python(source, args);
33 | }
34 | 
35 | globalThis.python_ = python_;
36 | 


--------------------------------------------------------------------------------